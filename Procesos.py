# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TipoAnimal.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import  QDateTime, Qt
from PyQt5.QtWidgets import *
from PyQt5 import uic
from UisProcesos import *
from Utilis import *
import sqlite3
import time as tm
#import openpyxl 
#from openpyxl import load_workbook
import sys,re,os
import FileOpera
from ReportesClass import CantidadActualAnimales

EXCELFILENAME='ListaSurtido.xlsx'

class CapturaManual(QWidget):
       def __init__(self):
           QDialog.__init__(self)
           self.ui=UiCapturaManSurtido()
           self.ui.setupUi(self)
           self.ui.Tabla.setColumnWidth(0,0)
           #self.ui.FechaCapWidget.setDate(QtCore.QDate(2021, 1, 1))
           now = QDateTime.currentDateTime().date()
           self.ui.FechaCapWidget.setDate(now)
           self.ui.NoOrdenCBox.activated.connect(self.LlenaTabla)
           self.ui.CapturaCampo.textChanged.connect(self.ChecaCantProd)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.ui.PBAgregar.clicked.connect(self.Agregar)
           self.ui.CapturaCampo.returnPressed.connect(self.Agregar)
           self.ui.PBBorrar.clicked.connect(self.Borrar)
           self.ui.PBGuardar.clicked.connect(self.GuardarCaptura)
           global ListaNoOrdenes,Lista,ListaCant,idprod
           ListaCant=[]
           self.CBoxData()
                     
       def CBoxData(self):
           global ListaNoOrdenes,ListaCant
           ListaCant=[]
           query="SELECT ID,NoOrden,IDProducto,Status FROM tblOrdenesSurtido WHERE Status = 0 OR Status = 1 OR Status = 2"
           ListaNoOrdenes=run_query(self,query)
           if len(ListaNoOrdenes)==0 :
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("No hay Ordenes para captura Manual")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()
              self.close()
              return
           self.ui.NoOrdenCBox.clear()
           for item in ListaNoOrdenes :
               j=str(item[1])
               self.ui.NoOrdenCBox.addItem(j) 
           self.ui.NoOrdenCBox.setCurrentIndex(0)
           self.LlenaTabla()
           self.ui.CapturaCampo.setFocus()
       
       def LlenaTabla(self):
           global Lista,NoOrden,IDOrden,DataProd
           IDOrden=0
           NoOrden=self.ui.NoOrdenCBox.currentText()
           IDOrden=ListaNoOrdenes[self.ui.NoOrdenCBox.currentIndex()][0]
           self.ui.NoOrdenValLbl.setText(NoOrden)
           query="""
           SELECT  tblProductos.Clave, tblProductos.Descripcion,tblProductos.ID
           FROM  tblProductos
           INNER JOIN tblOrdenesSurtido ON tblProductos.ID=tblOrdenesSurtido.IDProducto 
           WHERE tblOrdenesSurtido.ID= ?"""
           DataProd=run_query2(self,query,(IDOrden,))
           self.ui.ClaveValLbl.setText(DataProd[0][0])
           self.ui.NombreProValLbl.setText(DataProd[0][1])
           query="""
           SELECT  tblDetalleOrdenSurtido.ID, tblDetalleOrdenSurtido.Folio, tblCorrales.Descripcion, tblDetalleOrdenSurtido.CantSolicitada, tblDetalleOrdenSurtido.CantSurtida
           FROM tblDetalleOrdenSurtido
           INNER JOIN tblCorrales ON tblDetalleOrdenSurtido.IDCorral=tblCorrales.ID 
           WHERE IDOrden= ?"""
           Lista=run_query2(self,query,(IDOrden,))
           self.ui.Tabla.setRowCount(0)
           for ren in range(0,len(Lista)):
               self.ui.Tabla.insertRow(ren)
               self.ui.Tabla.setItem(ren, 0, QtWidgets.QTableWidgetItem(str(Lista[ren][0])))
               self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(Lista[ren][1])))
               self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(str(Lista[ren][2])))
               self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem(str(Lista[ren][3])))
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(str(Lista[ren][4])))
           
       def LlenadoColumnaCaptura(self):
           global ListaCant
           Acumulado=0
           for ren in range(0,len(Lista)):
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(None))
           for ren in range(0,len(ListaCant)):
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(ListaCant[ren][0]))
               Acumulado=Acumulado+float(ListaCant[ren][0])
           self.ui.AcumuladoLblVal.setText(str(Acumulado))
          
       def Agregar(self):
           global ListaCant,Lista
           l=[]
           d=self.ui.FechaCapWidget.date()
           FechaCap=d.toString(Qt.ISODate)
           if self.ChecaCantProd() == False :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Dato Invalido")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           if len(ListaCant) == len(Lista):
               return
           cap=self.ui.CapturaCampo.text()
           self.ui.CapturaCampo.setFocus()
           l.append(cap)
           l.append(FechaCap)
           ListaCant.append(l)
           self.LlenadoColumnaCaptura()
           self.ui.CapturaCampo.clear()

       def Borrar(self):
           global ListaCant
           if len(ListaCant)==0:
               return
           ListaCant.pop()
           self.LlenadoColumnaCaptura()

       def GuardarCaptura(self):
           global ListaCant,Lista,DataProd,ListaNoOrdenes
           query=" SELECT  ID,IDCliente,Folio,CantSurtida  FROM tblDetalleOrdenSurtido   WHERE IDOrden= ?"
           ListFolOrden=run_query2(self,query,(IDOrden,))
           d=self.ui.FechaCapWidget.date()
           FechaCap=d.toString(Qt.ISODate)
           #  29-03-2021   Se forza que la fecha de todos los folios de la orden se al misma
           fecha=FechaCap
           LCLen=len(ListaCant)
           LLen=len(Lista)
           if LCLen ==0 or LLen > LCLen:
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Captura Incompleta")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           query = "UPDATE  tblDetalleOrdenSurtido SET CantSurtida =?,  Fecha= ?  WHERE ID= ? "
           for ren in range(0,len(Lista)):
               cant=float(ListaCant[ren][0])
               iddetalle=int(Lista[ren][0])
               run_query2(self,query,(cant,fecha,iddetalle))
               
           #  Graba el valor 5 en la columna de Status para Indicar que fue capturada Manualmente.
           query = "UPDATE  tblOrdenesSurtido SET Status =5 WHERE ID = ?"
           run_query2(self,query,(IDOrden,))
           #MsgGrabReg(True)
           self.ui.AcumuladoLblVal.setText("0")

       # *********** Comienza seccion de carga de desglose de MP y a Almacen de Productos de folio de Proucto Servido *******************************************
           query=" SELECT  ID,IDCliente,Folio,CantSurtida  FROM tblDetalleOrdenSurtido   WHERE IDOrden= ?"
           ListFolOrden=run_query2(self,query,(IDOrden,))
           IDProd=DataProd[0][2]
           fecha=fecha
           TipoMov=3
           for j in range(0,len(ListFolOrden)):
               IDClieProve=ListFolOrden[j][1]
               res=self.BuscaSiClieTieneAlm(IDClieProve)
               ClaveAlmacen=res[0]
               IDAlmaProd=res[1]
               Cant=ListFolOrden[j][3]
               IDPesador=6
               Folio=ListFolOrden[j][2]
               Referencia=ListFolOrden[j][0]
               NotaProd='Generado de Surtidos No. Folio= '+ str(ListFolOrden[j][2])
               HaceCargoEnAlmaMP_X_SalProd(self,IDProd,fecha,TipoMov,ClaveAlmacen,Cant,IDClieProve,IDPesador,Folio)
               self.CargaAAlmaProdSurtCorrales(fecha,IDClieProve,IDAlmaProd,IDProd,Cant,NotaProd)
           self.CBoxData()
           msg=QMessageBox()
           msg.setWindowTitle("Informacion")
           msg.setText("Informacion Guardada Ok")
           msg.setIcon(QMessageBox.Warning)
           x=msg.exec_()

       def BuscaSiClieTieneAlm(self,IDCliente):
           DataAlmacen=[]
           query="SELECT Clave FROM  tblContenedoresMateriaPrima WHERE IDCliente= ?"
           Data=run_query2(self,query,(IDCliente,))
           if len(Data) == 0 :
               ClaveAlmacen="VALMO"
           else :
                ClaveAlmacen=Data[0][0]
           DataAlmacen.append(ClaveAlmacen)
           query=" SELECT  ID,Clave FROM tblContenedoresProducto "
           Data=run_query2(self,query)
           IDAlmaProd=""
           for j in range(0,len(Data)):
              if  Data[j][1] == ClaveAlmacen :
                   IDAlmaProd=Data[j][0]
           if IDAlmaProd == "" :
               for j in range(0,len(Data)):
                   if  Data[j][1] == "VALMO" :
                       IDAlmaProd=Data[j][0]
           DataAlmacen.append(IDAlmaProd)
           return DataAlmacen
             
       def ChecaF_O_I(self):
           Cant=self.ui.CapturaCampo.text()
           try:
               float(Cant)
               return True
	       
           except:
               return False

       def ChecaCantProd(self):
           v=self.ChecaF_O_I()
           Cant=self.ui.CapturaCampo.text()
           validar = v  and float(Cant)   < 3501 and float(Cant) >= 0
           if Cant == "":
              self.ui.CapturaCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CapturaCampo.setStyleSheet("border: 2px solid red;")
              return False
           elif validar:
              self.ui.CapturaCampo.setStyleSheet("border: 2px solid green;")
              return True 
           if int(Acumulado)  > 4500 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Se sobrepasa la Capacidad de la Tolva de 4500kgs")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return False
           else :
               return True 
       
       def CargaAAlmaProdSurtCorrales(self,Fecha,IDCliente,IDAlmacen,IDProd,Cant,Nota):
           TipoMov=2
           Oper=6
           datos=(Fecha,TipoMov,IDCliente,IDAlmacen,IDProd,Cant,Oper,Nota)
           query="INSERT INTO tblProductoMovimientos VALUES(NULL, NULL, ?, ?, ?, ?, ?, ?, ?, NULL,  NULL,  NULL, ?)"
           run_query2(self,query,datos)


class ListaOrdenesSurtido(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           self.ui=Ui_ListaOS()
           self.ui.setupUi(self)
           self.ui.Tabla.setColumnWidth(0,0)
           self.ui.Tabla.setColumnWidth(1,80)
           self.ui.Tabla.setColumnWidth(4,100)
           self.ui.Tabla.setColumnWidth(2,180)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.ui.PBAgregar.clicked.connect(self.AgregarOrden)
           self.ui.PBDetalle.clicked.connect(self.VerDetalleOrdenSurtido)
           self.ui.PBActualiza.clicked.connect(self.ListaOrdenes)
           self.ui.PBLogToEx.clicked.connect(self.A_EdicionOrdenServido)
           self.ui.PBLogToEx.setText("Edit Orden Servido")
           global ProdData,CorrData,DataCliente,Lista,NoOrden,UltimoFolio,Acumulado
           self.ui.RBotActivas.toggled.connect(self.ListaOrdenes) 
           self.ui.RBotCerradas.toggled.connect(self.ListaOrdenes)
           self.ui.RBotEnT1.toggled.connect(self.ListaOrdenes)
           self.ui.RBotEnT2.toggled.connect(self.ListaOrdenes)
           self.ui.RBotTodas.toggled.connect(self.ListaOrdenes)  
           self.ui.RBotTodas.setChecked(True)
           #self.ui.Tabla.itemSelectionChanged.connect(self.ListaSelectRows)
           query="SELECT ID,Descripcion FROM  tblProductos"
           ProdData=run_query(self,query)
           self.ListaOrdenes()
             
       def ListaSelectRows(self):
           CuRo=self.ui.Tabla.currentRow()
           #print(CuRo)
              
       def ListaOrdenes(self):
           global ListaOrdenesSurtido
           if self.ui.RBotActivas.isChecked():
                 query="""
                     SELECT  tblOrdenesSurtido.ID, tblOrdenesSurtido.NoOrden, tblProductos.Descripcion, tblOrdenesSurtido.Status, tblOrdenesSurtido.GloMovInd
                     FROM tblOrdenesSurtido
                     INNER JOIN tblProductos ON tblOrdenesSurtido.IDProducto=tblProductos.ID 
                     WHERE Status=0"""
           elif self.ui.RBotEnT1.isChecked():
                query="""
                     SELECT  tblOrdenesSurtido.ID, tblOrdenesSurtido.NoOrden, tblProductos.Descripcion, tblOrdenesSurtido.Status, tblOrdenesSurtido.GloMovInd
                     FROM tblOrdenesSurtido
                     INNER JOIN tblProductos ON tblOrdenesSurtido.IDProducto=tblProductos.ID 
                     WHERE Status=1"""
           elif self.ui.RBotEnT2.isChecked():
                query="""
                     SELECT  tblOrdenesSurtido.ID, tblOrdenesSurtido.NoOrden, tblProductos.Descripcion,  tblOrdenesSurtido.Status, tblOrdenesSurtido.GloMovInd
                     FROM tblOrdenesSurtido
                     INNER JOIN tblProductos ON tblOrdenesSurtido.IDProducto=tblProductos.ID 
                     WHERE Status=2 """
           
           elif self.ui.RBotCerradas.isChecked():
                query="""
                     SELECT  tblOrdenesSurtido.ID, tblOrdenesSurtido.NoOrden, tblProductos.Descripcion, tblOrdenesSurtido.Status, tblOrdenesSurtido.GloMovInd
                     FROM tblOrdenesSurtido
                     INNER JOIN tblProductos ON tblOrdenesSurtido.IDProducto=tblProductos.ID 
                     WHERE Status=5 OR Status= 6 OR Status= 7"""
           else :
                query="""
                     SELECT  tblOrdenesSurtido.ID, tblOrdenesSurtido.NoOrden, tblProductos.Descripcion, tblOrdenesSurtido.Status, tblOrdenesSurtido.GloMovInd
                     FROM tblOrdenesSurtido
                     INNER JOIN tblProductos ON tblOrdenesSurtido.IDProducto=tblProductos.ID """
           ListaOrdenesSurtido=run_query(self,query)    
           self.ui.Tabla.setRowCount(0)
           for ren in range(0,len(ListaOrdenesSurtido)):
               if ListaOrdenesSurtido[ren][3] == 0 :
                   St="Activa"
               elif  ListaOrdenesSurtido[ren][3] == 1 :
                   St="Por Sur T#1"
               elif  ListaOrdenesSurtido[ren][3] == 2 :
                   St="Por Sur T#2"
               elif  ListaOrdenesSurtido[ren][3] == 5:
                   St="CompMan"
               elif  ListaOrdenesSurtido[ren][3] == 6:
                   St="CompPor T#1"
               elif  ListaOrdenesSurtido[ren][3] == 7:
                   St="CompPor T#2"

               self.ui.Tabla.insertRow(ren)
               #self.ui.Tabla.setItem(ren, 0, QtWidgets.QTableWidgetItem(str(ListaOrdenesSurtido[ren][0])))
               self.ui.Tabla.setItem(ren, 0, QtWidgets.QTableWidgetItem(str(ListaOrdenesSurtido[ren][0])))
               self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(ListaOrdenesSurtido[ren][1])))
               self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(str(ListaOrdenesSurtido[ren][2])))
               self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem('ND'))
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(St))
      
       def AgregarOrden(self):
           self.dialog= CapturaOrdenSurtido(0,0)
           self.dialog.show()
           self.ListaOrdenes()

       def VerDetalleOrdenSurtido(self):
           CuRo=self.ui.Tabla.currentRow()
           if CuRo == -1 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText(" Selecciona un Renglon")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           CurrIDOrden=ListaOrdenesSurtido[CuRo]
           self.dialog=DetalleOrdenesSurtido(CurrIDOrden)
           self.dialog.show()
             
       def  A_EdicionOrdenServido(self):
           CuRo=self.ui.Tabla.currentRow()
           if CuRo == -1 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText(" Selecciona un Renglon")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           CurrIDOrden=ListaOrdenesSurtido[CuRo]
           GlbMovInd=str(CurrIDOrden[4])
           self.dialog=EditaOrdenSurtido(CurrIDOrden)
           self.dialog.show()
                    

class  DetalleOrdenesSurtido(QDialog):
       def __init__(self,CurrOrden):
           QDialog.__init__(self)
           self.ui=Ui_DetalleOrdenSurtido()
           self.ui.setupUi(self)
           self.ui.Tabla.setColumnWidth(0,0)
           self.CurrOrden=CurrOrden
           St="Activa"
           IDNoOrden=CurrOrden[0]
           self.ui.NoOrdenValLbl.setText(str(CurrOrden[1]))
           self.ui.NombreProValLbl.setText(CurrOrden[2])
           Estatus=CurrOrden[3]
           if Estatus==0 :
               St="Activa"
           elif Estatus==1 :
               St="En Tolva#1"
           elif Estatus==2:
                St="En Tolva#2"
           elif Estatus==5:
                St="Comp Man"
           elif Estatus==6:
                St="En Auto Tolva#1"
           elif Estatus==7:
                St="En Auto Tolva#2"    
           self.ui.EstatusOrdenValLbl.setText(St)
           query="""SELECT tblDetalleOrdenSurtido.Folio,  tblCorrales.Descripcion, tblDetalleOrdenSurtido.CantSolicitada,tblDetalleOrdenSurtido.CantSurtida,tblDetalleOrdenSurtido.Fecha 
           FROM tblDetalleOrdenSurtido
           INNER JOIN tblCorrales ON  tblDetalleOrdenSurtido.IDCorral= tblCorrales.ID
           WHERE IDOrden= ? """
           data=(IDNoOrden,)
           OrdenesSurtido=run_query2(self,query,data)
           self.ui.Tabla.setRowCount(0)
           TotalSol=0
           TotalSurtido=0
           for ren in range(0,len(OrdenesSurtido)):
               self.ui.Tabla.insertRow(ren)
               self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(OrdenesSurtido[ren][0]))) 
               self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(str(OrdenesSurtido[ren][1]))) 
               self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem(str(OrdenesSurtido[ren][2])))    
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(str(OrdenesSurtido[ren][3]))) 
               self.ui.Tabla.setItem(ren, 5, QtWidgets.QTableWidgetItem(str(OrdenesSurtido[ren][4])))   
               if OrdenesSurtido[ren][2] == None:
                   CurrSol=0
               else :
                   CurrSol=int(OrdenesSurtido[ren][2])
               if  OrdenesSurtido[ren][3] != None :
                   CurrSurtido=int(OrdenesSurtido[ren][3])
               else :
                   CurrSurtido=0
               TotalSol+=CurrSol
               TotalSurtido+=CurrSurtido
           self.ui.TotalSolValLbl.setText(str(TotalSol))
           self.ui.TotalSurtidoValLbl.setText(str(TotalSurtido))
           self.ui.PBCerrar.clicked.connect(self.close)


class CapturaOrdenSurtido(QDialog):
       def __init__(self,TipoOpe,EditIDNoOrden):
           QDialog.__init__(self)
           self.ui=Ui_CapturaOSur()
           self.ui.setupUi(self)
           self.ui.Tabla.setColumnWidth(0,0)
           if TipoOpe == 0 :
               self.setWindowTitle("Captura Manual Orden de Servido")
           self.ui.CantSolCampo.textChanged.connect(self.ChecaCantSolProd)
           self.ui.CantSurCampo.textChanged.connect(self.ChecaCantSurProd)
           self.ui.CorralCampo.textChanged.connect(self.FiltroCorral)
           self.ui.ProductoCBox.activated.connect(self.CurrProdCBoxdata)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.ui.PBAgregar.clicked.connect(self.AgregarATabla)
           self.ui.PBBorrar.clicked.connect(self.BorrarRenTabla)
           self.ui.PBGuardar.clicked.connect(self.GuardaOrden)
           self.ui.Lista.itemClicked.connect(self. AjustaSelCorr)
           #self.ui.CantCampo.returnPressed.connect(self.AgregarATabla)
           now = QDateTime.currentDateTime().date()
           self.ui.FechaSolWid.setDate(now)
           self.ui.FechaSurtWid.setDate(now)
           #self.ui.NoOrdenCampo.setFocus()
           global ProdData,CorrData,CorralesTodos,DataCliente,Lista,ListaToTabla,NoOrden,IDOrden,UltimoFolio,Acumulado,CorrLista
           ren=0
           Lista=[]
           ListaToTabla=[]
           query="SELECT ID,Clave,Descripcion FROM  tblProductos WHERE IDTipoStatus='Activo' and SeSirve= 'Si' ORDER BY Descripcion"
           ProdData=run_query(self,query)
           query="SELECT * FROM tblCorrales WHERE AsignACliente > 0 ORDER BY Descripcion"
           CorrData=run_query(self,query)
           query="SELECT * FROM  tblClientes"
           DataCliente=run_query(self,query)
           query="SELECT ID,NoOrden FROM tblOrdenesSurtido ORDER BY NoOrden DESC LIMIT 1"
           NO=run_query(self,query)
           if len(NO) ==0 :
               NoOrden=1
           else :
               NoOrden=int(NO[0][1])
               IDOrden=int(NO[0][0])+1
               NoOrden=NoOrden+1  
           self.ui.NoOrdenLblVal.setText(str(NoOrden))
           query="SELECT Folio FROM tblDetalleOrdenSurtido ORDER BY Folio DESC LIMIT 1"
           UF=run_query(self,query) 
           if len(UF) == 0 :
               UltimoFolio=0
           else:
               UltimoFolio=int(UF[0][0])       
           self.TraerData()
           self.ui.Tabla.setRowCount(0) 
           self.LlenaTabla()
           self.ChecaCantSolProd()
           self.FiltroCorral()
           self.SelecCorral()
           
       def TraerData(self):
           global CorrSel
           CorrSel=1
           self.ui.ProductoCBox.clear()
           for item in ProdData :
               j=str(item[2])
               self.ui.ProductoCBox.addItem(j) 
           self.ui.ProductoCBox.setCurrentIndex(0)
           i=0
                    
       
       def CurrProdCBoxdata(self):
           global CurrProdData
           i=self.ui.ProductoCBox.currentIndex()
           CurrProdID=ProdData[i][0]
           query="SELECT ID,Clave,Descripcion FROM  tblProductos WHERE ID=?"
           CurrProdData=run_query1SinMsg(self,query,(CurrProdID,))
           self.ui.ClaveProdValLbl.setText(CurrProdData[1])
           self.ui.NombreProValLbl.setText(CurrProdData[2])
           #self.ui.CantSolCampo.setFocus() 
           return CurrProdData
           pass
             
       def FiltroCorral(self):
           global CorrSel,CorrLista,CorrData
           CorrLista=[]
           self.ui.Lista.clear()
           d=self.ui.CorralCampo.text()
           CorrDes=d.upper()
           self.ui.CorralCampo.setText(CorrDes)
           if d !="" :
               CorrLista=[]
               self.ui.Lista.clear()
               for i in range(0,len(CorrData)):
                   DatToTest=CorrData[i][2]
                   res=DatToTest.startswith(CorrDes)
                   if res== True :
                       CorrLista.append(CorrData[i])
           elif d == "":
               CorrLista=[]
               self.ui.Lista.clear()
               for k in range(0,len(CorrData)):
                   CorrLista.append(CorrData[k])
           for i in range(0,len(CorrLista)):
               self.ui.Lista.addItem(str(CorrLista[i][2]))
           self.ui.Lista.setCurrentRow(0)
           self.SelecCorral()
          
       def SelecCorral(self):
           global CorrSel,CorrLista
           CorrSel=self.ui.Lista.currentRow()
           if CorrSel < 0:
               return
           TemDat=CorrLista[CorrSel][5]
           for l in range(0,len(DataCliente)):
                if DataCliente[l][0]==TemDat:
                   self.ui.ClienteValLbl.setText(str(DataCliente[l][2]))   
           self.ui.CorralSelLblVal.setText(str(CorrLista[CorrSel][2]))        
           
       def AjustaSelCorr(self):
           self.SelecCorral()
           #self.ui.CantSolCampo.setFocus()
                   
       def AgregarATabla(self):
           global UltimoFolio,CorrSel,CorrLista
           f=self.ui.FechaSurtWid.date()
           FechaSurt=f.toString(Qt.ISODate)
           f=self.ui.FechaSolWid.date()
           FechaSol=f.toString(Qt.ISODate)
           UltimoFolio=UltimoFolio+1
           ListaTemp=[]
           if len(CorrLista) == 0 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText(" Selecciona en la lista un Corral")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return 

           if self.ChecaCantSolProd() and self.ChecaCantSurProd() :  
              ListaTemp.append(CorrLista[CorrSel][5])
              ListaTemp.append(UltimoFolio)
              ListaTemp.append(CorrLista[CorrSel][0])
              ListaTemp.append(self.ui.CantSolCampo.text())
              ListaTemp.append(self.ui.CantSurCampo.text())
              ListaTemp.append(FechaSurt)
              ListaTemp.append(FechaSol)
              Lista.append(ListaTemp)
              self.LlenaTabla()
           else :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText(" Dato Capturado erroneo")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return 
           
           self.ui.CantSolCampo.clear()
           self.ui.CantSurCampo.clear()
           #self.ui.CorralCampo.setFocus()  

       def BorrarRenTabla(self):
           if len(Lista) == 0 :
              return False
           global UltimoFolio
           UltimoFolio=UltimoFolio-1
           Lista.pop()
           self.LlenaTabla()
       
       def LlenaTabla(self):
           global CorrData
           Acumulado=0
           NombCorral=''
           self.ui.Tabla.setRowCount(0)
           for ren in range(0,len(Lista)):
               self.ui.Tabla.insertRow(ren)
               for i in range(0,len(CorrData)):
                   if int(Lista[ren][2]) == CorrData[i][0]:
                       NombCorral=CorrData[i][2]
               self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(Lista[ren][1])))
               self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(NombCorral))
               self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem(str(Lista[ren][3])))
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(str(Lista[ren][4])))
               Acumulado=Acumulado+float(Lista[ren][4])
           self.ui.AcuValLbl.setText(str(Acumulado))
           return Acumulado
       
       def ChecaF_O_I(self,Data):
           Cant=Data
           try:
               float(Cant)
               return True
	       
           except:
               return False

       def ChecaCantSolProd(self):
           global Acumulado
           Cant=self.ui.CantSolCampo.text()
           v=self.ChecaF_O_I(Cant)
           validar = v  and float(Cant)   < 3501 and float(Cant) >= 0
           if Cant == "":
              self.ui.CantSolCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CantSolCampo.setStyleSheet("border: 2px solid red;")
              return False
           elif validar:
              self.ui.CantSolCampo.setStyleSheet("border: 2px solid green;")
              return True 
           if int(Acumulado)  > 4500 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Se sobrepasa la Capacidad de la Tolva de 4500kgs")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return False
           else :
               return True 

       def ChecaCantSurProd(self):
           Cant=self.ui.CantSurCampo.text()
           v=self.ChecaF_O_I(Cant)
           validar = v  and float(Cant)   < 3501 and float(Cant) >= 0
           if Cant == "":
              self.ui.CantSurCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CantSurCampo.setStyleSheet("border: 2px solid red;")
              return False
           elif validar:
              self.ui.CantSurCampo.setStyleSheet("border: 2px solid green;")
              return True 
           if int(Acumulado)  > 4500 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Se sobrepasa la Capacidad de la Tolva de 4500kgs")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return False
           else :
               return True 

       def ChecaAcumulado(self): 
           acc=0
           for ren in range(0,len(Lista)):
               acc=acc+int(Lista[ren][1])
           if int(acc)  > 4500 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Se sobrepasa la Capacidad de la Tolva de 4500kgs")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return False
           else :
               return True
           
       
       def GuardaOrden(self):
           GlbIndi=GeneraGlobalMovIndice(self)
           CurrProdData=self.CurrProdCBoxdata()
           if len(Lista) == 0 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("No hay Datos Para Guardar")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           now = QDateTime.currentDateTime().date()
           Fecha=now.toString(Qt.ISODate)
           #  ***************  Genera Folio de Salida  *****************
           #IDSalida=GenerarFolioSalidas(self,0,Fecha,1)
           Acumulado=self.LlenaTabla()
           prod=CurrProdData[0]
           status=5
           parameters =  (NoOrden,prod,status,0,GlbIndi)
           query="INSERT INTO tblOrdenesSurtido VALUES(NULL, ?, ?, ?, ?, ?)"
           run_query2(self,query,parameters)
           query="SELECT ID FROM tblOrdenesSurtido ORDER BY NoOrden DESC LIMIT 1"
           IDLi=run_query(self,query) 
           IDOrden=int(IDLi[0][0])
           for ren in range(0,len(Lista)):
               Lista[ren].insert(1,IDOrden)
               Lista[ren].append(GlbIndi)
           try:
               DBConMuchos=sqlite3.connect("valmodb.db")
               cur=DBConMuchos.cursor()
               #j=cur.execute("INSERT INTO tblOrdenesSurtido VALUES(NULL, ?, ?, ?, ?)",parameters)
               k=cur.executemany("INSERT INTO tblDetalleOrdenSurtido VALUES(NULL, ?, ?, ?, ?, ?,?, ?, ?, ?)",Lista)
               result=cur.fetchall
               DBConMuchos.commit()
               MsgGrabReg(True)
           except sqlite3.OperationalError :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("No se econtro tablas en  DB")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_() 
               exit()
           #  Hace cargo a almacenes de MP  desglose de los servidos
           CargaDesgloseMPsDeServidos(self,IDOrden,NoOrden,prod,GlbIndi)
           self.close()
           self.dialog=CapturaOrdenSurtido(0,0)
           self.dialog.show()

class EditaOrdenSurtido(QDialog):
       def __init__(self,ActOrden):
           QDialog.__init__(self)
           self.ui=Ui_EditarOrdenServido()
           self.ui.setupUi(self)
           self.ui.Tabla.setColumnWidth(0,0)
           self.ui.Tabla.setColumnWidth(1,60)
           self.ui.Tabla.setColumnWidth(2,120)
           self.ui.Tabla.setColumnWidth(3,80)
           self.ui.Tabla.setColumnWidth(4,80)
           self.ui.Lista.itemClicked.connect(self. AjustaSelCorr)
           self.ui.CantSolCampo.textChanged.connect(self.ChecaCantSolProd)
           self.ui.CantSurCampo.textChanged.connect(self.ChecaCantSurProd)
           self.ui.CorralCampo.textChanged.connect(self.FiltroCorral)
           self.ui.PBAjustaOrden.clicked.connect(self.AjustaOrden)
           self.ui.PBAjustaFolio.clicked.connect(self.AjustaFolio)
           self.ui.PBGuardar.clicked.connect(self.GuardaOrden)
           self.ui.PBCerrar.clicked.connect(self.Cerrar)
           
           global ProdData, CorrData, DataCliente,CurrOrden, ListaDetalleServidos,IDOrden, ModifyFlag
           CurrOrden=ActOrden
           ModifyFlag= False
           query="SELECT ID,Clave,Descripcion FROM  tblProductos WHERE IDTipoStatus='Activo' and SeSirve= 'Si' ORDER BY Descripcion"
           ProdData=run_query(self,query)
           query="SELECT * FROM tblCorrales WHERE AsignACliente > 0 ORDER BY Descripcion"
           CorrData=run_query(self,query)
           query="SELECT * FROM  tblClientes"
           DataCliente=run_query(self,query)
           IDOrden=CurrOrden[0]
           #print(CurrOrden)
           self.ui.NoOrdenLblVal.setText(str(CurrOrden[1]))
           self.ui.NombreProValLbl.setText(CurrOrden[2])
           Estatus=CurrOrden[3]
           now = QDateTime.currentDateTime().date()
           self.ui.FechaSolWid.setDate(now)
           self.ui.FechaSurtWid.setDate(now)
           
           self.TraerData()
           self.ui.Tabla.setRowCount(0) 
           ListaDetalleServidos=self.JalaListaDetalleOrden(IDOrden)
           self.LlenaTabla(ListaDetalleServidos)
           self.FiltroCorral()
           self.SelecCorral()
       
       def closeEvent(self, event):
           if ModifyFlag == True :
               event.ignore()
           else :
               event.accept()
        
       def JalaListaDetalleOrden(self,IDOrden):
           query= """SELECT  tblDetalleOrdenSurtido.ID, Folio, tblCorrales.Descripcion, CantSolicitada,CantSurtida, tblDetalleOrdenSurtido.IDCorral,tblDetalleOrdenSurtido.Fecha
                     FROM  tblDetalleOrdenSurtido
                     INNER JOIN tblCorrales ON  tblDetalleOrdenSurtido.IDCorral= tblCorrales.ID
                     WHERE IDOrden = ?
                  """
           ListaDetalleServidos=run_query2(self,query,(IDOrden,))
           return ListaDetalleServidos

       def LlenaTabla(self,Lista):
           global CorrData, Acumulado
           Acumulado=0
           NombCorral=''
           self.ui.Tabla.setRowCount(0)
           for ren in range(0,len(Lista)):
               self.ui.Tabla.insertRow(ren)
               self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(Lista[ren][1])))
               self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(str(Lista[ren][2])))
               self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem(str(Lista[ren][3])))
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(str(Lista[ren][4])))
               self.ui.Tabla.setItem(ren, 5, QtWidgets.QTableWidgetItem(str(Lista[ren][6])))
               Acumulado=Acumulado+float(Lista[ren][4])
           self.ui.AcuValLbl.setText(str(Acumulado))
           return Acumulado

       def TraerData(self):
           global CorrSel
           CorrSel=1
           self.ui.ProductoCBox.clear()
           for item in ProdData :
               j=str(item[2])
               self.ui.ProductoCBox.addItem(j) 
           self.ui.ProductoCBox.setCurrentIndex(0)
           i=0
      
       def AjustaOrden(self):
           msg="Estas Seguro de Modificar Producto"
           res=QMessageBox.question(self,"Modificar Folio ??",msg,
                                  QMessageBox.Yes | QMessageBox.No)
           if res==QMessageBox.No: 
               return
           global CurrProdData, ModifyFlag
           ModifyFlag= True
        #    EditedOrdenList= list(CurrOrden)
        #    EditedOrdenList.pop(2)
        #    EditedOrdenList.insert(2,CurrProdData[0])
           CurrProdData=ProdData[self.ui.ProductoCBox.currentIndex()]
           query = """UPDATE  tblOrdenesSurtido SET IDProducto = ?
                      WHERE ID = ?"""
           res=run_query(self,query, (CurrProdData[0],CurrOrden[0]))
           query = """SELECT tblOrdenesSurtido.IDProducto, tblProductos.Clave, tblProductos.Descripcion 
                      FROM tblOrdenesSurtido
                      INNER JOIN tblProductos ON tblProductos.ID = tblOrdenesSurtido.IDProducto
                      WHERE tblOrdenesSurtido.ID = ?
                    """
           Data=run_query(self,query, (CurrOrden[0],))
           self.ui.ClaveProdValLbl.setText(Data[0][1])
           self.ui.NombreProValLbl.setText(Data[0][2])

       def AjustaFolio(self):
           global CorrLista,CurrOrden,IDOrden,ModifyFlag
           ListaTemp=[]
           CuRo=self.ui.Tabla.currentRow()
           if CuRo == -1 :
               MsgSelUnRnglon(self)
               return
           CurrFolio= ListaDetalleServidos[CuRo]
           msg="Estas Seguro de Modificar Folio="+str(CurrFolio[1])
           res=QMessageBox.question(self,"Modificar Folio ??",msg,
                                  QMessageBox.Yes | QMessageBox.No)
           if res==QMessageBox.No: 
               return
                 
           if self.ChecaCantSolProd() and self.ChecaCantSurProd() :
               f=self.ui.FechaSurtWid.date()
               FechaSurt=f.toString(Qt.ISODate)
               f=self.ui.FechaSolWid.date()
               FechaSol=f.toString(Qt.ISODate)
               Corral=CorrLista[CorrSel][0]
               CantSol=self.ui.CantSolCampo.text()
               CantServida=self.ui.CantSurCampo.text()
               parameters =  (Corral, CantSol, CantServida, FechaSurt, FechaSol, CurrFolio[0])
               query = """UPDATE  tblDetalleOrdenSurtido SET IDCorral = ?, CantSolicitada = ?, CantSurtida = ?, 
                          Fecha = ?, FechaSol= ? WHERE ID = ?"""
               res=run_query(self,query, parameters)
               #ListaDetalleServidos=self.JalaListaDetalleOrden(IDOrden)
               self.LlenaTabla(self.JalaListaDetalleOrden(IDOrden))
               ModifyFlag= True
           else :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText(" Dato de cantidad erroneo")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           
       def Cerrar(self):
           self.close 
        
       def FiltroCorral(self):
           global CorrSel,CorrLista,CorrData
           CorrLista=[]
           self.ui.Lista.clear()
           d=self.ui.CorralCampo.text()
           CorrDes=d.upper()
           self.ui.CorralCampo.setText(CorrDes)
           if d !="" :
               CorrLista=[]
               self.ui.Lista.clear()
               for i in range(0,len(CorrData)):
                   DatToTest=CorrData[i][2]
                   res=DatToTest.startswith(CorrDes)
                   if res== True :
                       CorrLista.append(CorrData[i])
           elif d == "":
               CorrLista=[]
               self.ui.Lista.clear()
               for k in range(0,len(CorrData)):
                   CorrLista.append(CorrData[k])
           for i in range(0,len(CorrLista)):
               self.ui.Lista.addItem(str(CorrLista[i][2]))
           self.ui.Lista.setCurrentRow(0)
           self.SelecCorral()
          
       def SelecCorral(self):
           global CorrSel,CorrLista
           CorrSel=self.ui.Lista.currentRow()
           if CorrSel < 0:
               return
           TemDat=CorrLista[CorrSel][5]
           for l in range(0,len(DataCliente)):
                if DataCliente[l][0]==TemDat:
                   self.ui.ClienteValLbl.setText(str(DataCliente[l][2]))   
           self.ui.CorralSelLblVal.setText(str(CorrLista[CorrSel][2]))        
           
       def AjustaSelCorr(self):
           self.SelecCorral()
           
       def ChecaF_O_I(self,Data):
           Cant=Data
           try:
               float(Cant)
               return True
	       
           except:
               return False

       def ChecaCantSolProd(self):
           global Acumulado
           Cant=self.ui.CantSolCampo.text()
           v=self.ChecaF_O_I(Cant)
           validar = v  and float(Cant)   < 3501 and float(Cant) >= 0
           if Cant == "":
              self.ui.CantSolCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CantSolCampo.setStyleSheet("border: 2px solid red;")
              return False
           elif validar:
              self.ui.CantSolCampo.setStyleSheet("border: 2px solid green;")
              return True 
           if int(Acumulado)  > 4500 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Se sobrepasa la Capacidad de la Tolva de 4500kgs")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return False
           else :
               return True 

       def ChecaCantSurProd(self):
           Cant=self.ui.CantSurCampo.text()
           v=self.ChecaF_O_I(Cant)
           validar = v  and float(Cant)   < 3501 and float(Cant) >= 0
           if Cant == "":
              self.ui.CantSurCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CantSurCampo.setStyleSheet("border: 2px solid red;")
              return False
           elif validar:
              self.ui.CantSurCampo.setStyleSheet("border: 2px solid green;")
              return True 
           if int(Acumulado)  > 4500 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Se sobrepasa la Capacidad de la Tolva de 4500kgs")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return False
           else :
               return True 

       def ChecaAcumulado(self): 
           acc=0
           for ren in range(0,len(Lista)):
               acc=acc+int(Lista[ren][1])
           if int(acc)  > 4500 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Se sobrepasa la Capacidad de la Tolva de 4500kgs")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return False
           else :
               return True
       
       def GuardaOrden(self):
           global ModifyFlag
           if ModifyFlag == False :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText(" No se cambio Info para Guardar")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               self.close()
               return
           global CurrProdData
           GlbMovInd=str(CurrOrden[4])
           query = """SELECT tblOrdenesSurtido.IDProducto
                      FROM tblOrdenesSurtido
                      WHERE tblOrdenesSurtido.ID = ?
                    """
           Data=RunQueryOne(self,query, (CurrOrden[0],))
           prod=Data
           IDOrden=CurrOrden[0]
           NoOrden=CurrOrden[1]
           BorraMovDeDesgloseMP(self,GlbMovInd)
           BorrarMovProductos(self,GlbMovInd)
           CargaDesgloseMPsDeServidos(self,IDOrden,NoOrden,prod,GlbMovInd)
           ModifyFlag = False
           msg=QMessageBox()
           msg.setWindowTitle("Informacion")
           msg.setText(" Actualizacion Guardardada")
           msg.setIcon(QMessageBox.Warning)
           x=msg.exec_()
           self.close()

class  AsignaCorral(QDialog):
        def __init__(self):
            QDialog.__init__(self)
            PathPgm=os.getcwdb()
            path=os.path.join(str(PathPgm,'utf-8'),'GUIs','AsignaCorralWin.ui')
            uic.loadUi(path,self)
            self.PBCerrar=self.findChild(QPushButton,'PBCerrar')
            self.PBDer=self.findChild(QPushButton,'PBDer')
            self.PBIzq=self.findChild(QPushButton,'PBIzq')
            self.Tabla=self.findChild(QTableWidget,'Tabla')
            self.Tabla2=self.findChild(QTableWidget,'Tabla2')
            self.FechaSel=self.findChild(QDateEdit,'FechaSel')
            self.ClienteCBox=self.findChild(QComboBox,'ClienteCBox')
            # self.RBotPorCliente=self.findChildren(QRadioButton,'RBotPorCliente')
            # self.RBotPorCorral=self.findChildren(QRadioButton,'RBotPorCorral')
            # self.RBotTodos=self.findChildren(QRadioButton,'RBotTodos')
            DerRutaIcon=os.path.join(str(PathPgm,'utf-8'),'Iconos','FlechaDerNegra.png')
            IzqRutaIcon=os.path.join(str(PathPgm,'utf-8'),'Iconos','FlechaIzqNegra.png')
            IzqIcon = QtGui.QIcon(IzqRutaIcon)
            DerIcon = QtGui.QIcon(DerRutaIcon)
            self.PBDer.setIcon(DerIcon)
            self.PBIzq.setIcon(IzqIcon)
            now = QDateTime.currentDateTime().date()
            self.Tabla.setColumnWidth(0,50)
            self.Tabla.setColumnWidth(1,200)
            self.Tabla.setColumnWidth(2,70)
            self.Tabla2.setColumnWidth(0,0)
            self.Tabla2.setColumnWidth(1,180)
            self.Tabla2.setColumnWidth(2,0)
            self.Tabla2.setColumnWidth(3,200)
            self.Tabla2.setColumnWidth(4,100)
            self.FechaSel.setDate(now)
            self.PBCerrar.clicked.connect(self.close)
            self.PBDer.clicked.connect(self.Asigna)
            self.PBIzq.clicked.connect(self.Libera)
            self.RBotPorFecha.toggled.connect(self.LlenaTablas)
            self.RBotPorCliente.toggled.connect(self.LlenaTablas)
            self.RBotPorCorral.toggled.connect(self.LlenaTablas)
            self.ClienteCBox.activated.connect(self.LlenaTablas)
            self.LlenaClieCBox()
            self.LlenaTablas()
           
        def LlenaClieCBox(self):
            global DataCliente
            query="SELECT ID,Clave,Nombre FROM  tblClientes ORDER BY Nombre"
            DataCliente=run_query(self,query)
            self.ClienteCBox.clear()
            for item in DataCliente :
               j=str(item[2])
               self.ClienteCBox.addItem(j) 
            self.ClienteCBox.setCurrentIndex(0)

        def LlenaTablas(self):
            global CorrDataTab1,CorrDataTab2,DataCliente
            CorrDataTab1=[]
            CorrDataTab2=[]
            i=self.ClienteCBox.currentIndex()
            IDCliente=DataCliente[i][0]
            #  Jala Corrales libres
            query=  """ SELECT ID,Descripcion,IDTipoStatus 
                       FROM tblCorrales 
                       WHERE AsignACliente = 0 AND IDTipoStatus='Activo' 
                       ORDER BY Descripcion
                    """
            CorrDataTab1=run_query2(self,query)
            #  jala Corrales Asignados
            if self.RBotPorFecha.isChecked()  :
                query=  """ SELECT tblCorrales.ID,tblCorrales.Descripcion,tblClientes.ID,tblClientes.Nombre,tblCorrales.FechaAsigna
                            FROM tblCorrales 
                            INNER JOIN tblClientes ON tblClientes.ID = tblCorrales.AsignACliente
                            WHERE tblCorrales.AsignACliente > ?  
                            ORDER BY tblCorrales.FechaAsigna
                        """
                Opcion=0
            elif self.RBotPorCliente.isChecked()  :
                query=  """ SELECT tblCorrales.ID,tblCorrales.Descripcion,tblClientes.ID,tblClientes.Nombre,tblCorrales.FechaAsigna
                            FROM tblCorrales 
                            INNER JOIN tblClientes ON tblClientes.ID = tblCorrales.AsignACliente
                            WHERE tblCorrales.AsignACliente = ?  
                            ORDER BY tblClientes.Nombre
                        """
                Opcion=IDCliente
            elif self.RBotPorCorral.isChecked()  :
                query=  """ SELECT tblCorrales.ID,tblCorrales.Descripcion,tblClientes.ID,tblClientes.Nombre,tblCorrales.FechaAsigna
                            FROM tblCorrales 
                            INNER JOIN tblClientes ON tblClientes.ID = tblCorrales.AsignACliente
                            WHERE tblCorrales.AsignACliente > ? 
                            ORDER BY tblCorrales.Descripcion
                        """
                Opcion= 0
            CorrDataTab2=run_query2(self,query,(Opcion,))
            # Llena Tabla #1
            self.Tabla.setRowCount(0)
            for ren,RenData in enumerate (CorrDataTab1):
                self.Tabla.insertRow(ren)
                for col,data in enumerate(RenData):
                    self.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(data)))
            # Llena tabla #2
            self.Tabla2.setRowCount(0)
            for ren,RenData in enumerate (CorrDataTab2):
                self.Tabla2.insertRow(ren)
                for col,data in enumerate(RenData):
                    self.Tabla2.setItem(ren,col, QtWidgets.QTableWidgetItem(str(data)))

        def Asigna(self):
            global DataCliente
            f_ini=self.FechaSel.date()
            FechaAsigna=f_ini.toString(Qt.ISODate)
            CuRo=self.Tabla.currentRow()
            i=self.ClienteCBox.currentIndex()
            IDCliente=DataCliente[i][0]
            if CuRo < 0 :
                msg=QMessageBox()
                msg.setWindowTitle("Informacion")
                msg.setText("Selecciona un renglon")
                msg.setIcon(QMessageBox.Warning)
                x=msg.exec_()
                return
            IDCorral= CorrDataTab1[CuRo][0]
            msg=" Asignar Corral="+str(CorrDataTab1[CuRo][1])+"  a  "+self.ClienteCBox.currentText()
            res=QMessageBox.question(self,"Asignar ??",msg,
                                QMessageBox.Yes | QMessageBox.No)
            if res==QMessageBox.No: 
                return
            query = """UPDATE  tblCorrales SET   AsignACliente = ?, FechaAsigna=?  WHERE ID = ?"""
            run_query2(self,query,(IDCliente,FechaAsigna,IDCorral,)) 
            self.LlenaTablas()
            query= """ INSERT INTO tblAsignaCorrales VALUES(NULL, ?, ?, ?, ?)"""
            run_query2(self,query,(IDCorral,IDCliente,FechaAsigna,1))
            
        def Libera(self):
            global DataCliente
            f_ini=self.FechaSel.date()
            FechaLibera=f_ini.toString(Qt.ISODate)
            CuRo=self.Tabla2.currentRow()
            if CuRo < 0 :
                msg=QMessageBox()
                msg.setWindowTitle("Informacion")
                msg.setText("Selecciona un renglon")
                msg.setIcon(QMessageBox.Warning)
                x=msg.exec_()
                return
            IDCorral= CorrDataTab2[CuRo][0]
            IDCliente=CorrDataTab2[CuRo][2]
            Cant=CantidadActualAnimales(self,IDCorral,FechaLibera) 
            if Cant > 0 :
                msg=QMessageBox()
                msg.setWindowTitle("Informacion")
                h="Corral con Animales= "+ str(Cant)
                msg.setText(h)
                msg.setIcon(QMessageBox.Warning)
                x=msg.exec_()
                return
            msg=" Liberar Corral= "+str(CorrDataTab2[CuRo][1])
            res=QMessageBox.question(self,"Asignar ??",msg,
                                QMessageBox.Yes | QMessageBox.No)
            if res==QMessageBox.No: 
                return
            query = """UPDATE  tblCorrales SET   AsignACliente = ?, FechaAsigna=?  WHERE ID = ?"""
            run_query2(self,query,(0,"",IDCorral,)) 
            self.LlenaTablas()
            query= """ INSERT INTO tblAsignaCorrales VALUES(NULL, ?, ?, ?, ?)"""
            run_query2(self,query,(IDCorral,IDCliente,FechaLibera,0))
            

class MovAnimales(QDialog):
     def __init__(self):
         QDialog.__init__(self)
         self.ui=Ui_MovAnimalesPpal()
         self.ui.setupUi(self)
         global Lista
         self.ui.Tabla.setColumnWidth(0,50)
         self.ui.Tabla.setColumnWidth(2,200)
         self.ui.Tabla.setColumnWidth(3,80)
         self.ui.Tabla.setColumnWidth(5,50)
         self.ui.Tabla.setColumnWidth(6,200)
         self.ui.PBCerrar.clicked.connect(self.close)
         self.ui.PBAgregar.clicked.connect(self.Agregar)
         self.ui.PBEditar.clicked.connect(self.Editar)
         self.ui.PBActualizar.clicked.connect(self.LlenaTabla)
         self.LlenaTabla()

     def JalaDatos(self):
         global Lista
         if self.ui.RBotTodos.isChecked():
             query= """
                    SELECT tblMovimientoAnimales.Folio, tblMovimientoAnimales.Fecha, tblClientes.Nombre , tblCorrales.Descripcion, tblMovimientoAnimales.IDMovimiento,
                    tblMovimientoAnimales.Cantidad, tblMovimientoAnimales.Notas
                    FROM tblMovimientoAnimales
                    INNER JOIN tblClientes ON tblMovimientoAnimales.IDCliente=tblClientes.ID 
                    INNER JOIN tblCorrales ON tblMovimientoAnimales.IDCorral=tblCorrales.ID
                    """
         elif self.ui.RBotUlt100.isChecked():
             query= """
                    SELECT tblMovimientoAnimales.Folio, tblMovimientoAnimales.Fecha, tblClientes.Nombre , tblCorrales.Descripcion, tblMovimientoAnimales.IDMovimiento,
                    tblMovimientoAnimales.Cantidad, tblMovimientoAnimales.Notas
                    FROM tblMovimientoAnimales
                    INNER JOIN tblClientes ON tblMovimientoAnimales.IDCliente=tblClientes.ID 
                    INNER JOIN tblCorrales ON tblMovimientoAnimales.IDCorral=tblCorrales.ID
                    ORDER BY Folio
                    ASC LIMIT 100
                    """
         Lista=run_query(self,query)
         return Lista
     
     def LlenaTabla(self):
         Lista=self.JalaDatos()
         self.ui.Tabla.setRowCount(0)
         for ren in range(0,len(Lista)):
             self.ui.Tabla.insertRow(ren)
             if int(Lista[ren][4]) == 0 :
                 TipoMov="Entrada"
             elif int(Lista[ren][4]) == 1 :
                 TipoMov="Salida"
             self.ui.Tabla.setItem(ren, 0, QtWidgets.QTableWidgetItem(str(Lista[ren][0])))
             self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(Lista[ren][1])))
             self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(str(Lista[ren][2])))
             self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem(str(Lista[ren][3])))
             self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(TipoMov))
             self.ui.Tabla.setItem(ren, 5, QtWidgets.QTableWidgetItem(str(Lista[ren][5])))
             self.ui.Tabla.setItem(ren, 6, QtWidgets.QTableWidgetItem(str(Lista[ren][6])))
     
     def Agregar(self):
         self.dialog= AgregarMovAnimales(0)
         self.dialog.show()
     
     def Editar(self):
         Lista=self.JalaDatos()
         CuRo=self.ui.Tabla.currentRow()
         if CuRo == -1 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText(" Selecciona un Renglon")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
         CurrFolio=Lista[CuRo]
         self.dialog= EditaMovAnimales(CurrFolio)
         self.dialog.show()

class  AgregarMovAnimales(QDialog):
       def __init__(self,Data):
           QDialog.__init__(self)
           PathPgm=os.getcwdb()
           path=os.path.join(str(PathPgm,'utf-8'),'GUIs','AgregaMovAnimales.ui')
           uic.loadUi(path,self)
           self.PBCerrar=self.findChild(QPushButton,'PBCerrar')
           self.CorralDestCBox=self.findChild(QComboBox,'CorralDestCBox')
           global Lista,CurrFolio
           CurrFolio=Data
           Lista=[]
           #self.ui.Tabla.hideColumn(0)
           self.CorralDestCBox.activated.connect(self.JalaInfoCorrDest)
           self.CantCampo.textChanged.connect(self.ChecaCant)
           self.PesoCampo.textChanged.connect(self.ChecaPeso)
           self.PBCerrar.clicked.connect(self.close)
           self.RBotEntrada.toggled.connect(self.TipoMovimiento)
           self.RBotSalida.toggled.connect(self.TipoMovimiento)
           self.RBotInterno.toggled.connect(self.TipoMovimiento)
           self.Lista.itemClicked.connect(self. AjustaSelCorr)
           self.CorralCampo.textChanged.connect(self.FiltroCorral)
           #self.ui.PBAgregar.clicked.connect(self.AgregarATabla)
           #self.ui.PBBorrar.clicked.connect(self.BorrarRenTabla)
           self.PBGuardar.clicked.connect(self.GuardarMovimiento)
           now = QDateTime.currentDateTime().date()
           self.FechaMvtoSel.setDate(now)
           self.TraeTablasFrmDB()
           self.AjustaCorrDest()
           self.TipoMovimiento()
           self.FiltroCorral()
           self.SelecCorral()
             
       def TraeTablasFrmDB(self): 
           global CorrData,DataCliente,DataTipoAnimales,UltimoFolio   
           query="SELECT ID,Clave,Nombre FROM  tblClientes ORDER BY Nombre"
           DataCliente=run_query(self,query)
           query="SELECT * FROM  tblTipoAnimales"
           DataTipoAnimales=run_query(self,query)
           self.TipoAnimalCBox.clear()
           for item in DataTipoAnimales:
               j=str(item[1])
               self.TipoAnimalCBox.addItem(j) 
           self.ChecaCant()
           self.ChecaPeso()
           self.CantCampo.setFocus()
           CorrData=JalaCorralesAsignados(self)
           if CurrFolio == 0 :
               query="SELECT Folio FROM tblMovimientoAnimales ORDER BY Folio DESC LIMIT 1"
               UF=run_query(self,query) 
               UltimoFolio=int(UF[0][0])
               self.FolioValLbl.setText(str(UltimoFolio+1))
               #self.JalaCorralesDeClieSel()
           else :
               query="SELECT Peso,NoGuia,Notas,IDCliente,IDCorral FROM tblMovimientoAnimales WHERE Folio= ?"
               OtrosDatosCurrFol=run_query2(self,query,(CurrFolio[0],)) 
               self.FolioValLbl.setText(str(CurrFolio[0]))
               d=CurrFolio[1].split('-')
               anio=int(d[0])
               mes=int(d[1])
               dia=int(d[2])
               self.FechaMvtoSel.setDate(QtCore.QDate(anio,mes,dia))
               self.CantCampo.setText(str(CurrFolio[5]))
               self.PesoCampo.setText(str(OtrosDatosCurrFol[0][0]))
               self.GuiaCampo.setText(str(OtrosDatosCurrFol[0][1]))
               self.Notas.setText(str(OtrosDatosCurrFol[0][2]))
               
               
       def AjustaCorrDest(self):
            global CorrCliente
            CorrOrgSelData=self.SelecCorral()
            if  CorrOrgSelData == -1:  return
            IDCorral=CorrOrgSelData[0]
            IDCliente=CorrOrgSelData[2]
            CorrCliente=JalaCorralesAsignadoACliente(self,IDCliente)
            self.CorralDestCBox.clear()
            for item,Corr in enumerate(CorrCliente):
                self.CorralDestCBox.addItem(Corr[1])
            Cliente=CorrOrgSelData[3]
            self.ClienteValLbl.setText(Cliente)
            self.CorralLblVal.setText(CorrOrgSelData[1])
            Fecha=self.FechaMvtoSel.date()
            FechaMvto=Fecha.toString(Qt.ISODate)
            CorralNoAnimalesAct=CantidadActualAnimales(self,IDCorral,FechaMvto)
            self.CorralCantActLblVal.setText(str(CorralNoAnimalesAct))
            self.JalaInfoCorrDest()
            return CorrCliente
            
            
       
       def JalaInfoCorrDest(self):
           idxcorral=self.CorralDestCBox.currentIndex()
           IDCorral=CorrCliente[idxcorral][0]
           Corral=CorrCliente[idxcorral][1]
           self.CorralDestLblVal.setText(Corral)
           Fecha=self.FechaMvtoSel.date()
           FechaMvto=Fecha.toString(Qt.ISODate)
           CorralNoAnimalesAct=CantidadActualAnimales(self,IDCorral,FechaMvto)
           self.CantActulaCorrDestLblVal.setText(str(CorralNoAnimalesAct))
            
       def AjustaCorrData(self):
           global CorrData
           idxCorral=self.CorralCBox.currentIndex()
           if len(CorrData)  == 0 :
              self.ui.NombreValLbl.setText('ND')
              self.ui.ClaveValLbl.setText('ND')
              self.ui.EstatusValLbl.setText('ND')
           else :
              self.ui.NombreValLbl.setText(CorrData[idxCorral][1])
              self.ui.ClaveValLbl.setText(CorrData[idxCorral][2])
              self.ui.EstatusValLbl.setText(CorrData[idxCorral][3])
           
                      
       def TipoMovimiento(self):
           global CurrFolio
           if CurrFolio == 0 :
               if self.RBotInterno.isChecked() :
                    self.BanerLbl.setText("Mov Interno")
                    self.PesoLbl.setText("Peso de Entrada")
                    self.AjustaItemsInterno(True)
               elif self.RBotEntrada.isChecked() :
                    self.BanerLbl.setText("Entrada")
                    self.PesoLbl.setText("Peso de Entrada")
                    self.AjustaItemsInterno(False)
               elif self.RBotSalida.isChecked()  :
                    self.BanerLbl.setText("Salida")
                    self.PesoLbl.setText("Peso de Salida")
                    self.AjustaItemsInterno(False)
           self.AjustaCorrDest()
                
       def AjustaItemsInterno(self,St):
           if St :
               self.CorralDestCBox.setEnabled(True)
               self.CorralDestLbl.setEnabled(True)
               self.CorralDestLbl_2.setEnabled(True)
               self.CorralDestLblVal.setEnabled(True)
               self.CantActulaCorrDestLbl.setEnabled(True)
               self.CantActulaCorrDestLblVal.setEnabled(True)
               
           else :
               self.CorralDestCBox.setEnabled(False)
               self.CorralDestLbl.setEnabled(False)
               self.CorralDestLbl_2.setEnabled(False)
               self.CorralDestLblVal.setEnabled(False)
               self.CantActulaCorrDestLbl.setEnabled(False)
               self.CantActulaCorrDestLblVal.setEnabled(False)


       def FiltroCorral(self):
           global CorrSel,CorrLista,CorrData
           CorrLista=[]
           self.Lista.clear()
           d=self.CorralCampo.text()
           CorrDes=d.upper()
           self.CorralCampo.setText(CorrDes)
           if d !="" :
               CorrLista=[]
               self.Lista.clear()
               for i in range(0,len(CorrData)):
                   DatToTest=CorrData[i][1]
                   res=DatToTest.startswith(CorrDes)
                   if res== True :
                       CorrLista.append(CorrData[i])
           elif d == "":
               CorrLista=[]
               self.Lista.clear()
               for k in range(0,len(CorrData)):
                   CorrLista.append(CorrData[k])
           for i in range(0,len(CorrLista)):
               self.Lista.addItem(str(CorrLista[i][1]))
           self.Lista.setCurrentRow(0)
           self.SelecCorral()
          
       def SelecCorral(self):
           global CorrSel,CorrLista
           CorrSel=self.Lista.currentRow()
           if CorrSel < 0:
               return -1
           self.CorralLblVal.setText(str(CorrLista[CorrSel][1]))  
           return  CorrLista[CorrSel] 
    
       def AjustaSelCorr(self):
           self.AjustaCorrDest()
           self.SelecCorral()
       
       def ChecaCant(self):
           Cant=self.CantCampo.text()
           validar = Cant.isdigit() 
           if Cant == "":
              self.CantCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.CantCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
              self.CantCampo.setStyleSheet("border: 2px solid green;")
              return True 
      
       def ChecaPeso(self):
           Peso=self.PesoCampo.text()
           validar = Peso.isdigit() 
           if Peso == "":
              self.PesoCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.PesoCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
              self.PesoCampo.setStyleSheet("border: 2px solid green;")
              return True
      
       def GuardarMovimiento(self):
           global CorrData,CorrCliente
           if len(CorrData) == 0 :
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("El cliente no tiene corrales asignados")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()
              return
           CantDeEsteMov=self.CantCampo.text()
           Peso=self.PesoCampo.text()
           TipoAnimal=DataTipoAnimales[self.TipoAnimalCBox.currentIndex()][0]
           
           if  CurrFolio == 0 :
                if self.ChecaCant() == False or self.ChecaPeso() == False or int(CantDeEsteMov) == 0 or Peso == 0 :
                    msg=QMessageBox()
                    msg.setWindowTitle("Informacion")
                    msg.setText("Datos Erroneos")
                    msg.setIcon(QMessageBox.Warning)
                    x=msg.exec_()
                    return
                if int(CantDeEsteMov) == 0 :
                    msg=QMessageBox()
                    msg.setWindowTitle("Informacion")
                    msg.setText("Numero de Animales igual a cero No se puede guardar")
                    msg.setIcon(QMessageBox.Warning)
                    x=msg.exec_()
                    return
           elif CurrFolio != 0 :
                if self.ChecaCant() == False or self.ChecaPeso() == False :
                    msg=QMessageBox()
                    msg.setWindowTitle("Informacion")
                    msg.setText("Datos Erroneos")
                    msg.setIcon(QMessageBox.Warning)
                    x=msg.exec_()
                    return
           
           Data=self.SelecCorral()
           Notas=self.Notas.toPlainText()
           idcliente=Data[2]
           idcorral=Data[0]
           Fecha=self.FechaMvtoSel.date()
           FechaMvto=Fecha.toString(Qt.ISODate)
           NoGuia=self.GuiaCampo.text()
           
           if self.RBotEntrada.isChecked() or self.RBotSalida.isChecked() :
                   if self.RBotEntrada.isChecked() : TMov=0 
                   elif self.RBotSalida.isChecked(): TMov=1
                   self.GrabaMovimiento(idcliente,idcorral,CantDeEsteMov,TMov,FechaMvto,Notas,Peso,NoGuia,TipoAnimal)
           else :
                TMov=2
                Corral=self.CorralDestCBox.currentText()
                IDCorralDest=IDCorralDeCorral(self,Corral)
                if IDCorralDest == idcorral:
                    msg=QMessageBox()
                    msg.setWindowTitle("Informacion")
                    msg.setText("Corral Origen y Destino Iguales")
                    msg.setIcon(QMessageBox.Warning)
                    x=msg.exec_()
                    return
                if Notas=="" :
                    Notas="Mov. Interno  "
                self.GrabaMovimiento(idcliente,idcorral,CantDeEsteMov,1,FechaMvto,Notas,Peso,NoGuia,TipoAnimal)
                self.GrabaMovimiento(idcliente,IDCorralDest,CantDeEsteMov,0,FechaMvto,Notas,Peso,NoGuia,TipoAnimal)
                      
       def GrabaMovimiento(self,idcliente,idcorral,CantDeEsteMov,TMov,FechaMvto,Notas,Peso,NoGuia,TipoAnimal):
               Datos=(idcliente,idcorral,CantDeEsteMov,TMov,FechaMvto,Notas,Peso,NoGuia,TipoAnimal)
               query="INSERT INTO tblMovimientoAnimales VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
               run_query2(self,query,Datos)
               MsgGrabReg(True)
               query="SELECT Folio FROM tblMovimientoAnimales ORDER BY Folio DESC LIMIT 1"
               UF=run_query(self,query) 
               UltimoFolio=int(UF[0][0])
               self.FolioValLbl.setText(str(UltimoFolio+1))
               self.Notas.clear()
               self.CantCampo.clear()
               self.PesoCampo.clear()

class EditaMovAnimales(QDialog):
    def __init__(self,Data):
           QDialog.__init__(self)
           PathPgm=os.getcwdb()
           path=os.path.join(str(PathPgm,'utf-8'),'GUIs','EditarMovAnimales.ui')
           uic.loadUi(path,self)
           self.PBCerrar=self.findChild(QPushButton,'PBCerrar')
           self.CorralCBox.activated.connect(self.JalaInfoCorrDest)
           self.CantCampo.textChanged.connect(self.ChecaCant)
           self.PesoCampo.textChanged.connect(self.ChecaPeso)
           self.PBGuardar.clicked.connect(self.GuardarMovimiento)
           self.PBCerrar.clicked.connect(self.close)
           now = QDateTime.currentDateTime().date()
           self.FechaMvtoSel.setDate(now)
           self.LlenaWin(Data)
           self.ChecaCant()
           self.ChecaPeso()
           self.JalaInfoCorrDest()
                      
    def LlenaWin(self,Data):
        global DataTipoAnimales, RegAEditar
        RegAEditar=Data
        self.FolioValLbl.setText(str(Data[0]))
        self.FechaLblVal.setText(str(Data[1]))
        if Data[4] == 0: TipoMov='Entrada'
        elif Data[4]== 1 : TipoMov='Salida'
        self.TipoMovLblVal.setText(TipoMov)
        self.CantActualLblVal.setText(str(Data[5])) 
        self.CantCampo.setText(str(Data[5]))
        #self.PesoCampo.setText()
        self.TipoMovLblVal.setText(TipoMov)
        self.ClienteLblVal.setText(str(Data[2])) 
        self.CorralLblVal.setText(str(Data[3])) 
        CorrData=JalaCorralesAsignados(self)
        self.CorralCBox.clear()
        for item,Corr in enumerate(CorrData):
           self.CorralCBox.addItem(Corr[1])
        query="SELECT * FROM  tblTipoAnimales"
        DataTipoAnimales=run_query(self,query)
        self.TipoAnimalCBox.clear()
        for item in DataTipoAnimales:
            j=str(item[1])
            self.TipoAnimalCBox.addItem(j)
        
    def JalaInfoCorrDest(self):
        global IDCorral,Corral,Cliente,IDCliente
        CorrData=JalaCorralesAsignados(self)
        idxcorral=self.CorralCBox.currentIndex()
        IDCorral=CorrData[idxcorral][0]
        Corral=CorrData[idxcorral][1]
        IDCliente=CorrData[idxcorral][2]
        Cliente=CorrData[idxcorral][3]
        self.CorralLblVal.setText(Corral)
        self.ClienteValLbl.setText(Cliente)
        # Fecha=self.FechaMvtoSel.date()
        # FechaMvto=Fecha.toString(Qt.ISODate)
        # CorralNoAnimalesAct=CantidadActualAnimales(self,IDCorral,FechaMvto)
        # self.CantActulaCorrDestLblVal.setText(str(CorralNoAnimalesAct))
    
    def ChecaCant(self):
        Cant=self.CantCampo.text()
        validar = Cant.isdigit() 
        if Cant == "":
            self.CantCampo.setStyleSheet("border: 2px solid yellow;")
            return False
        elif not validar:
            self.CantCampo.setStyleSheet("border: 2px solid red;")
            return False
        else:
            self.CantCampo.setStyleSheet("border: 2px solid green;")
            return True 
      
    def ChecaPeso(self):
        Peso=self.PesoCampo.text()
        validar = Peso.isdigit() 
        if Peso == "":
            self.PesoCampo.setStyleSheet("border: 2px solid yellow;")
            return False
        elif not validar:
            self.PesoCampo.setStyleSheet("border: 2px solid red;")
            return False
        else:
            self.PesoCampo.setStyleSheet("border: 2px solid green;")
            return True
    
    def GuardarMovimiento(self):
        CantDeEsteMov=self.CantCampo.text()
        Peso=self.PesoCampo.text()
        if self.ChecaCant() == False or self.ChecaPeso() == False :
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setText("Datos Erroneos")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_()
            return
        now = QDateTime.currentDateTime().date() 
        Hoy= now.toString(Qt.ISODate)
        Fecha=self.FechaMvtoSel.date()
        FechaMvto=Fecha.toString(Qt.ISODate)
        Notas=self.Notas.toPlainText()+"          Registro Editado  "+ Hoy
        NoGuia=self.GuiaCampo.text()
        if self.RBotEntrada.isChecked() : TMov=0 
        elif self.RBotSalida.isChecked(): TMov=1
        TipoAnimal=DataTipoAnimales[self.TipoAnimalCBox.currentIndex()][0]
        msg="Estas Seguro de Modificar Folio="+str(RegAEditar[0])
        res=QMessageBox.question(self,"Modificar Folio ??",msg,
                        QMessageBox.Yes | QMessageBox.No)
        if res==QMessageBox.No: 
            return
        Datos=(IDCliente,IDCorral,CantDeEsteMov,TMov,FechaMvto,Notas,Peso,NoGuia,TipoAnimal,RegAEditar[0])
        query = """UPDATE  tblMovimientoAnimales SET IDCliente= ?, IDCorral = ?, Cantidad = ?, IDMovimiento= ?, Fecha = ?, 
                Notas = ?, Peso= ?, NoGuia= ?, TipoAnimal= ?  WHERE Folio = ? """
        run_query2(self,query,Datos)
        MsgGrabReg(True)
        self.close()
       

class  EntSalMPrima(QDialog):
       def __init__(self,TipoMov):
           QDialog.__init__(self)
           self.ui=Ui_EntradasMPWin()
           self.ui.setupUi(self) 
           self.PBDer=self.findChild(QPushButton,'PBDer')
           self.PBIzq=self.findChild(QPushButton,'PBIzq')
           self.TipoMov=TipoMov
           now = QDateTime.currentDateTime().date()
           self.ui.FechaMov.setDate(now)
           self.ui.PBCerrar.clicked.connect(self.close)  
           self.ui.CantCampo.textChanged.connect(self.ChecaCant)
           self.ui.MPProdCBox.activated.connect(self.LeeMPCBox)
           self.ui.PBGuardar.clicked.connect(self.GuardarFolio) 
           self.ui.ManFolioCampo.setDisabled( True)
           #self.ui.FolioLbl.setText("Folio")
           self.CargaDatosEnWn()
            
       def CargaDatosEnWn(self):
           self.TraeFromDbClienProvee()
           self.TraeFrmDbAlmMP()
           self.LeeMPCBox()
           self.ui.TipoMovValLbl.setText("")
           if self.TipoMov==0 :
               self.ui.TipoMovValLbl.setText("ENTRADA ")
               self.ui.ClienProvLbl.setText("Proveedor: ")
           else :
               self.ui.TipoMovValLbl.setText("SALIDA ")
               self.ui.ClienProvLbl.setText("Cliente: ")
           self.ChecaCampoCant()
           
       def  TraeFromDbClienProvee(self):
            global Folio,DataClienProv
            if self.TipoMov==0 :
                query="SELECT ID,Nombre  FROM  tblProveedores"
            elif self.TipoMov==1 :
                query="SELECT ID,Nombre  FROM  tblClientes"
            DataClienProv=run_query(self,query)
            self.ui.ClienProvCBox.currentIndex()
            self.ui.ClienProvCBox.clear()
            for i in range(0,len(DataClienProv)):
                self.ui.ClienProvCBox.addItem(DataClienProv[i][1])
            Folio=UltimoFolMas1(self,"Folio", "tblMovimientosMP")
            self.ui.FolioValLbl.setText(str(Folio))

       def  TraeFrmDbAlmMP(self):
            global DataMP,DataAlmacenesMP, DataOperadores,DataPresentacion
            query="SELECT *  FROM  tblMateriaPrima"
            DataMP=run_query(self,query)           
            query="SELECT ID,Clave,Cliente  FROM  tblContenedoresMateriaPrima WHERE Estatus=1"
            DataAlmacenesMP=run_query(self,query) 
            self.ui.AlmacenCBox.clear()
            for i in range(0,len( DataAlmacenesMP)):
                self.ui.AlmacenCBox.addItem( DataAlmacenesMP[i][2])
            self.ui.MPProdCBox.clear()
            for i in range(0,len(DataMP)):
                self.ui.MPProdCBox.addItem( DataMP[i][2])
            query="SELECT *  FROM  tblOperadores"
            DataOperadores=run_query(self,query) 
            self.ui.PesadorCBox.clear()
            for i in range(0,len(DataOperadores)):
                self.ui.PesadorCBox.addItem( DataOperadores[i][1])   
            query="SELECT ID, Descripcion FROM  tblTipoPresentacion"
            DataPresentacion=run_query(self,query) 
            self.ui.PresentaCBox.clear()
            for i in range(0,len(DataPresentacion)):
                self.ui.PresentaCBox.addItem( DataPresentacion[i][1])   
       
       def  LeeMPCBox(self):
            global DataMP   
            ind=self.ui.MPProdCBox.currentIndex()
            self.ui.UdeMValLbl.setText(DataMP[ind][4])
        
       def ChecaCampoCant(self):
           Cant=self.ui.CantCampo.text()
           #num_format = re.compile(r'[+-]?([0-9]*[.])?[0-9]+')
           
           num_format = re.compile(r'^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$')
           validar = re.match(num_format,Cant)
           #validar = Cant.isdigit() 
           if Cant == "":
              self.ui.CantCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CantCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
              self.ui.CantCampo.setStyleSheet("border: 2px solid green;")
              return True     
         
       def ChecaCant(self):
           Cant=self.ui.CantCampo.text()
           #  Checa que sean datos positivos
           num_format = re.compile(r'[+-]?([0-9]*[.])?[0-9]+')
           it_is = re.match(num_format,Cant)
           if Cant == "":
              self.ui.CantCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not it_is:
              self.ui.CantCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
              self.ui.CantCampo.setStyleSheet("border: 2px solid green;")
              return True     
           

       def GuardarFolio(self):
           global Folio, DataClienProv
           Costo=ChecaDatNumNoNeg(self,self.ui.CostoCampo.text())
           Flete=ChecaDatNumNoNeg(self,self.ui.FleteCampo.text())
           Maniobra=ChecaDatNumNoNeg(self,self.ui.ManiobraCampo.text())
           #Folio=ChecaDatNumNoNeg(self,self.ui.ManFolioCampo.text())
           Cantidad=ChecaDatNumNoNeg(self,self.ui.CantCampo.text())
           if Costo*Flete*Maniobra*Cantidad < 0  :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Error en Datos ")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_() 
               return
           GlbIndi=GeneraGlobalMovIndice(self)
           f_mov=self.ui.FechaMov.date()
           Fecha=f_mov.toString(Qt.ISODate)
           IDClieProve=DataClienProv[self.ui.ClienProvCBox.currentIndex()][0]
           IxAlmacen=self.ui.AlmacenCBox.currentIndex()
           IDAlmacen=DataAlmacenesMP[IxAlmacen][0]
           IDMP=DataMP[self.ui.MPProdCBox.currentIndex()][0]
           IDPresenta= DataPresentacion[self.ui.PresentaCBox.currentIndex()][0]
           IxPesador=self.ui.PesadorCBox.currentIndex()
           IDPesador=DataOperadores[IxPesador][0]
           Camion=self.ui.CamionCampo.text()
           Chofer=self.ui.ChoferCampo.text()
           Placas=self.ui.PlacasCampo.text()
           Refe=0
           Nota=self.ui.NotasCampo.toPlainText()
           #GlbIndi=GeneraGlobalMovIndice(self)
           Datos=(Folio,Fecha,0,IDClieProve,IDAlmacen,IDMP,Cantidad,IDPresenta,0,Nota,GlbIndi)
           query="INSERT INTO tblMovimientosMP VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
           run_query2(self,query,Datos)
        #    Datos=(Folio,IDPesador,Costo,Flete,Maniobra,Camion,Chofer,Placas)
        #    query="INSERT INTO tblOtrosDatMovMP VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
        #    run_query2(self,query,Datos)
           MsgGrabReg(True)
           Folio=UltimoFolMas1(self,"Folio", "tblMovimientosMP")
           self.ui.FolioValLbl.setText(str(Folio))
           self.ui.CantCampo.clear()
           self.ui.CantCampo.setFocus()
           self.ui.CamionCampo.clear()
           self.ui.ChoferCampo.clear()
           self.ui.PlacasCampo.clear()
           self.ui.NotasCampo.clear()


class  EdicionMovsMPyProd(QDialog):
    # Tipo  1= Entrada MP, 2 Salida MP 3= Entrada Prod  4=Salida Prod
    def __init__(self,Tipo):
        QDialog.__init__(self)
        PathPgm=os.getcwdb()
        path=os.path.join(str(PathPgm,'utf-8'),'GUIs','EdicionMovMPyProd.ui')
        uic.loadUi(path,self)
        self.Tabla.setColumnWidth(0,0)
        self.Tabla.setColumnWidth(1,80)
        self.Tabla.setColumnWidth(2,100)
        self.Tabla.setColumnWidth(3,120)
        self.Tabla.setColumnWidth(4,80)
        self.Tabla.setColumnWidth(5,80)
        self.Tabla.setColumnWidth(6,200)
        self.Tabla.setColumnWidth(7,300)
        global TipoMat
        if Tipo == 1 or Tipo == 2:
            self.setWindowTitle("Edicion Movimiento de MP")
            TipoMat= "MP"
        elif Tipo == 3 or Tipo ==4:
            TipoMat= "Prod"
            self.setWindowTitle("Edicion Movimiento de Producto")
        self.PBCerrar=self.findChild(QPushButton,'PBCerrar')
        self.PBEnter=self.findChild(QPushButton,'PBEnter')
        self.PBBorrar=self.findChild(QPushButton,'PBBorrar')
        self.Tabla=self.findChild(QTableWidget,'Tabla')
        self.PBCerrar.clicked.connect(self.close)
        self.PBEnter.clicked.connect(self.JalaMovi)
        self.PBBorrar.clicked.connect(self.Borrar)

    def JalaMovi(self):
        global TipoMat
        Folio=self.NoFolioCampo.text()
    #  Si es MP valida a traves de la referencia que sea movimiento Nativo no derivado del desglose de producto
        if TipoMat == 'MP' :
            query= """  SELECT tblMovimientosMP.ID,Folio,FechaMov,tblMateriaPrima.Descripcion,tblTipoMov.Descripcion,Cantidad,
                            tblContenedoresMateriaPrima.Cliente,tblMovimientosMP.Notas
                        FROM tblMovimientosMP
                        INNER JOIN tblTipoMov ON tblTipoMov.ID == tblMovimientosMP.TipoMov
                        INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblMovimientosMP.IDMP
                        INNER JOIN tblContenedoresMateriaPrima ON tblContenedoresMateriaPrima.ID = tblMovimientosMP.IDAlmacen
                        WHERE Folio =  ? AND Referencia = 0 """
        elif TipoMat == 'Prod':
            query = """  SELECT tblProductoMovimientos.ID,Folio,Fecha,tblProductos.Descripcion,tblTipoMov.Descripcion,Cantidad,
                                tblContenedoresProducto.Proveedor,tblProductoMovimientos.Notas ,tblProductoMovimientos.GlbMovInd
                        FROM tblProductoMovimientos
                        INNER JOIN tblProductos ON tblProductos.ID = tblProductoMovimientos.IDProd
                        INNER JOIN tblTipoMov ON tblTipoMov.ID == tblProductoMovimientos.TipoMov
                        INNER JOIN tblContenedoresProducto ON tblContenedoresProducto.ID = tblProductoMovimientos.IDAlmacen
                        WHERE Folio =  ? ; """

        Data=run_query2(self,query,(Folio,))
        self.Tabla.setRowCount(0)
        if len(Data) == 0:
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setText("No existe el Movimiento o no es valido ")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_() 
            return
        for ren,Ren in enumerate(Data):
            self.Tabla.insertRow(ren)
            for col,ColData in enumerate(Ren):
                self.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(ColData)))
        return Data
    
    def Borrar(self):
        FolData=self.JalaMovi()
        if FolData[0][5] == 0:
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setText("El Movimiento ya esta cancelado o la Cantidad es cero ")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_() 
            return
            
        fecha = QDateTime.currentDateTime().date()
        fechaNow=fecha.toString(Qt.ISODate)
        msg="Estas Seguro de Modificar Folio="+str(FolData[0][1])
        res=QMessageBox.question(self,"Modificar Folio ??",msg,
                        QMessageBox.Yes | QMessageBox.No)
        if res==QMessageBox.No: 
            return
        Datos=(0,'Movimiento Cancelado el dia '+ fechaNow,FolData[0][0])
        if TipoMat == 'MP':
            query = """UPDATE  tblMovimientosMP SET Cantidad= ?, Notas = ?  WHERE ID = ? """
            run_query2(self,query,Datos)
        elif TipoMat == 'Prod':
            query= """UPDATE  tblProductoMovimientos SET Cantidad= ?, Notas = ?  WHERE ID = ? """
            run_query2(self,query,Datos)
            query= """UPDATE  tblMovimientosMP  SET Cantidad= ?, Notas = ?  WHERE GlbMovInd = ? """
            data=(0,'Mov. Fol= '+ str(FolData[0][0]) +'Desglose Cancelado el dia '+ fechaNow,FolData[0][8])
            run_query2(self,query,data)

        self.NoFolioCampo.clear()
        self.Tabla.setRowCount(0)
        MsgGrabReg(True)


class  SalidasPorBas(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           self.ui=Ui_UISalidasPorBas()
           self.ui.setupUi(self) 
           now = QDateTime.currentDateTime().date()
           self.ui.FechaMov.setDate(now)    
           self.ui.PBCerrar.clicked.connect(self.close)  
           self.ui.CantCampo.textChanged.connect(self.ChecaCampoCant)
           self.ui.MPProdCBox.activated.connect(self.LeeMPProdCBox)
           self.ui.TipoSalCBox.activated.connect(self.LeeTSCBox)
           self.ui.PBGuardar.clicked.connect(self.GuardarFolio)
           self.ui.FolioLbl.setText("Folio:") 
           self.ui.ManFolioLbl.setText("FolioBas:")
           self.TraeFrmDb()
           self.ChecaCampoCant()
           self.LeeTSCBox()
           global Lista,ListaToDb
           ListaToDb=[]
           Lista=[]
           #self.ui.CantCampo.clear()
           #self.ui.CantCampo.setFocus()
                  
       def   TraeFromDbClienProvee(self):
            global Folio,DataProveedor,DataCliente
            query= "SELECT ID,Nombre FROM tblClientes  "
            DataCliente=run_query(self,query)
            Folio=UltimoFolMas1(self,"Folio", "tblProductoMovimientos")
            self.ui.FolioValLbl.setText(str(Folio))
        
       def  TraeFrmDb(self):
            global  DataOperadores,ID
            global Folio,DataCliente,DataPresentacion, DataTipoMaterial
            query= "SELECT ID,Nombre FROM tblClientes  "
            DataCliente=run_query(self,query)
            self.ui.ClienProvCBox.clear()
            for i in range(0,len(DataCliente)):
                self.ui.ClienProvCBox.addItem(DataCliente[i][1])
            query="SELECT *  FROM  tblTipoMaterial"
            DataTipoMaterial=run_query(self,query) 
            self.ui.TipoSalCBox.clear()
            for i in range(0,len(DataTipoMaterial)):
                self.ui.TipoSalCBox.addItem( DataTipoMaterial[i][1])  
            query="SELECT *  FROM  tblOperadores"
            DataOperadores=run_query(self,query) 
            self.ui.PesadorCBox.clear()
            for i in range(0,len(DataOperadores)):
                self.ui.PesadorCBox.addItem( DataOperadores[i][1])   
            query="SELECT *  FROM  tblTipoPresentacion WHERE Visible=1 "
            DataPresentacion=run_query(self,query) 
            self.ui.PresentacionCBox.clear()
            for i in range(0,len(DataPresentacion)):
                self.ui.PresentacionCBox.addItem( DataPresentacion[i][1]) 
            Folio=UltimoFolMas1(self,"Folio", "tblProductoMovimientos")
            self.ui.FolioValLbl.setText(str(Folio))
      
       def LeeTSCBox(self):
           global TipoMat,DataMat,DataAlmacen,DbTabla,Referencia
           TipoMat= DataTipoMaterial[self.ui.TipoSalCBox.currentIndex()][0]
           self.ui.MPProdCBox.clear()
           self.ui.AlmacenCBox.clear()
           #  Tipos de Salida    1= Sale Producto    2=  sale Materia Prima
           if TipoMat == 1:
               query1="SELECT ID, Descripcion,UdeM  FROM  tblProductos WHERE IDTipoStatus='Activo'"
               query2="SELECT ID,Clave,Proveedor  FROM  tblContenedoresProducto WHERE Estatus=1"
               DbTabla="tblProductoMovimientos"
               Folio=UltimoFolMas1(self,"Folio", "tblProductoMovimientos")
               Referencia=Folio
           elif TipoMat == 2:
               query1="SELECT ID, Descripcion, IDUnidadMedida   FROM  tblMateriaPrima WHERE IDTipoStatus='Activo'"
               query2="SELECT ID,Clave,Cliente  FROM  tblContenedoresMateriaPrima WHERE Estatus=1"
               DbTabla="tblMovimientosMP"
               Folio=UltimoFolMas1(self,"Folio", "tblMovimientosMP")
               Referencia=0
           DataMat=run_query(self,query1)   
           for i in range(0,len(DataMat)):
               self.ui.MPProdCBox.addItem(DataMat[i][1])
           DataAlmacen=run_query(self,query2)
           for i in range(0,len(DataAlmacen)):
               self.ui.AlmacenCBox.addItem(DataAlmacen[i][2])
           self.ui.FolioValLbl.setText(str(Folio))

       def  LeeMPProdCBox(self):
           ind=self.ui.MPProdCBox.currentIndex()
           self.ui.UdeMValLbl.setText(DataMat[ind][2])
                  
       def ChecaCampoCant(self):
           Cant=self.ui.CantCampo.text()
           validar = Cant.isdigit() 
           if Cant == "":
              self.ui.CantCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CantCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
              self.ui.CantCampo.setStyleSheet("border: 2px solid green;")
              return True     
              
       def GuardarFolio(self):
           global Folio,Referencia
           self.ui.TipoSalCBox.currentIndex()
           if self.ChecaCampoCant() == False :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Error en Datos ")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_() 
               return
           if TipoMat ==1:
               if  ChecaSiProdTieneReceta(self,DataMat[self.ui.MPProdCBox.currentIndex()][0]) == False:
                    msg=QMessageBox()
                    msg.setWindowTitle("Informacion")
                    msg.setText("Error No Hay Receta para este Producto Captura receta primero")
                    msg.setIcon(QMessageBox.Warning)
                    x=msg.exec_() 
                    return
           #Folio=self.ui.ManFolioCampo.text()
           f_mov=self.ui.FechaMov.date()
           Fecha=f_mov.toString(Qt.ISODate)
           IDPresentacion=DataPresentacion[self.ui.PresentacionCBox.currentIndex()][0]
           Datos=(Folio,Fecha,TipoMat,DbTabla)
           GlbIndi=GeneraGlobalMovIndice(self)
           IDCliente=DataCliente[self.ui.ClienProvCBox.currentIndex()][0]
           IDAlmacen=DataAlmacen[self.ui.AlmacenCBox.currentIndex()][0]
           DescAlmacen=DataAlmacen[self.ui.AlmacenCBox.currentIndex()][2]
           IDMaterial=DataMat[self.ui.MPProdCBox.currentIndex()][0]
           DescMaterial=DataMat[self.ui.MPProdCBox.currentIndex()][1]
           Cant=int(self.ui.CantCampo.text())
           Nota=self.ui.NotasCampo.toPlainText()
           #ID=UltimoFolMas1(self,"ID", "tblSalidas")-1
           GuardaMovMP_Prod(self,TipoMat,Fecha,1,IDCliente,IDAlmacen,IDMaterial,Cant,IDPresentacion,Referencia,Nota,GlbIndi,1)
           if TipoMat == 1:
               #Hace el cruce de para identificar el almacen de MP para cargar el desglose , entre los almacenes de RA y Julian y Valmo
               if IDAlmacen == 1 :
                   IDAlmaMP=4
               elif IDAlmacen == 2:
                   IDAlmaMP=5
               else :
                   IDAlmaMP=3
               HaceCargoEnAlmaMP_X_SalProd(self,Fecha,IDMaterial,1,IDCliente,IDAlmaMP,Cant,IDPresentacion,Referencia,GlbIndi)
           MsgGrabReg(True)
           self.LeeTSCBox()           
           self.ui.CantCampo.clear()
           self.ui.CantCampo.setFocus()
           self.ui.CamionCampo.clear()
           self.ui.ChoferCampo.clear()
           self.ui.PlacasCampo.clear()
           self.ui.NotasCampo.clear()
         
#   Si es Salida  Carga el desglose de la  MP  en el inventario de MP 
#           
           #res= HaceCargoEnAlmaMP_X_SalProd(self,IDProd,Fecha,TipoMov,ClaveAlmacen,Cant,IDClieProve,IDPesador,0)
class  InventarioInicialMPyProd(QDialog):
       def __init__(self,EoS):
           QDialog.__init__(self)
           self.ui=Ui_InventarioInicialesMP()
           self.ui.setupUi(self) 
           now = QDateTime.currentDateTime().date()
           self.ui.FechaWidget.setDate(now)
           global TipoMov
           TipoMov=EoS
           if TipoMov==1 :
               self.wt="Inventario Incial de Productos" 
               self.setWindowTitle(self.wt)
               self.ui.MPProdLbl.setText("Producto:")  
           self.ui.PBCerrar.clicked.connect(self.close)  
           self.ui.CantidadCampo.textChanged.connect(self.ChecaCampoCant)
           self.ui.MPProdCBox.activated.connect(self.LeeCBox)
           self.ui.AlmacenCBox.activated.connect(self.LeeCBox)
           self.ui.PBAceptar.clicked.connect(self.Agregar) 
           self.LlenaCBox()
           self.LlenaAlmacenCBox()
           self.LeeCBox()
           now = QDateTime.currentDateTime().date()
           self.ui.FechaWidget.setDate(now)
           
       def LlenaCBox(self):
           global DataMP,DataProd
           if TipoMov==1 :
               query="SELECT ID,Descripcion  FROM  tblProductos"
               DataProd=run_query(self,query) 
               data=DataProd
           elif TipoMov==0 :
               query="SELECT ID,Descripcion  FROM  tblMateriaPrima"
               DataMP=run_query(self,query) 
               data=DataMP
           self.ui.MPProdCBox.clear()
           for i in range(0,len(data)):
               self.ui.MPProdCBox.addItem( data[i][1])
       
       def LlenaAlmacenCBox(self):
           global AlmacenData
           if TipoMov==0 :
               query="SELECT ID,Cliente FROM tblContenedoresMateriaPrima "
           elif TipoMov==1:
               query="SELECT ID,Proveedor FROM tblContenedoresProducto "
           AlmacenData=run_query(self,query)
           self.ui.AlmacenCBox.clear()
           for item in AlmacenData :
               j=str(item[1])
               self.ui.AlmacenCBox.addItem(j) 
           self.ui.AlmacenCBox.setCurrentIndex(0)
       
       def LeeCBox(self):
           if TipoMov==0 :
               query="SELECT ID,Cliente FROM tblContenedoresMateriaPrima "
               AlmacenData=run_query(self,query)
               Almacen=AlmacenData[self.ui.AlmacenCBox.currentIndex()][0]
               IDMP=DataMP[self.ui.MPProdCBox.currentIndex()][0] 
               query= "SELECT * FROM tblInventarioInicialesMP WHERE  IDMP= ? AND IDContenedor= ? ORDER BY  ID DESC"    
               Data=run_query2(self,query,(IDMP,Almacen)) 
           elif TipoMov == 1 :
               query="SELECT ID, Proveedor FROM tblContenedoresProducto "
               AlmacenData=run_query(self,query)
               Almacen=AlmacenData[self.ui.AlmacenCBox.currentIndex()][0]
               IDProd=DataProd[self.ui.MPProdCBox.currentIndex()][0] 
               query= "SELECT * FROM tblInventarioInicialesProductos WHERE  IDProducto= ? AND IDContenedor= ? ORDER BY  ID DESC"    
               Data=run_query2(self,query,(IDProd,Almacen)) 
           if len(Data) > 0 :
               self.ui.FechaUltValLbl.setText(Data[0][1])
           else :
               self.ui.FechaUltValLbl.setText("Sin Datos")
          
       
       def ChecaCampoCant(self):
           Cant=self.ui.CantidadCampo.text()
           num_format = re.compile(r'^\-?[1-9][0-9]*$')
           it_is = re.match(num_format,Cant)
           if Cant == "":
              self.ui.CantidadCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif it_is:
              self.ui.CantidadCampo.setStyleSheet("border: 2px solid green;")
              return True
           else:
              self.ui.CantidadCampo.setStyleSheet("border: 2px solid red;")
              return False 
        
       def Agregar(self):
           Fecha=self.ui.FechaWidget.date()
           Fecha=Fecha.toString(Qt.ISODate)
           ind=self.ui.MPProdCBox.currentIndex()
           IDContenedor=AlmacenData[self.ui.AlmacenCBox.currentIndex()][0]
           valida=self.ChecaCampoCant()
           #currdate="20"+tm.strftime('%y-%m-%d')
           Nota=self.ui.NotasCampo.toPlainText()
           if valida== True :  
               cant=self.ui.CantidadCampo.text()
           else :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Cantidad Invalida")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_() 
               return
           if TipoMov==0 :
               ID=DataMP[ind][0] 
               query="INSERT INTO tblInventarioInicialesMP VALUES(NULL, ?, ?, ?, ?, ?)"
              
           else :
               ID=DataProd[ind][0]
               query="INSERT INTO tblInventarioInicialesProductos VALUES(NULL, ?, ?, ?, ?, ?)" 
           DataToDB=(Fecha,ID,IDContenedor,cant,Nota)
           run_query(self,query,DataToDB)
           self.ui.CantidadCampo.clear()
           self.ui.NotasCampo.clear()
           self.LeeCBox()

class ListaInvenInicMP(QDialog):
        def __init__(self):
           QDialog.__init__(self)
           self.ui=Ui_ListaUltimoInvMP()
           self.ui.setupUi(self) 
           self.ui.Tabla.setColumnWidth(0,200)
           self.ui.Tabla.setColumnWidth(1,150)
           self.ui.Tabla.setColumnWidth(2,120)
           now = QDateTime.currentDateTime().date()
           self.ui.PBCerrar.clicked.connect(self.close) 
           self.ui.PBImprimir.clicked.connect(self.Imprimir) 
           self.LlenaTabla()


        def LlenaTabla(self):
            query= """  SELECT  tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion,MAX(tblInventarioInicialesMP.Fecha),tblInventarioInicialesMP.Cantidad 
                        FROM tblInventarioInicialesMP
                        INNER JOIN tblContenedoresMateriaPrima ON  tblContenedoresMateriaPrima.ID = tblInventarioInicialesMP.IDContenedor
                        INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblInventarioInicialesMP.IDMP
                        WHERE tblInventarioInicialesMP.IDContenedor=3
                        GROUP BY tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion
                        UNION
                        SELECT  tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion,MAX(tblInventarioInicialesMP.Fecha),tblInventarioInicialesMP.Cantidad 
                        FROM tblInventarioInicialesMP
                        INNER JOIN tblContenedoresMateriaPrima ON  tblContenedoresMateriaPrima.ID = tblInventarioInicialesMP.IDContenedor
                        INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblInventarioInicialesMP.IDMP
                        WHERE tblInventarioInicialesMP.IDContenedor=4
                        GROUP BY tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion
                        UNION
                        SELECT  tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion,MAX(tblInventarioInicialesMP.Fecha),tblInventarioInicialesMP.Cantidad 
                        FROM tblInventarioInicialesMP
                        INNER JOIN tblContenedoresMateriaPrima ON  tblContenedoresMateriaPrima.ID = tblInventarioInicialesMP.IDContenedor
                        INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblInventarioInicialesMP.IDMP
                        WHERE tblInventarioInicialesMP.IDContenedor=5
                        GROUP BY tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion

                   """
            Datos=run_query(self,query)
            self.ui.Tabla.setRowCount(0)
            for ren,RenData in enumerate(Datos):
                self.ui.Tabla.insertRow(ren)
                for col,item in enumerate(RenData):
                    if col ==3 :
                        item='{:,}'.format(item)
                    self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(item)))



        def Imprimir(self):
            pass

def CargaDesgloseMPsDeServidos(self,IDOrden,NoOrden,IDProd,GlbIndi):
           #  Obtener Fecha Minima de Folios de Surtido
           query= """   SELECT  MIN(tblDetalleOrdenSurtido.Fecha) AS FECHA_MIN
                        FROM  tblDetalleOrdenSurtido
                        WHERE tblDetalleOrdenSurtido.IDOrden = ?
                    """
           FechaSer=run_query2(self,query,(IDOrden,))[0][0]
           TotalO=TotalOrden(self,IDOrden)
           pmRA=TotalServClienteEnOrden(self,IDOrden,3)
           TotalRamonA= pmRA[0]
           pmJ=TotalServClienteEnOrden(self,IDOrden,4)
           TotalJulian=pmJ[0]
           if TotalO == None :
               TotalO=0
               return
           if TotalRamonA == None :
               TotalRamonA=0
           if TotalJulian == None :
               TotalJulian=0
           TotalValmo=TotalO-TotalRamonA-TotalJulian 
           if TotalRamonA > 0 :
               GuardaMovMP_Prod(self,1,FechaSer,1,3,1,IDProd,TotalRamonA,2,NoOrden,"",GlbIndi,0)
               HaceCargoEnAlmaMP_X_SalProd(self,FechaSer,IDProd,1,3,4,TotalRamonA,2,NoOrden,GlbIndi)
           if TotalJulian > 0 :
               GuardaMovMP_Prod(self,1,FechaSer,1,4,2,IDProd,TotalJulian,2,NoOrden,"",GlbIndi,0)
               HaceCargoEnAlmaMP_X_SalProd(self,FechaSer,IDProd,1,4,5,TotalJulian,2,NoOrden,GlbIndi)
           if TotalValmo > 0:
               query= """   SELECT  tblDetalleOrdenSurtido.IDCliente, SUM( tblDetalleOrdenSurtido.CantSurtida)
                            FROM  tblDetalleOrdenSurtido
                            WHERE tblDetalleOrdenSurtido.IDOrden = ? AND tblDetalleOrdenSurtido.IDCliente <> 3  AND tblDetalleOrdenSurtido.IDCliente <> 4
                            GROUP BY IDCliente
                      """
               TotalesClienValmoEnOSur=run_query(self,query,(IDOrden,)) 
               for ren in range(0,len(TotalesClienValmoEnOSur)):
                   GuardaMovMP_Prod(self,1,FechaSer,1,TotalesClienValmoEnOSur[ren][0],3,IDProd,TotalesClienValmoEnOSur[ren][1],2,NoOrden,"",GlbIndi,0)
               HaceCargoEnAlmaMP_X_SalProd(self,FechaSer,IDProd,1,48,3,TotalValmo,2,NoOrden,GlbIndi)
          








