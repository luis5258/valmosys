# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TipoAnimal.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import sys,re
import time as tm
import sqlite3
import openpyxl 


def DesglosaIngredientes(self,IDProd,Cant):
        data=(IDProd,)
        query="SELECT IDMateriaPrima,Porcentaje  FROM tblProductosMateriaPrima  WHERE IDProd= ?"
        DatosIngEnProd=run_query2(self,query,data)
        ListaTemp=[]
        DatosSal=[]
        for ren in range(0,len(DatosIngEnProd)):
            ListaTemp.append(DatosIngEnProd[ren][0])
            DataPropor=float(DatosIngEnProd[ren][1])
            if DatosIngEnProd[ren][1] == None:
                DataPropor=0
            t= DataPropor* Cant/100
            ListaTemp.append(t)
            DatosSal.append(ListaTemp)
            ListaTemp=[]
        return DatosSal


def DesglosaMermas(self,IDProd,Cant):
        data=(IDProd,)
        query="SELECT IDMateriaPrima,Porcentaje, PorMerma  FROM tblProductosMateriaPrima  WHERE IDProd= ?"
        DatosIngEnProd=run_query2(self,query,data)
        ListaTemp=[]
        DatosSal=[]
        for ren in range(0,len(DatosIngEnProd)):
            ListaTemp.append(DatosIngEnProd[ren][0])
            DataPropor=float(DatosIngEnProd[ren][1])
            Merma=float(DatosIngEnProd[ren][2])
            if DatosIngEnProd[ren][1] == None:
                DataPropor=0
            if DatosIngEnProd[ren][2] == None:
                Merma=0
            t= DataPropor * Merma * Cant/10000
            ListaTemp.append(t)
            DatosSal.append(ListaTemp)
            ListaTemp=[]
        return DatosSal



def ChecaDatNum(self,ran1,ran2,dat):

        if dat == "" or dat == ".":
            return 2
        validar = re.match('^[0-9,.\sáéíóúàèìòùäëïöüñ]+$', dat,re.I)
        if validar == None:
            return 0
        else :
            SalDat=float(dat)
            validar =  SalDat > ran1   and  SalDat <= ran2 
            if validar == False:
                return 0.1
            elif validar == True:
                return 1

def ChecaDatNumNoNeg(self,dat):
    num_format = re.compile(r'^[1-9][0-9]*$')
    it_is = re.match(num_format,dat)
    if dat == "": return 0
    elif it_is: return int(dat)
    else : return -1

def ValidaIntOrFloat(self,Data):
    try:
        int(Data) or float(Data)
        return True
    except:
        return False
                          
def JalaMPsEnCatAlamcen(self,IDAlmaMP):
        ListaTemp=[]
        query=  """ SELECT DISTINCT IDMP
                    FROM tblMovimientosMP
                    WHERE IDAlmacen= ?
                    """  
        MPsEnAlmacen=run_query2(self,query,(IDAlmaMP,))
        for k in range(0,len(MPsEnAlmacen)):
            ListaTemp.append(MPsEnAlmacen[k][0])
        return list(MPsEnAlmacen)

def ChecaIngEnAlmaMP(self,IDProd,IDAlmaMP):
    NoAciertos=0
    query= """ SELECT IDMateriaPrima FROM tblProductosMateriaPrima WHERE IDProducto= ? """
    Ing=run_query2(self,query,(IDProd,))
    query= """ SELECT  """
    for i in range(0,len(ListaBus)):
        for j in range(0,len(ListaBase)):
            if ListaBus[i] == ListaBase[j]:
                NoAciertos+1
                break
def UltimoFolMas1(self,Col, Tabla):
    query="SELECT "+Col+ " FROM " + Tabla + " ORDER BY " + Col +"  DESC LIMIT 1"
    UF=run_query(self,query) 
    if len(UF)== 0 :
        UltimoFolio=0
    else :
        UltimoFolio=int(UF[0][0])        
    return UltimoFolio+1
    
def CliConAlmMP(self):
    Lista=[]
    query= "SELECT IDCliente, Clave FROM tblContenedoresMateriaPrima"
    data=run_query(self,query)
    for i in range(0,len(data)):
        if data[i][1] != 'valmo':
            Lista.append(data)
    return data
    
def CheckRButtons(self):
    status=""
    if self.ui.RBotAlta.isChecked() :
            status="Activo"
    elif self.ui.RBotBaja.isChecked() :
            status="Baja"
    return status

def CheckRButtonsSirve(self):
    status=""
    if self.ui.RBotSi.isChecked() :
            status="Si"
    elif self.ui.RBotNo.isChecked() :
            status="No"
    return status

def run_query(self, query, parameters = ()):
        result=[]
        try:
            conn=sqlite3.connect("valmodb.db") 
            cursor = conn.cursor()
            cursor.execute(query, parameters)
            result=cursor.fetchall()
            conn.commit()
            if len(parameters) > 0 :
                #self.ui.MessageLbl.setText("Registro Guardado")
                MsgGrabReg(True)
            return result
        except  sqlite3.IntegrityError:
               #self.ui.MessageLbl.setText("Ya Existe registro")
               MsgGrabReg(False)
        """except sqlite3.OperationalError :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("No se econtro tablas en  DB")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_() 
               exit()
        """
def run_query2(self, query, parameters = ()):
        conn=sqlite3.connect("valmodb.db") 
        cursor = conn.cursor()
        cursor.execute(query, parameters)
        result=cursor.fetchall()
        conn.commit()
        return result

def run_query1(self, query, parameters = ()):
        result=[]
        try:
            conn=sqlite3.connect("valmodb.db") 
            cursor = conn.cursor()
            cursor.execute(query, parameters)
            result=cursor.fetchone()
            conn.commit()
            MsgGrabReg(True)
            return result
        except  sqlite3.IntegrityError:
               #self.ui.MessageLbl.setText("Ya Existe registro")
               MsgGrabReg(False)

def run_query1SinMsg(self, query, parameters = ()):
        result=[]
        try:
            conn=sqlite3.connect("valmodb.db") 
            cursor = conn.cursor()
            cursor.execute(query, parameters)
            result=cursor.fetchone()
            conn.commit()
            return result
        except  sqlite3.IntegrityError:
            MsgGrabReg(False)

def run_queryMany(self, query):
        conn=sqlite3.connect("valmodb.db") 
        cursor = conn.cursor()
        cursor.executemany(query)
        result=cursor.fetchall()
        conn.commit()
        return result

def TraerDatosFrDb(self,query,LastCol):
    query=query
    Datos=run_query(self,query)
    if  Datos != None :
        self.ui.Tabla.setRowCount(0)
        row=0
        for item in Datos :
            self.ui.Tabla.insertRow(row)
            for col in range(1,LastCol):
              self.ui.Tabla.setItem(row, col-1, QtWidgets.QTableWidgetItem(str(item[col]))) 
            row=row+1  
        return Datos
    else :
        print("No se leyeron Datos")

def TraeRenglonTabla(self):
    CC=self.ui.Tabla.columnCount()
    CuRo=self.ui.Tabla.currentRow()
    if CuRo < 0 :
        CuRo=0
        return
    tu=[]
    for col in range(0,CC):
        i=self.ui.Tabla.item(CuRo,col)
        if i != None :
           tu.append(str(i.text()))
    return tu

def MsgGrabReg(st):
    msg=QMessageBox()
    msg.setWindowTitle("Informacion")
    if st==True :
        msg.setText("Registro Guardado exitosamente")
    else :
        msg.setText("Registro No Guardado Ya existe uno igual")
        msg.setIcon(QMessageBox.Warning)
    x=msg.exec_()

def MesageBox(msg):
    msg=QMessageBox()
    msg.setWindowTitle("Informacion")
    msg.setText(msg)
    msg.setIcon(QMessageBox.Warning)
    x=msg.exec_()

def TraeIndiceDeRow (self,tabla,Clave):
    clave=Clave
    query="SELECT * FROM "+ tabla +" WHERE Clave="+"'"+clave+"'"
    co=sqlite3.connect("valmodb.db") 
    j = co.cursor()
    j.execute(query)
    r= j.fetchone()
    return r[0]

def MsgSelUnRnglon(self):
     msg=QMessageBox()
     msg.setWindowTitle("Informacion")
     msg.setText("Selecciona un renglon")
     msg.setIcon(QMessageBox.Warning)
     x=msg.exec_()

def DataTableToExcel(self,FileName,HojaNamesList,DataTables = []):
    if len(DataTables) == 0:
        msg=QMessageBox()
        msg.setWindowTitle("Informacion")
        msg.setIcon(QMessageBox.Warning)
        msg.setText("No hay Info que grabar")
        x=msg.exec_()
        return
    #  Crea Hoja Nueva
    EXCELFILENAME=FileName+".xlsx"
    wb = openpyxl.Workbook()
    if len(HojaNamesList) != len(DataTables): 
        msg=QMessageBox()
        msg.setWindowTitle("Informacion")
        msg.setIcon(QMessageBox.Warning)
        msg.setText("Numero de tablas y Hojas distinto")
        x=msg.exec_()
        return
    # Se crean las Hojas del Libro Excel
    for ren in range(0,len(HojaNamesList)):
        HojaNamesList[ren]=wb.create_sheet(HojaNamesList[ren])
    
    #  Se llenan las Hojas
    for Table in range (0,len(DataTables)):
        if DataTables[Table] == None:
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setIcon(QMessageBox.Warning)
            msg.setText("No hay Info que grabar")
            x=msg.exec_()
            return
        TableTemp=DataTables[Table]
        NumCol=len(TableTemp[0])
        for ren in range(0,len(DataTables[Table])):
            for col in range(0,NumCol):
                _=HojaNamesList[Table].cell(row=ren+1, column=col+1, value=TableTemp[ren][col] )
    msg=QMessageBox()
    msg.setWindowTitle("Informacion")
    msg.setIcon(QMessageBox.Warning)
    try :
        wb.save(filename=EXCELFILENAME)
        msg.setText("Archivo Excel Grabado Exitosamente")
        x=msg.exec_()
    except PermissionError:
        msg.setText("No se puede grabar info archivo excel ocupado")
        x=msg.exec_()
        return
    except FileNotFoundError:
        msg.setText("No se puede grabar Inserta USB ")
        x=msg.exec_()


#  Guarda una sola worksheet
def GuardaTableToExcel(self,FileName,HojaName,DataTable):
    if len(DataTable) == 0:
        msg=QMessageBox()
        msg.setWindowTitle("Informacion")
        msg.setIcon(QMessageBox.Warning)
        msg.setText("No hay Info que grabar")
        x=msg.exec_()
        return
    #  Crea Hoja Nueva
    EXCELFILENAME=FileName+".xlsx"
    wb = openpyxl.Workbook()
    # Se crean la hojadel Libro Excel
    Hoja=wb.create_sheet(HojaName)
    #  Se llenan las Hojas
    for ren,Ren in enumerate(DataTable):
        for col,Col in enumerate(Ren):
            _=Hoja.cell(ren+1, col+1, value=Col )
    msg=QMessageBox()
    msg.setWindowTitle("Informacion")
    msg.setIcon(QMessageBox.Warning)
    try :
        wb.save(filename=EXCELFILENAME)
        msg.setText("Archivo Excel Grabado Exitosamente")
        x=msg.exec_()
    except PermissionError:
        msg.setText("No se puede grabar info archivo excel ocupado")
        x=msg.exec_()
        return
    except FileNotFoundError:
        msg.setText("No se encontro el archivo ")
        x=msg.exec_()

def GuardaMovMP_Prod(self,TipoMat,Fecha,TipoMov,IDClieProv,IDAlmacen,IDMaterial,Cant,IDPresentacion,Referencia,Nota,GlbIndi,PorBas):
    if TipoMat == 1:
        query="INSERT INTO tblProductoMovimientos VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
        Folio=UltimoFolMas1(self,"Folio", "tblProductoMovimientos")
        datos=(Folio,Fecha,TipoMov,IDClieProv,IDAlmacen,IDMaterial,Cant,IDPresentacion,Referencia,Nota,GlbIndi)
        run_query2(self,query,datos)
    elif TipoMat == 2:
        if PorBas ==1 :
            query="SELECT Merma FROM tblMateriaPrima WHERE  ID= ? "
            Merma=run_query2(self,query,(IDMaterial,))
            if Merma[0][0] != None :
                Merma=int(Merma[0][0])
            else :  Merma=0
            Cant=((Merma+100)*Cant/100)
            Nota=" Sal MP por Bas mas Merma del " + str(Merma) +" %"
        query="INSERT INTO tblMovimientosMP VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
        Folio=UltimoFolMas1(self,"Folio", "tblMovimientosMP")
        datos=(Folio,Fecha,TipoMov,IDClieProv,IDAlmacen,IDMaterial,Cant,IDPresentacion,Referencia,Nota,GlbIndi)
        run_query2(self,query,datos)
        

def HaceCargoEnAlmaMP_X_SalProd(self,Fecha,IDProd,TipoMov,IDClieProve,ClaveAlmacen,Cant,IDPresentacion,FolioRef,GlbIndi):
    #  Si el Movimiento es una salida  Inicia los cargos a  Alamcen de MP por desglose de Producto  *****************
    #  Obtiene ID Almacen Para el cargo de MPs
    IDAlmacen=ClaveAlmacen
    ListaIngs=DesglosaIngredientes(self,IDProd,Cant)
    ListaMermas=DesglosaMermas(self,IDProd,Cant)
    if len(ListaIngs) == 0 :
        ms="No se cargaron los datos a MP´s Origen del Cargo  Con Ref. Folio= "+ str(FolioRef)
        msg=QMessageBox()
        msg.setWindowTitle("Informacion")
        msg.setText(ms)
        msg.setIcon(QMessageBox.Warning)
        x=msg.exec_() 
        return
    
    for i in range (0,len(ListaIngs)):
        IDMP=ListaIngs[i][0]
        Cantidad=ListaIngs[i][1]+ListaMermas[i][1]
        if IDPresentacion == 2:
            Nota="Desgl.+ Mermas Servido Folio = "+ str(FolioRef)
        else :
            Nota="Desglose + mermas  Prod Sal x Bas Folio = "+ str(FolioRef)
        GuardaMovMP_Prod(self,2,Fecha,1,IDClieProve,IDAlmacen,IDMP,Cantidad,IDPresentacion,FolioRef,Nota,GlbIndi,0)
    return 

def FiltroCorral(self,Lista,StrToFin):
    Buscar=StrToFin.upper()
    ListaRet=[]
    if StrToFin !="" :
        for i in range(0,len(Lista)):
            DatToTest=Lista[i][2]
            res=DatToTest.startswith(Buscar)
            if res== True :
                ListaRet.append(Lista[i])
    elif StrToFin == "":
       ListaRet=Lista
    return ListaRet

def ChecaSiProdTieneReceta(self,IDProd):
    query= " SELECT ID FROM tblProductosMateriaPrima WHERE IDProd= ?"
    Data=run_query2(self,query,(IDProd,))
    if len(Data) > 0:
        return True
    else :
        return False

def TotalServClienteEnOrden(self,IDOrden,IDCliente):
    query= """  SELECT   SUM(tblDetalleOrdenSurtido.CantSurtida), tblDetalleOrdenSurtido.Fecha
                FROM tblDetalleOrdenSurtido
                INNER JOIN tblOrdenesSurtido ON tblOrdenesSurtido.ID=tblDetalleOrdenSurtido.IDOrden
                WHERE  tblDetalleOrdenSurtido.IDCliente = ?  AND  tblOrdenesSurtido.ID == ?
           """
    Data=run_query2(self,query,(IDCliente,IDOrden))
    if Data[0][0] == "NULL" :
        TotalOrdenXClien=0
        FechaSer=""
    else :
        TotalOrdenXClien=Data[0][0]
        FechaSer=Data[0][1]
    return TotalOrdenXClien,FechaSer

def TotalOrden(self,IDOrden):
    query= """  SELECT   SUM(tblDetalleOrdenSurtido.CantSurtida)
                FROM tblDetalleOrdenSurtido
                INNER JOIN tblOrdenesSurtido ON tblOrdenesSurtido.ID=tblDetalleOrdenSurtido.IDOrden
                WHERE   tblOrdenesSurtido.ID == ?
           """
    Data=run_query2(self,query,(IDOrden,))
    TotalOrden=Data[0][0]
    return TotalOrden

def RunQueryOne(self,query,parametro=()):
    conn=sqlite3.connect("valmodb.db") 
    cursor = conn.cursor()
    cursor.execute(query,parametro)
    result=cursor.fetchone()
    conn.commit()
    return result[0]

def GeneraGlobalMovIndice(self):
    query= " SELECT IndiceMovs FROM tblIndices WHERE ID = 1"
    Data=RunQueryOne(self,query)
    Up=Data+1
    query= " UPDATE  tblIndices  SET IndiceMovs= ?  WHERE ID= 1 "
    run_query2(self,query,(Up,))
    return Up

#  Borra movimientos generados por desglose de materias primas en salida de productos por bascula
#  y por servidos incluye el de la merma.

def run_queryBorrar(self, query, parametro= ()):
    conn=sqlite3.connect("valmodb.db") 
    cursor = conn.cursor()
    cursor.execute(query, parametro)
    conn.commit()
    
def BorraMovDeDesgloseMP(self,GlbMovInd):
    query=" DELETE FROM tblMovimientosMP WHERE GlbMovInd= ? ;"
    run_queryBorrar(self,query,(GlbMovInd,))

def BorrarMovProductos(self,GlbMovInd):
    query=" DELETE FROM tblProductoMovimientos WHERE GlbMovInd= ? ;"
    run_queryBorrar(self,query,(GlbMovInd,))

def JalaCorralesAsignados(self):
    query= """ SELECT tblCorrales.ID, Descripcion, AsignACliente, tblClientes.Nombre
             FROM tblCorrales 
             INNER JOIN tblClientes ON tblClientes.ID = tblCorrales.AsignACliente
             WHERE AsignACliente > 0  
             ORDER BY Descripcion
           """      
    CorrData=run_query2(self,query)
    return CorrData

def JalaCorralesAsignadoACliente(self,IDCliente):
    query= """ SELECT ID, Descripcion, AsignACliente
               FROM tblCorrales 
               WHERE AsignACliente = ?  
               ORDER BY Descripcion
           """  
    ClienteData=run_query2(self,query,(IDCliente,))
    return ClienteData

def CruzaCliente(self,IDCliente):
    query=" SELECT Nombre FROM tblClientes WHERE ID = ?"
    return RunQueryOne(self,query,(IDCliente,))

def CantidadActualAnimales(self,IDCorral,fecha):
    query=  """ SELECT  SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 0  THEN  tblMovimientoAnimales.Cantidad ELSE 0 END) -
                       SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 1  THEN  tblMovimientoAnimales.Cantidad  ELSE 0 END) AS SUMA
                FROM tblMovimientoAnimales 
                WHERE tblMovimientoAnimales.IDCorral= ?  AND tblMovimientoAnimales.Fecha BETWEEN 
                (SELECT FechaAsigna FROM tblCorrales WHERE ID=? ) AND ?
            """
    Cantidad=run_query2(self,query,(IDCorral,IDCorral,fecha))
    if Cantidad[0][0] is None :
        return -1
    else:
        return Cantidad[0][0]

def IDCorralDeCorral(self,Corral):
    query=""" SELECT ID FROM tblCorrales WHERE Descripcion = ? """
    return RunQueryOne(self,query,(Corral,))