# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TipoAnimal.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


#from asyncio.windows_events import NULL
from Procesos import *
from PyQt5 import  QtGui, QtWidgets, QtCore
from PyQt5.QtCore import QDateTime, Qt
from PyQt5.QtWidgets import *
from PyQt5 import uic
from Uics_Reportes import *
from Utilis import *
import sys,re,sqlite3
import time as tm
from datetime import datetime, timedelta
import openpyxl 
import pathlib
import sys,os,subprocess
from subprocess import Popen,PIPE
from GenReportesPDF import *


class RepSurtidosMovs(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        self.ui=Ui_MovimientosSurtido()
        self.ui.setupUi(self)
        self.ui.Tabla.setColumnWidth(0,70)
        self.ui.Tabla.setColumnWidth(1,70)
        self.ui.Tabla.setColumnWidth(2,200)
        self.ui.Tabla.setColumnWidth(3,180)
        self.ui.Tabla.setColumnWidth(4,80)
        self.ui.Tabla.setColumnWidth(5,100)
        self.ui.Tabla.setColumnWidth(6,70)
        self.ui.Tabla.setColumnWidth(7,70)
        self.ui.Tabla.setColumnWidth(8,100)
        self.ui.Tabla.setColumnWidth(9,100)
        now = QDateTime.currentDateTime().date()
        self.ui.FechaInicSel.setDate(now)
        self.ui.FechaFinSel.setDate(now)
        self.LlenaCBox()
        self.ui.PBHacer.clicked.connect(self.JalaData)
        self.ui.PBCerrar.clicked.connect(self.close)
        self.ui.PBToExcel.clicked.connect(self.RepToExcel)
      
    def LlenaCBox(self):
           global DataCliente
           query="SELECT ID,Nombre  FROM  tblClientes"
           DataCliente=run_query2(self,query) 
           self.ui.ClienteCBox.clear()
           for i in range(0,len(DataCliente)):
               self.ui.ClienteCBox.addItem(DataCliente[i][1])
    
    def JalaData(self):
        self.ui.Tabla.setRowCount(0)
        cliente=DataCliente[self.ui.ClienteCBox.currentIndex()][0]
        clienteDescrip=DataCliente[self.ui.ClienteCBox.currentIndex()][1]
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial = f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        if self.ui.RBotPorClien.isChecked():
            query= """
        	SELECT DISTINCT tblDetalleOrdenSurtido.Folio, tblOrdenesSurtido.NoOrden,  tblClientes.Nombre , tblProductos.Descripcion,
                    tblCorrales.Descripcion,  tblDetalleOrdenSurtido.CantSolicitada, tblDetalleOrdenSurtido.CantSurtida,
	                tblDetalleOrdenSurtido.FechaSol, tblDetalleOrdenSurtido.Fecha
            FROM tblDetalleOrdenSurtido
            LEFT JOIN tblOrdenesSurtido ON tblDetalleOrdenSurtido.IDOrden=tblOrdenesSurtido.ID	
            LEFT JOIN tblProductos  ON  tblProductos.ID =tblOrdenesSurtido.IDProducto 
            LEFT JOIN tblClientes ON tblDetalleOrdenSurtido.IDCliente=tblClientes.ID 
            LEFT JOIN tblCorrales ON tblDetalleOrdenSurtido.IDCorral=tblCorrales.ID
            WHERE  tblDetalleOrdenSurtido.IDCliente = ?  AND  (tblDetalleOrdenSurtido.Fecha BETWEEN ? AND ? )
            GROUP BY tblDetalleOrdenSurtido.Folio
            ORDER BY  tblDetalleOrdenSurtido.Folio
	        """
            Datos=run_query2(self,query,(cliente,FechaInicial,FechaFinal))
        else   : 
            query= """
        	SELECT DISTINCT tblDetalleOrdenSurtido.Folio, tblOrdenesSurtido.NoOrden,  tblClientes.Nombre , tblProductos.Descripcion,
                    tblCorrales.Descripcion,  tblDetalleOrdenSurtido.CantSolicitada, tblDetalleOrdenSurtido.CantSurtida,
	                tblDetalleOrdenSurtido.FechaSol, tblDetalleOrdenSurtido.Fecha
            FROM tblDetalleOrdenSurtido
            LEFT JOIN tblOrdenesSurtido ON tblDetalleOrdenSurtido.IDOrden=tblOrdenesSurtido.ID	
            LEFT JOIN tblProductos  ON  tblProductos.ID =tblOrdenesSurtido.IDProducto 
            LEFT JOIN tblClientes ON tblDetalleOrdenSurtido.IDCliente=tblClientes.ID 
            LEFT JOIN tblCorrales ON tblDetalleOrdenSurtido.IDCorral=tblCorrales.ID
            WHERE  tblDetalleOrdenSurtido.Fecha BETWEEN ? AND ? 
            GROUP BY tblDetalleOrdenSurtido.Folio
            ORDER BY  tblDetalleOrdenSurtido.Folio
	        """       
            Datos=run_query2(self,query,(FechaInicial,FechaFinal))
        
                      
        for ren in range(0,len(Datos)):
            self.ui.Tabla.insertRow(ren)
            for col in range(0,len(Datos[0])):
                DaToTabla=str(Datos[ren][col])
                if col == 5 or col == 6:
                   DaToTabla=str(Datos[ren][col])
                   #DaToTabla='{:.2f}'.format(Datos[ren][col])
                self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(DaToTabla)))
       
        return Datos,cliente,clienteDescrip,FechaFinal
        
    def RepToExcel(self):
        List=self.JalaData()
        if List !=None :
            query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
            ruta=run_query(self,query)
            ruta=ruta[0][2]
            EXCELFILENAME=ruta+"MovsServidos"+"_"+List[3]+".xlsx"
            DataTableToExcel(self,EXCELFILENAME,["MovServidos"],[List[0]]) 
        else :
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setText("No hay Datos Generados")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_() 
            return

class RepLiquidaCliente(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        PathPgm=os.getcwdb()
        path=os.path.join(str(PathPgm,'utf-8'),'GUIs','RepLiquiClien.ui')
        uic.loadUi(path,self)
        self.PBCerrar=self.findChild(QPushButton,'PBCerrar')
        self.PBGuardar=self.findChild(QPushButton,'PBGuardar')
        self.PBHacer=self.findChild(QPushButton,'PBHacer')
        self.PBToExcel=self.findChild(QPushButton,'PBToExcel')
        self.PBImprimir=self.findChild(QPushButton,'PBImprimir')
        self.Tabla=self.findChild(QTableWidget,'Tabla')
        self.Tabla2=self.findChild(QTableWidget,'Tabla2')
        self.Tabla3=self.findChild(QTableWidget,'Tabla3')
        self.FechaInicSel=self.findChild(QDateEdit,'FechaInicSel')
        self.FechaFinSel=self.findChild(QDateEdit,'FechaFinSel')
        self.ClienteCBox=self.findChild(QComboBox,'ClienteCBox')
        RutaIcon=os.path.join(str(PathPgm,'utf-8'),'Iconos','success.ico')
        RutaPrinIcon=os.path.join(str(PathPgm,'utf-8'),'Iconos','printer.png')
        RutaExcelIcon=os.path.join(str(PathPgm,'utf-8'),'Iconos','excel.png')
        icon = QtGui.QIcon(RutaIcon)
        printicon = QtGui.QIcon(RutaPrinIcon)
        excelicon = QtGui.QIcon(RutaExcelIcon)
        self.PBHacer.setIcon(icon)
        self.PBToExcel.setIcon(excelicon)
        self.PBImprimir.setIcon(printicon)
        self.Tabla.setColumnWidth(0,100)
        self.Tabla.setColumnWidth(1,130)
        self.Tabla.setColumnWidth(2,50)
        self.Tabla.setColumnWidth(4,80)
        self.Tabla2.setColumnWidth(0,120)
        self.Tabla2.setColumnWidth(1,50)
        self.Tabla2.setColumnWidth(1,50)
        #self.ui.FechaCapWidget.setDate(QtCore.QDate(2021, 1, 1))
        now = QDateTime.currentDateTime().date()
        self.FechaInicSel.setDate(now)
        self.FechaFinSel.setDate(now)
        self.PBCerrar.clicked.connect(self.close)
        self.LlenaCBox()
        self.PBHacer.clicked.connect(self.HacerRep)
        self.PBToExcel.clicked.connect(self.RepToExcel)
        self.PBImprimir.clicked.connect(self.PrintToPdf)
    
    def LlenaCBox(self):
        global DataCliente
        DataCliente=ClientesConCorralAsignado(self)
        self.ClienteCBox.clear()
        for i in range(0,len(DataCliente)):
            self.ClienteCBox.addItem(DataCliente[i][1])


    def JalaRepProdEnCorr(self):
        global DataCliente
        cliente=DataCliente[self.ClienteCBox.currentIndex()][0]
        clienteDescrip=DataCliente[self.ClienteCBox.currentIndex()][1]
        f_ini=self.FechaInicSel.date()
        FechaInicial = f_ini.toString(Qt.ISODate)
        f_fin=self.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
       
        query= """
        	SELECT tblCorrales.Descripcion, tblProductos.Descripcion, tblProductos.UdeM, SUM(tblDetalleOrdenSurtido.CantSurtida)
            FROM tblDetalleOrdenSurtido
            INNER JOIN tblOrdenesSurtido ON tblDetalleOrdenSurtido.IDOrden=tblOrdenesSurtido.ID
            INNER JOIN tblProductos ON  tblOrdenesSurtido.IDProducto= tblProductos.ID
            INNER JOIN tblCorrales ON tblDetalleOrdenSurtido.IDCorral = tblCorrales.ID          
            WHERE  tblDetalleOrdenSurtido.IDCliente = ?  AND  (tblDetalleOrdenSurtido.Fecha BETWEEN ? AND ? )
            GROUP BY  tblProductos.Descripcion,tblDetalleOrdenSurtido.IDCorral 
            ORDER BY tblCorrales.Descripcion
	        """
        Datos=run_query2(self,query,(cliente,FechaInicial,FechaFinal))
        self.Tabla.setRowCount(0)
        DatosToRep=[]
        ListaTem=[]
        for ren in range(0,len(Datos)):
            self.Tabla.insertRow(ren)
            for col in range(0,len(Datos[0])):
                DaToTabla=str(Datos[ren][col])
                ListaTem.append(DaToTabla)
                if col == 6 or col == 7:
                   DaToTabla='{:.2f}'.format(Datos[ren][col])
                self.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(DaToTabla)))
            DatosToRep.append(ListaTem)
            ListaTem=[]
        return DatosToRep
    
    def JalaTotalProd(self):
        cliente=DataCliente[self.ClienteCBox.currentIndex()][0]
        clienteDescrip=DataCliente[self.ClienteCBox.currentIndex()][1]
        f_ini=self.FechaInicSel.date()
        FechaInicial = f_ini.toString(Qt.ISODate)
        f_fin=self.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        query= """
                SELECT tblProductos.Descripcion,tblProductos.UdeM, SUM(tblDetalleOrdenSurtido.CantSurtida),tblProductos.PU
                FROM tblDetalleOrdenSurtido
                INNER JOIN tblOrdenesSurtido ON tblDetalleOrdenSurtido.IDOrden=tblOrdenesSurtido.ID
                INNER JOIN tblProductos ON  tblOrdenesSurtido.IDProducto= tblProductos.ID
                WHERE  tblDetalleOrdenSurtido.IDCliente = ?  AND  (tblDetalleOrdenSurtido.Fecha BETWEEN ? AND ? )
                GROUP BY  tblProductos.ID
                ORDER BY  tblProductos.Descripcion
               """
        Datos=run_query2(self,query,(cliente,FechaInicial,FechaFinal))
        ListaTem=[]
        DataToRep=[]
        self.Tabla2.setRowCount(0)
        for ren in range(0,len(Datos)):
            self.Tabla2.insertRow(ren)
            for col in range(0,len(Datos[0])):
                DaToTabla=str(Datos[ren][col])
                if col == 6 or col == 7:
                   DaToTabla='{:,.2f}'.format(Datos[ren][col])
                self.Tabla2.setItem(ren,col, QtWidgets.QTableWidgetItem(str(DaToTabla)))
                ListaTem.append(DaToTabla)
            DataToRep.append(ListaTem)
            ListaTem=[]
        return DataToRep
    
    def JalaTotalAlimPorCorral(self):
        cliente=DataCliente[self.ClienteCBox.currentIndex()][0]
        clienteDescrip=DataCliente[self.ClienteCBox.currentIndex()][1]
        f_ini=self.FechaInicSel.date()
        FechaInicial = f_ini.toString(Qt.ISODate)
        f_fin=self.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        query= """
                SELECT  tblCorrales.Descripcion, SUM(tblDetalleOrdenSurtido.CantSurtida),tblCorrales.ID
                FROM tblDetalleOrdenSurtido
                INNER JOIN 	tblCorrales ON  tblDetalleOrdenSurtido.IDCorral = tblCorrales.ID
                WHERE  tblDetalleOrdenSurtido.IDCliente = ?  AND  (tblDetalleOrdenSurtido.Fecha BETWEEN ? AND ? )
                GROUP BY  tblDetalleOrdenSurtido.IDCorral
                ORDER BY  tblCorrales.Descripcion
                """
        Data=run_query2(self,query,(cliente,FechaInicial,FechaFinal))
        ListaTem=[]
        Datos=[]
        #DiasAnimal=CalculaDiasAnimal(self,281,FechaInicial,FechaFinal)
        
        for i in range(0,len(Data)):
            ListaTem.append(Data[i][0])
            ListaTem.append(Data[i][1])
            DiasAnimal=CalculaDiasAnimal(self,cliente,Data[i][2],FechaInicial,FechaFinal)
            DiasAnimFomated="{:.0f}".format(DiasAnimal)
            if DiasAnimal < 1 :
                DiasAnimal=1
                ToTab="ND"
            else :
                ToTab=DiasAnimFomated
            
            ListaTem.append(ToTab)
            PromDia=int(Data[i][1])/int(DiasAnimal)
            PromDia="{:.4f}".format(PromDia)
            ListaTem.append(PromDia)
            Datos.append(ListaTem)
            ListaTem=[]
        
        ListaTem=[]
        DataToRep=[]
        self.Tabla3.setRowCount(0)
        for ren in range(0,len(Datos)):
            self.Tabla3.insertRow(ren)
            for col in range(0,len(Datos[0])):
                DaToTabla=str(Datos[ren][col])
                ListaTem.append(DaToTabla)
                self.Tabla3.setItem(ren,col, QtWidgets.QTableWidgetItem(str(DaToTabla)))
            DataToRep.append(ListaTem)
            ListaTem=[]
        return DataToRep

    def HacerRep(self):
        ListaTabProdEnCorral=self.JalaRepProdEnCorr()
        ListaTabTotProd=self.JalaTotalProd()
        ListaTabTotXCorral=self.JalaTotalAlimPorCorral()

    def RepToExcel(self):
        f_fin=self.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        ListaTabProdEnCorral=self.JalaRepProdEnCorr()
        pm=['Producto','Corral','UdeM','Cantidad']
        ListaTabProdEnCorral.insert(0,pm)
        ListaTabTotProd=self.JalaTotalProd()
        pm=['Producto','UdeM','TotalServido','PrecioUnitario']
        ListaTabTotProd.insert(0,pm)
        ListaTabTotXCorral=self.JalaTotalAlimPorCorral()
        pm=['Corral','TotalServido','DiasAnimal','Prom Diario']
        ListaTabTotXCorral.insert(0,pm)
        clienteDescrip=DataCliente[self.ClienteCBox.currentIndex()][1]
        query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
        ruta=run_query(self,query)
        ruta=ruta[0][2]
        EXCELFILENAME=ruta+"Liquida_"+clienteDescrip+"_"+FechaFinal+".xlsx"
        DataTableToExcel(self,EXCELFILENAME,["DetalleSurtido","ProductoPorCorral","TotalPorProd"],[ListaTabProdEnCorral,ListaTabTotXCorral,ListaTabTotProd]) 
        return
    
    def PrintToPdf(self):
        ListaTabProdEnCorral=self.JalaRepProdEnCorr()
        ListaTabTotXCorral=self.JalaTotalAlimPorCorral()
        ListaTabTotProd=self.JalaTotalProd()
        clienteDescrip=DataCliente[self.ClienteCBox.currentIndex()][1]
        now = QDateTime.currentDateTime().date()
        FechaPre=now.toString(Qt.ISODate)
        f_ini=self.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        TituloRep='Liquidacion de Cliente'
        EncabeData=['Fecha Reporte:',FechaPre,'Cliente:',clienteDescrip,'Fecha Inicial:',FechaInicial,'Fecha Final:',FechaFinal]
        if len(list(ListaTabProdEnCorral)) < 40 :
            r=GeneraReporte(self,2,TituloRep,EncabeData,list(ListaTabProdEnCorral),list(ListaTabTotXCorral),list(ListaTabTotProd))
        else:
            r=GeneraRepLiquidaLargo(self,2,TituloRep,EncabeData,list(ListaTabProdEnCorral),list(ListaTabTotXCorral),list(ListaTabTotProd))
        if r== 1 :
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setText(" Error archivo pdf abierto")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_()
            return 
        
class RepDiarioPromedio(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        PathPgm=os.getcwdb()
        path=os.path.join(str(PathPgm,'utf-8'),'GUIs','RepDiarioServido.ui')
        uic.loadUi(path,self)
        self.PBCerrar=self.findChild(QPushButton,'PBCerrar')
        self.PBGuardar=self.findChild(QPushButton,'PBGuardar')
        self.PBHacer=self.findChild(QPushButton,'PBHacer')
        self.PBToExcel=self.findChild(QPushButton,'PBToExcel')
        self.PBImprimir=self.findChild(QPushButton,'PBImprimir')
        self.Tabla=self.findChild(QTableWidget,'Tabla')
        self.FechaInicSel=self.findChild(QDateEdit,'FechaInicSel')
        self.FechaFinSel=self.findChild(QDateEdit,'FechaFinSel')
        self.ClienteCBox=self.findChild(QComboBox,'ClienteCBox')
        RutaIcon=os.path.join(str(PathPgm,'utf-8'),'Iconos','success.ico')
        RutaPrinIcon=os.path.join(str(PathPgm,'utf-8'),'Iconos','printer.png')
        RutaExcelIcon=os.path.join(str(PathPgm,'utf-8'),'Iconos','excel.png')
        icon = QtGui.QIcon(RutaIcon)
        printicon = QtGui.QIcon(RutaPrinIcon)
        excelicon = QtGui.QIcon(RutaExcelIcon)
        self.PBHacer.setIcon(icon)
        self.PBToExcel.setIcon(excelicon)
        self.PBImprimir.setIcon(printicon)
        #self.ui.FechaCapWidget.setDate(QtCore.QDate(2021, 1, 1))
        now = QDateTime.currentDateTime().date()
        self.FechaInicSel.setDate(now)
        self.FechaFinSel.setDate(now)
        self.PBCerrar.clicked.connect(self.close)
        self.LlenaCBox()
        self.PBHacer.clicked.connect(self.HacerRep)
        self.PBToExcel.clicked.connect(self.RepToExcel)
        self.PBImprimir.clicked.connect(self.PrintToPdf)
        global HeaderList
        ListaProd=ProductosQueSeSirven(self,2)
        HeaderList=ListaProd
        HeaderList.insert(0,'Corral')
        HeaderList.append('Total Servido')
        HeaderList.append('No Anim Act')
        HeaderList.append('DiasAnimal')
        HeaderList.append('Prom Diario')
        self.Tabla.setColumnCount(1)
        self.Tabla.clearContents()
        self.Tabla.setColumnCount(len(ListaProd))
        self.Tabla.setHorizontalHeaderLabels(HeaderList)
        self.Tabla.setColumnWidth(0,100)
        self.Tabla.setColumnWidth(1,100)
        self.Tabla.setColumnWidth(2,85)
        self.Tabla.setColumnWidth(4,85)
        self.Tabla.setColumnWidth(5,85)
        self.Tabla.setColumnWidth(6,85)
        self.Tabla.setColumnWidth(7,85)
        self.Tabla.setColumnWidth(8,85)

    def LlenaCBox(self):
        global DataCliente
        DataCliente=ClientesConCorralAsignado(self)
        self.ClienteCBox.clear()
        for i in range(0,len(DataCliente)):
            self.ClienteCBox.addItem(DataCliente[i][1])

    def HacerRep(self):
        global DataCliente
        ListaForRep=[]
        ListaTem=[]
        cliente=DataCliente[self.ClienteCBox.currentIndex()][0]
        clienteDescrip=DataCliente[self.ClienteCBox.currentIndex()][1]
        f_ini=self.FechaInicSel.date()
        FechaInicial = f_ini.toString(Qt.ISODate)
        f_fin=self.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        query='SELECT tblCorrales.Descripcion,'
        IDListaProd=ProductosQueSeSirven(self,1)
        for k in range(len(IDListaProd)):
            query= query+"SUM ( CASE WHEN tblOrdenesSurtido.IDProducto = ?    THEN tblDetalleOrdenSurtido.CantSurtida ELSE 0 END),"
        query= query+"tblDetalleOrdenSurtido.IDCorral"
        query= query+ """ FROM tblDetalleOrdenSurtido
                          INNER JOIN tblCorrales ON tblCorrales.ID =  tblDetalleOrdenSurtido.IDCorral
                    INNER JOIN tblOrdenesSurtido ON tblOrdenesSurtido.ID = tblDetalleOrdenSurtido.IDOrden
                    WHERE  tblDetalleOrdenSurtido.IDCliente = ? AND tblDetalleOrdenSurtido.Fecha BETWEEN ? AND ?
                    GROUP BY tblDetalleOrdenSurtido.IDCorral 
                    ORDER BY tblCorrales.Descripcion"""
        param=IDListaProd
        param.append(cliente)
        param.append(FechaInicial)
        param.append(FechaFinal)
        Data=run_query2(self,query,param)
        TotServido=0
        Promedio=0
        for ren, item in enumerate(Data):
            for col in range(len(item)-1):
                if col > 0 :
                    #data="{:,.0f}".format(item[col])
                    data=item[col]
                    TotServido=TotServido+item[col]
                else : data=item[col]    
                ListaTem.append(data)
            #ListaTem.append("{:,.2f}".format(TotServido))
            ListaTem.append(TotServido)
            NoAnimalesActual=CantidadActualAnimales(self,Data[ren][5],FechaFinal)
            ListaTem.append(NoAnimalesActual)
            DiasAnimal=CalculaDiasAnimal(self,cliente,item[-1],FechaInicial,FechaFinal)
            ListaTem.append(DiasAnimal)
            if DiasAnimal > 0 :
                Promedio=TotServido/DiasAnimal
            else : Promedio=1
            Promedio="{:.3f}".format(Promedio)
            ListaTem.append(Promedio)
            ListaForRep.append(ListaTem)
            ListaTem=[]
            TotServido=0
        Prod1=0 ; Prod2=0 ; Prod3=0 ; Prod4=0 ; Prod5=0 ; TotProd=0; TotalAnim=0 ; TotDiasAnima= 0
        FinalRen=[]
        ListaTem=[]
        for ren, Ren  in enumerate(ListaForRep):
            Prod1+=Ren[1]                
            Prod2+=Ren[2]
            Prod3+=Ren[3]
            Prod4+=Ren[4] 
            TotProd+=Ren[5]
            TotalAnim+=Ren[6]
            TotDiasAnima+=Ren[7]
        ListaTem.append('Totales') 
        ListaTem.append("{:,.2f}".format(Prod1))
        ListaTem.append("{:,.2f}".format(Prod2))
        ListaTem.append("{:,.2f}".format(Prod3))
        ListaTem.append("{:,.2f}".format(Prod4))
        ListaTem.append("{:,.2f}".format(TotProd))
        ListaTem.append("{:,}".format(TotalAnim))
        ListaTem.append("{:,}".format(TotDiasAnima))
        ListaTem.append('NA') 
        ListaForRep.append(ListaTem)
        self.Tabla.setRowCount(0)
        for ren,RenData in enumerate (ListaForRep):
            self.Tabla.insertRow(ren)
            for col,data in enumerate(RenData):
                if col > 0 and col < 8 :
                    #DaToTab="{:,}".format(int(data))
                    DaToTab=data
                else :  
                    DaToTab=data  
                self.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(DaToTab)))
        return ListaForRep

    def RepToExcel(self):
        global HeaderList
        clienteDescrip=DataCliente[self.ClienteCBox.currentIndex()][1]
        ClienteRen=[' Cliente: ','  ',clienteDescrip]
        f_ini=self.FechaInicSel.date()
        FechaInicial = f_ini.toString(Qt.ISODate)
        f_fin=self.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        FechaRen=['Fecha Inicial : ',FechaInicial,'    ', 'Fecha Final : ', FechaFinal ]
        Datos=self.HacerRep()
        Datos.insert(0,HeaderList)
        Datos.insert(0,FechaRen)
        Datos.insert(0,ClienteRen)
        query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
        ruta=run_query(self,query)
        ruta=ruta[0][2]
        EXCELFILENAME=ruta+"PromedioDiario.xlsx"
        NameWS="Datos  "
        GuardaTableToExcel(self,EXCELFILENAME,NameWS,Datos)
        return

    def PrintToPdf(self):
        global ListaToTable
        Datos=self.HacerRep()
        clienteDescrip=DataCliente[self.ClienteCBox.currentIndex()][1]
        now = QDateTime.currentDateTime().date()
        FechaPre=now.toString(Qt.ISODate)
        f_ini=self.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        TituloRep='Reporte Servido y Promedio Diario'
        TitulosCols=['Corral','Alfalfa 100%','Fase 1', 'Fase 2','Fase 3','Total Servido','No Anim Act','DiasAnimal','PromDiario']
        Datos.insert(0,TitulosCols)
        EncabeData=['Fecha Reporte:',FechaPre,'Cliente:',clienteDescrip,'Fecha Inicial:',FechaInicial,'Fecha Final:',FechaFinal]
        if len(Datos) < 40 :
            r=GeneraReporte(self,3,TituloRep,EncabeData,list(Datos),[''],[''])    
        else : r=GeneraRepDiarioLargo(self,3,TituloRep,EncabeData,list(Datos))    

        if r== 1 :
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setText(" Error archivo pdf abierto")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_()
            return 
        
class RepMovimentosMPTodos(QDialog):
    def __init__(self,Modo):
        QDialog.__init__(self)
        self.ui= Ui_RepMovTodosMP()
        self.ui.setupUi(self)
        self.ui.Tabla.setColumnWidth(0,50)
        self.ui.Tabla.setColumnWidth(1,80)
        self.ui.Tabla.setColumnWidth(2,70)
        self.ui.Tabla.setColumnWidth(4,70)
        self.ui.Tabla.setColumnWidth(5,200)
        self.ui.Tabla.setColumnWidth(6,50)
        self.ui.Tabla.setColumnWidth(7,50)
        self.ui.Tabla.setColumnWidth(8,50)
        #self.ui.FechaCapWidget.setDate(QtCore.QDate(2021, 1, 1))
        now = QDateTime.currentDateTime().date()
        self.ui.FechaInicSel.setDate(now)
        self.ui.FechaFinSel.setDate(now)
        self.ui.AlmacenCBox.activated.connect(self.Hacer)
        self.ui.RBotTodos.toggled.connect(self.Hacer)
        self.ui.RBotAlmacen.toggled.connect(self.Hacer)
        self.ui.PBCerrar.clicked.connect(self.close)
        self.ui.PBBorrar.clicked.connect(self.Borrar)
        self.ui.PBHacer.clicked.connect(self.Hacer)
        self.ui.PBExcel.clicked.connect(self.RepToExcel)
        global FechaInicial,FechaFinal
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        if Modo == 0 :
            self.ui.PBBorrar.setDisabled(True)
        else :
            self.ui.PBBorrar.setEnabled(True)
        self.LlenaCBox()
   
    def LlenaCBox(self):
        global AlmacenData,DataProveedor,DataCliente
        query="SELECT ID,Cliente FROM tblContenedoresMateriaPrima "
        AlmacenData=run_query(self,query)
        self.ui.AlmacenCBox.clear()
        for item in AlmacenData :
            j=str(item[1])
            self.ui.AlmacenCBox.addItem(j) 
        self.ui.AlmacenCBox.setCurrentIndex(0)
        query="SELECT ID,Nombre  FROM  tblProveedores "
        DataProveedor=run_query(self,query)
        query= "SELECT ID,Nombre FROM tblClientes"
        DataCliente=run_query(self,query)
    
    def Borrar(self):
        global Datos
        pos=self.ui.Tabla.currentRow()+1
        if pos <  1  :
            return
        RenData=Datos[pos]
        if RenData[2] == 'Entrada' : Movimiento=0
        else : Movimiento= 1
        query = "UPDATE tblMovimientosMP SET Cantidad = 0, Notas= ' Movimiento Borrado'  WHERE Folio = ? AND TipoMov= ? "
        parameters = (RenData[0], Movimiento )
        res=run_query(self,query, parameters)
        self.Hacer()
   
    def LlenaTabla(self,Datos):
        self.ui.Tabla.setRowCount(0)
        for ren,RenData in enumerate(Datos):
            self.ui.Tabla.insertRow(ren)
            for col,item in enumerate(RenData):
                 if col ==4 :
                      item='{:,}'.format(item)
                 self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(item)))
        pm=['Folio','Fecha','TipoMov','MateriaPrima','Cantidad','Almacen','Notas']
        Datos.insert(0,pm)
        return Datos

    def Hacer(self):
        #global Datos
        Almacen=AlmacenData[self.ui.AlmacenCBox.currentIndex()][0]
        AlmacenName=AlmacenData[self.ui.AlmacenCBox.currentIndex()][1]
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        if self.ui.RBotTodos.isChecked() :
           
            query=  """     SELECT  tblMovimientosMP.Folio, tblMovimientosMP.FechaMov, tblTipoMov.Descripcion, tblMateriaPrima.Descripcion,
                                    tblMovimientosMP.Cantidad, tblContenedoresMateriaPrima.Cliente, tblMovimientosMP.Notas, tblMovimientosMP.Referencia
                            FROM tblMovimientosMP
                            INNER JOIN tblTipoMov ON tblTipoMov.ID = tblMovimientosMP.TipoMov
                            INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblMovimientosMP.IDMP
                            INNER JOIN tblContenedoresMateriaPrima ON tblContenedoresMateriaPrima.ID = tblMovimientosMP.IDAlmacen 
                            WHERE (tblMovimientosMP.FechaMov  BETWEEN ? AND ? )
                            ORDER BY FechaMov
                    """
            Datos=run_query2(self,query,(FechaInicial,FechaFinal)) 
            
        elif self.ui.RBotAlmacen.isChecked():
            query=  """     SELECT  tblMovimientosMP.Folio, tblMovimientosMP.FechaMov, tblTipoMov.Descripcion, tblMateriaPrima.Descripcion,
                                    tblMovimientosMP.Cantidad, tblContenedoresMateriaPrima.Cliente, tblMovimientosMP.Notas, tblMovimientosMP.Referencia
                            FROM tblMovimientosMP
                            INNER JOIN tblTipoMov ON tblTipoMov.ID = tblMovimientosMP.TipoMov
                            INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblMovimientosMP.IDMP
                            INNER JOIN tblContenedoresMateriaPrima ON tblContenedoresMateriaPrima.ID = tblMovimientosMP.IDAlmacen 
                            WHERE (tblMovimientosMP.FechaMov  BETWEEN ? AND ? ) AND  tblMovimientosMP.IDAlmacen= ?
                            ORDER BY FechaMov
                   """
            Datos=run_query2(self,query,(FechaInicial,FechaFinal,Almacen))
        self.LlenaTabla(Datos)
               
        if len(Datos)==0 :
             self.ui.Tabla.setRowCount(0)
             msg=QMessageBox()
             msg.setWindowTitle("Informacion")
             msg.setText("No hay Datos en el periodo")
             msg.setIcon(QMessageBox.Warning)
             x=msg.exec_() 
             return
        else :  return Datos

    def RepToExcel(self):
        AlmacenName=AlmacenData[self.ui.AlmacenCBox.currentIndex()][1]
        Datos=self.Hacer()
        query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
        ruta=run_query(self,query)
        ruta=ruta[0][2]
        if self.ui.RBotTodos.isChecked() :
            EXCELFILENAME=ruta+"MPRep_"+FechaInicial+"_"+FechaFinal+".xlsx"
        else:
            EXCELFILENAME=ruta+"MPRep_"+AlmacenName+"_"+FechaFinal+".xlsx"
        DataTableToExcel(self,EXCELFILENAME,["LogMovimientosMP"],[Datos])     
    
class RepMPResumen(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        PathPgm=os.getcwdb()
        path=os.path.join(str(PathPgm,'utf-8'),'GUIs','RepMPResumen.ui')
        uic.loadUi(path,self)
        self.PBCerrar=self.findChild(QPushButton,'PBCerrar')
        self.PBGuardar=self.findChild(QPushButton,'PBGuardar')
        self.PBHacer=self.findChild(QPushButton,'PBHacer')
        self.PBToExcel=self.findChild(QPushButton,'PBToExcel')
        self.PBImprimir=self.findChild(QPushButton,'PBImprimir')
        self.Tabla=self.findChild(QTableWidget,'Tabla')
        self.RBotTodos=self.findChild(QRadioButton,'RBotTodos')
        self.RBotPorAlmacen=self.findChild(QRadioButton,'RBotPorAlmacen')
        self.Tabla.setColumnWidth(0,150)
        self.Tabla.setColumnWidth(1,90)
        self.Tabla.setColumnWidth(2,90)
        self.Tabla.setColumnWidth(4,90)
        self.Tabla.setColumnWidth(5,100)
        #self.ui.FechaCapWidget.setDate(QtCore.QDate(2021, 1, 1))
        now = QDateTime.currentDateTime().date()
        self.FechaInicSel.setDate(now)
        self.FechaFinSel.setDate(now)
        self.PBCerrar.clicked.connect(self.close)
        self.PBHacer.clicked.connect(self.Hacer)
        self.AlmacenCBox.activated.connect(self.Hacer)
        self.PBToExcel.clicked.connect(self.RepToExcel)
        self.PBImprimir.clicked.connect(self.PrintToPdf)
        #self.ui.PBImprimir.clicked.connect(self.handlePreview)
        global FechaInicial,FechaFinal
        f_fin=self.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)    
        self.LlenaCBox()

    def LlenaCBox(self):
        global AlmacenData
        query="SELECT ID,Cliente FROM tblContenedoresMateriaPrima "
        AlmacenData=run_query(self,query)
        self.AlmacenCBox.clear()
        for item in AlmacenData :
            j=str(item[1])
            self.AlmacenCBox.addItem(j) 
        self.AlmacenCBox.setCurrentIndex(0)

    def Hacer(self):
        global ListaToTable,FechaInicial,FechaFinal
        self.Tabla.setRowCount(0)
        ListaToTable=[]
        Almacen=AlmacenData[self.AlmacenCBox.currentIndex()][0]
        DesAlacen=AlmacenData[self.AlmacenCBox.currentIndex()][1]
        now = QDateTime.currentDateTime().date()
        FechaPre=now.toString(Qt.ISODate)
        f_ini=self.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        if self.RBotPorAlmacen.isChecked():
            # Saca lista de las materias primas en el almacen seleccionado.
            query=  """ SELECT  tblContenedoresMateriaPrima.Cliente,DESCRIP, II, ENTRADAS, SALIDAS,  II+ENTRADAS-SALIDAS AS TOTAL
                        FROM(
                            SELECT  ALMACEN AS ALMA,MP.MP_DES AS DESCRIP , MP.Cantidad +
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 0 AND tblMovimientosMP.FechaMov BETWEEN  MP.FECHA_INV  AND DATE(?,'-1 day')  
                                            AND  tblMovimientosMP.IDAlmacen = MP.ALMACEN	THEN tblMovimientosMP.Cantidad ELSE 0 END) - 
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 1 AND tblMovimientosMP.FechaMov BETWEEN  MP.FECHA_INV  AND DATE(?,'-1 day') 
                                            AND  tblMovimientosMP.IDAlmacen =  MP.ALMACEN 	THEN tblMovimientosMP.Cantidad ELSE 0 END) AS II,
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 0 AND tblMovimientosMP.FechaMov BETWEEN  ?  AND  ?  
                                            AND  tblMovimientosMP.IDAlmacen =  MP.ALMACEN	THEN tblMovimientosMP.Cantidad ELSE 0 END) AS ENTRADAS,
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 1 AND tblMovimientosMP.FechaMov BETWEEN  ?  AND ?   
                                            AND  tblMovimientosMP.IDAlmacen =  MP.ALMACEN  THEN tblMovimientosMP.Cantidad ELSE 0 END) AS SALIDAS
                            FROM (  SELECT IDMP AS IDMP  , tblMateriaPrima.Descripcion  AS MP_DES, MAX(tblInventarioInicialesMP.Fecha) AS FECHA_INV, Cantidad, ? AS ALMACEN
                                    FROM tblInventarioInicialesMP
                                    INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblInventarioInicialesMP.IDMP
                                    WHERE tblInventarioInicialesMP.IDContenedor = ALMACEN 
                                    GROUP BY IDMP ) AS MP
                            LEFT JOIN tblMovimientosMP  ON   tblMovimientosMP.IDMP = MP.IDMP
                            GROUP BY MP.IDMP
                            ) AS PPAL
                        INNER JOIN tblContenedoresMateriaPrima ON tblContenedoresMateriaPrima.ID =ALMA
                    """
            DaQu=(FechaInicial,FechaInicial,FechaInicial, FechaFinal,FechaInicial, FechaFinal,Almacen)
        elif self.RBotTodos.isChecked():
            query= """ SELECT tblContenedoresMateriaPrima.Cliente, DESCRIP, II, ENTRADAS, SALIDAS,  II+ENTRADAS-SALIDAS AS TOTAL
                        FROM(
                            SELECT ALMACEN AS ALMA, MP.MP_DES AS DESCRIP , MP.Cantidad +
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 0 AND tblMovimientosMP.FechaMov BETWEEN  MP.FECHA_INV  AND DATE(?,'-1 day')  
                                            AND  tblMovimientosMP.IDAlmacen = MP.ALMACEN	THEN tblMovimientosMP.Cantidad ELSE 0 END) - 
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 1 AND tblMovimientosMP.FechaMov BETWEEN  MP.FECHA_INV  AND DATE(?,'-1 day') 
                                            AND  tblMovimientosMP.IDAlmacen =  MP.ALMACEN 	THEN tblMovimientosMP.Cantidad ELSE 0 END) AS II,
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 0 AND tblMovimientosMP.FechaMov BETWEEN  ?  AND  ? 
                                            AND  tblMovimientosMP.IDAlmacen =  MP.ALMACEN	THEN tblMovimientosMP.Cantidad ELSE 0 END) AS ENTRADAS,
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 1 AND tblMovimientosMP.FechaMov BETWEEN  ? AND ?    
                                            AND  tblMovimientosMP.IDAlmacen =  MP.ALMACEN  THEN tblMovimientosMP.Cantidad ELSE 0 END) AS SALIDAS
                                            
                            FROM (  SELECT IDMP AS IDMP  , tblMateriaPrima.Descripcion  AS MP_DES, MAX(tblInventarioInicialesMP.Fecha) AS FECHA_INV, Cantidad, ? AS ALMACEN
                                    FROM tblInventarioInicialesMP
                                    INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblInventarioInicialesMP.IDMP
                                    WHERE tblInventarioInicialesMP.IDContenedor = ALMACEN 
                                    GROUP BY IDMP ) AS MP
                            LEFT JOIN tblMovimientosMP  ON   tblMovimientosMP.IDMP = MP.IDMP
                            GROUP BY MP.IDMP

                            ) AS PPAL 
                        INNER JOIN tblContenedoresMateriaPrima ON tblContenedoresMateriaPrima.ID =ALMA
                        UNION
                        SELECT tblContenedoresMateriaPrima.Cliente, DESCRIP, II, ENTRADAS, SALIDAS,  II+ENTRADAS-SALIDAS AS TOTAL
                        FROM(
                            SELECT ALMACEN AS ALMA, MP.MP_DES AS DESCRIP , MP.Cantidad +
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 0 AND tblMovimientosMP.FechaMov BETWEEN  MP.FECHA_INV  AND DATE(?,'-1 day')  
                                            AND  tblMovimientosMP.IDAlmacen = MP.ALMACEN	THEN tblMovimientosMP.Cantidad ELSE 0 END) - 
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 1 AND tblMovimientosMP.FechaMov BETWEEN  MP.FECHA_INV  AND DATE(?,'-1 day') 
                                            AND  tblMovimientosMP.IDAlmacen =  MP.ALMACEN 	THEN tblMovimientosMP.Cantidad ELSE 0 END) AS II,
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 0 AND tblMovimientosMP.FechaMov BETWEEN  ?  AND  ? 
                                            AND  tblMovimientosMP.IDAlmacen =  MP.ALMACEN	THEN tblMovimientosMP.Cantidad ELSE 0 END) AS ENTRADAS,
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 1 AND tblMovimientosMP.FechaMov BETWEEN  ? AND ?    
                                            AND  tblMovimientosMP.IDAlmacen =  MP.ALMACEN  THEN tblMovimientosMP.Cantidad ELSE 0 END) AS SALIDAS
                                            
                            FROM (  SELECT IDMP AS IDMP  , tblMateriaPrima.Descripcion  AS MP_DES, MAX(tblInventarioInicialesMP.Fecha) AS FECHA_INV, Cantidad, ? AS ALMACEN
                                    FROM tblInventarioInicialesMP
                                    INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblInventarioInicialesMP.IDMP
                                    WHERE tblInventarioInicialesMP.IDContenedor = ALMACEN 
                                    GROUP BY IDMP ) AS MP
                            LEFT JOIN tblMovimientosMP  ON   tblMovimientosMP.IDMP = MP.IDMP
                            GROUP BY MP.IDMP

                            ) AS PPAL 
                        INNER JOIN tblContenedoresMateriaPrima ON tblContenedoresMateriaPrima.ID =ALMA
                        UNION
                        SELECT tblContenedoresMateriaPrima.Cliente, DESCRIP, II, ENTRADAS, SALIDAS,  II+ENTRADAS-SALIDAS AS TOTAL
                        FROM(
                            SELECT ALMACEN AS ALMA, MP.MP_DES AS DESCRIP , MP.Cantidad +
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 0 AND tblMovimientosMP.FechaMov BETWEEN  MP.FECHA_INV  AND DATE(?,'-1 day')  
                                            AND  tblMovimientosMP.IDAlmacen = MP.ALMACEN	THEN tblMovimientosMP.Cantidad ELSE 0 END) - 
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 1 AND tblMovimientosMP.FechaMov BETWEEN  MP.FECHA_INV  AND DATE(?,'-1 day') 
                                            AND  tblMovimientosMP.IDAlmacen =  MP.ALMACEN 	THEN tblMovimientosMP.Cantidad ELSE 0 END) AS II,
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 0 AND tblMovimientosMP.FechaMov BETWEEN  ?  AND  ? 
                                            AND  tblMovimientosMP.IDAlmacen =  MP.ALMACEN	THEN tblMovimientosMP.Cantidad ELSE 0 END) AS ENTRADAS,
                                    SUM (CASE WHEN tblMovimientosMP.TipoMov = 1 AND tblMovimientosMP.FechaMov BETWEEN  ? AND ?    
                                            AND  tblMovimientosMP.IDAlmacen =  MP.ALMACEN  THEN tblMovimientosMP.Cantidad ELSE 0 END) AS SALIDAS
                                            
                            FROM (  SELECT IDMP AS IDMP  , tblMateriaPrima.Descripcion  AS MP_DES, MAX(tblInventarioInicialesMP.Fecha) AS FECHA_INV, Cantidad, ? AS ALMACEN
                                    FROM tblInventarioInicialesMP
                                    INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblInventarioInicialesMP.IDMP
                                    WHERE tblInventarioInicialesMP.IDContenedor = ALMACEN 
                                    GROUP BY IDMP ) AS MP
                            LEFT JOIN tblMovimientosMP  ON   tblMovimientosMP.IDMP = MP.IDMP
                            GROUP BY MP.IDMP

                            ) AS PPAL 
                        INNER JOIN tblContenedoresMateriaPrima ON tblContenedoresMateriaPrima.ID =ALMA
                    """
            DaQu=(FechaInicial,FechaInicial,FechaInicial, FechaFinal,FechaInicial, FechaFinal,3,
                FechaInicial,FechaInicial,FechaInicial, FechaFinal,FechaInicial, FechaFinal,4,
                FechaInicial,FechaInicial,FechaInicial, FechaFinal,FechaInicial, FechaFinal,5)
        EnGreñaData=run_query2(self,query,DaQu)
        ListaToTable=[]
        ListaTem=[]
        for ren,RenData in enumerate(EnGreñaData):
            for col,ColData in enumerate(RenData):
                DaToTabla=ColData
                if col > 1 :
                    DaToTabla='{:,.2f}'.format(ColData)
                ListaTem.append(DaToTabla)
            ListaToTable.append(ListaTem)
            ListaTem=[]
        #Llena tabla
        self.Tabla.setRowCount(0)
        for ren,RenData in enumerate(ListaToTable):
            self.Tabla.insertRow(ren)
            for col,ColData in enumerate(RenData):
                self.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(ColData))
        return ListaToTable

    def RepToExcel(self):
        global ListaToTable,FechaInicial,FechaFinal
        AlmacenName=AlmacenData[self.AlmacenCBox.currentIndex()][1]
        pm=['MateriaPrima','CantidadInic','Entradas','Salidas','CantFinal']
        Datos=self.Hacer()
        ListaToTable.insert(0,pm)
        pm=['FechaIni:',FechaInicial,'FechaFin:',FechaFinal,'']
        ListaToTable.insert(0,pm)
        pm=['Almacen:',AlmacenName,'','','']
        ListaToTable.insert(0,pm)
        Encabezado=['   Reporte de Inventario de Materia Prima Por Almacen']
        query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
        ruta=run_query(self,query)
        ruta=ruta[0][2]
        EXCELFILENAME=ruta+"MPRep_"+AlmacenName+"_"+FechaFinal+".xlsx"
        NameWS="Inventario MP  "+ AlmacenName
        DataTableToExcel(self,EXCELFILENAME,[NameWS],[ListaToTable])  
    
    def PrintToPdf(self):
        global ListaToTable
        self.Hacer()
        Almacen=AlmacenData[self.AlmacenCBox.currentIndex()][0]
        if self.RBotTodos.isChecked():
            DesAlmacen='Todos'
        else: DesAlmacen=AlmacenData[self.AlmacenCBox.currentIndex()][1]
        now = QDateTime.currentDateTime().date()
        FechaPre=now.toString(Qt.ISODate)
        f_ini=self.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        TituloRep='Reporte Inventarios Por Almacen'
        TitulosCols=['Almacen','Materia Prima','Cantidad Inicial','Entradas', 'Salidas','Total']
        ListaToTable.insert(0,TitulosCols)
        EncabeData=['Fecha Reporte:',FechaPre,'Almacen:',DesAlmacen,'Fecha Inicial:',FechaInicial,'Fecha Final:',FechaFinal]
        if len(ListaToTable) < 40 :
            r=GeneraReporte(self,1,TituloRep,EncabeData,list(ListaToTable),[''],[''])    
        else : r=GeneraRepMPLargo(self,3,TituloRep,EncabeData,list(ListaToTable))    
        if r== 1 :
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setText(" Error archivo pdf abierto")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_()
            return 
                
    def CalCanRanFechasPorAlm(self,Almacen,MP,FechaInicial,FechaFinal,TipoMov,CalMerma):
        if TipoMov == 0 :
            query= """  SELECT  IDMP,  TipoMov, SUM(tblMovimientosMP.Cantidad)
                    FROM tblMovimientosMP
                    INNER JOIN tblEntradas ON  tblEntradas.ID = tblMovimientosMP.IDFolio 
                    WHERE  tblMovimientosMP.IDAlmacen= ?  AND tblMovimientosMP.IDMP= ? AND (tblEntradas.Fecha BETWEEN ? AND ? ) AND  tblMovimientosMP.TipoMov= ?
                    GROUP BY  tblMovimientosMP.TipoMov
                """
        elif  TipoMov == 1 and CalMerma == 0:
            query= """  SELECT  IDMP,  TipoMov, SUM(tblMovimientosMP.Cantidad)
                        FROM tblMovimientosMP
                        INNER JOIN tblSalidas ON  tblSalidas.ID = tblMovimientosMP.IDFolio 
                        WHERE  tblMovimientosMP.IDAlmacen= ? AND (tblMovimientosMP.IDMP= ?) AND (tblSalidas.Fecha BETWEEN ? AND ? ) 
                                AND tblMovimientosMP.TipoMov= ? AND tblMovimientosMP.IDPresentacion < 90
                        GROUP BY  tblMovimientosMP.TipoMov
                  """
        elif  TipoMov == 1 and CalMerma == 1:
            query= """  SELECT  IDMP,  TipoMov, SUM(tblMovimientosMP.Cantidad)
                        FROM tblMovimientosMP
                        INNER JOIN tblSalidas ON  tblSalidas.ID = tblMovimientosMP.IDFolio 
                        WHERE  tblMovimientosMP.IDAlmacen= ?  AND tblMovimientosMP.IDMP= ? AND (tblSalidas.Fecha BETWEEN ? AND ? ) 
                               AND tblMovimientosMP.TipoMov= ? AND tblMovimientosMP.IDPresentacion = 99
                        GROUP BY  tblMovimientosMP.IDPresentacion
                   """
        DataForQuery=(Almacen,MP,FechaInicial,FechaFinal,TipoMov)
        MovsData=run_query2(self,query,DataForQuery)
        return MovsData
    
class ReporteMovimientoAnimales(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        self.ui=Ui_RepMovAnimalesMovs()
        self.ui.setupUi(self)
        #self.ui.Tabla.setColumnWidth(0,150)
        #self.ui.FechaCapWidget.setDate(QtCore.QDate(2021, 1, 1))
        now = QDateTime.currentDateTime().date()
        self.ui.FechaInicSel.setDate(now)
        self.ui.FechaFinSel.setDate(now)
        self.ui.PBCerrar.clicked.connect(self.close)
        self.ui.RBotTodos.toggled.connect(self.Hacer)
        self.ui.RBotCliente.toggled.connect(self.Hacer)
        self.LlenaCBox()
        self.ui.PBHacer.clicked.connect(self.Hacer)
        self.ui.PBExcel.clicked.connect(self.RepToExcel)
        global ListaCorrales,FechaInicial,FechaFinal
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
       
    def LlenaCBox(self):
       global DataCliente
       query="SELECT ID,Nombre  FROM  tblClientes"
       DataCliente=run_query2(self,query) 
       self.ui.ClienteCBox.clear()
       for i in range(0,len(DataCliente)):
           self.ui.ClienteCBox.addItem(DataCliente[i][1])

    def JalaReporteData(self):
       global DataForRep
       indx=self.ui.ClienteCBox.currentIndex()
       cliente=DataCliente[indx][0]
       f_ini=self.ui.FechaInicSel.date()
       FechaInicial=f_ini.toString(Qt.ISODate)
       f_fin=self.ui.FechaFinSel.date()
       FechaFinal=f_fin.toString(Qt.ISODate)
       query= """
       SELECT *  FROM tblMovimientoAnimales 
       WHERE  IDCliente = ?   AND (Fecha BETWEEN ? AND ? )
       """
       Data=run_query2(self,query,(cliente,FechaInicial,FechaFinal))
       if len(Data)==0 :
           msg=QMessageBox()
           msg.setWindowTitle("Informacion")
           msg.setText("No hay Datos en el periodo")
           msg.setIcon(QMessageBox.Warning)
           x=msg.exec_() 
           return
       return Data
   
    def CalculaCantAnimPorCorral(self):
        ListaTemp=[]
        #Obtiene los corrales que tiene asignados el cliente seleccionado y su fecha de asignacion,
        IDCliente=DataCliente[self.ui.ClienteCBox.currentIndex()][0]
        query= """SELECT  ID, FechaAsigna FROM tblCorrales WHERE AsignACliente= ? AND IDTipoStatus= 'Activo' 
                ORDER BY  FechaAsigna"""
        FechaAsignaCorr=run_query2(self,query,(IDCliente,))
        #  Obtiene las entradas y salidas de cada corral segun los corrales que tiene asignado el cliente, la fecha inicial es la fecha de asigna
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        query= """
            SELECT tblMovimientoAnimales.IDMovimiento, tblCorrales.ID , tblCorrales.Descripcion,SUM(Cantidad), tblCorrales.FechaAsigna 
            FROM tblMovimientoAnimales
            INNER JOIN tblCorrales ON  tblMovimientoAnimales.IDCorral=tblCorrales.ID
            WHERE (Fecha BETWEEN ? AND ? ) AND IDCliente= ? AND IDCorral= ?
            GROUP BY IDCorral, IDMovimiento
            """
        for j in range(0,len(FechaAsignaCorr)):
            IDCorral=FechaAsignaCorr[j][0]
            FechaInicio=FechaAsignaCorr[j][1]
            DataQuery=(FechaInicio,FechaFinal,IDCliente,IDCorral)
            Data=run_query2(self,query,DataQuery)
            for i in Data:
                ListaTemp.append(i)
        return  
        
    def Hacer(self):
        global DataCliente 
        RepData=[]    
        #Data=self.JalaReporteData()
        cliente=DataCliente[self.ui.ClienteCBox.currentIndex()][0]
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        self.ui.Tabla.setRowCount(0)
        if self.ui.RBotTodos.isChecked() :
            query=  """
                    SELECT tblMovimientoAnimales.Folio, tblMovimientoAnimales.Fecha, tblClientes.Nombre, tblCorrales.Descripcion, tblMovimientoAnimales.IDMovimiento,
                           tblMovimientoAnimales.Cantidad 
                    FROM tblMovimientoAnimales
                    INNER JOIN tblClientes ON tblMovimientoAnimales.IDCliente = tblClientes.ID
                    INNER JOIN tblCorrales ON  tblMovimientoAnimales.IDCorral=tblCorrales.ID
                    WHERE  (Fecha BETWEEN ? AND ? )
                    ORDER BY Folio
                   """
            Datos=run_query2(self,query,(FechaInicial,FechaFinal))

        elif self.ui.RBotCliente.isChecked():
            query=  """
                    SELECT tblMovimientoAnimales.Folio, tblMovimientoAnimales.Fecha, tblClientes.Nombre, tblCorrales.Descripcion, tblMovimientoAnimales.IDMovimiento,
                           tblMovimientoAnimales.Cantidad 
                    FROM tblMovimientoAnimales
                    INNER JOIN tblClientes ON tblMovimientoAnimales.IDCliente = tblClientes.ID
                    INNER JOIN tblCorrales ON  tblMovimientoAnimales.IDCorral=tblCorrales.ID
                    WHERE IDCliente= ? AND (Fecha BETWEEN ? AND ? )
                    ORDER BY Folio
                   """
            Datos=run_query2(self,query,(cliente,FechaInicial,FechaFinal))
        TipoMov='Entrada'
        if len(Datos)==0 :
             msg=QMessageBox()
             msg.setWindowTitle("Informacion")
             msg.setText("No hay Datos en el periodo")
             msg.setIcon(QMessageBox.Warning)
             x=msg.exec_() 
             return
        self.ui.Tabla.setRowCount(0)
        for ren in range(0,len(Datos)):
            self.ui.Tabla.insertRow(ren)
            if Datos[ren][4] == 0 :
                TipoMov='Entrada'
            elif Datos[ren][4] == 1 :
                TipoMov='Salida'
            for col in range(0,len(Datos[0])):
                DaToTabla=str(Datos[ren][col])
                if col == 4:
                    DaToTabla=TipoMov
                self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(DaToTabla)))
        return Datos
    
    def RepToExcel(self):
        ClienteName=DataCliente[self.ui.ClienteCBox.currentIndex()][1]
        Datos=self.Hacer()
        query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
        ruta=run_query(self,query)
        ruta=ruta[0][2]
        if self.ui.RBotTodos.isChecked() :
            EXCELFILENAME=ruta+"AnimaRep_"+FechaInicial+"_"+FechaFinal+".xlsx"
        else:
            EXCELFILENAME=ruta+"AnimaRep_"+ClienteName+"_"+FechaFinal+".xlsx"
        DataTableToExcel(self,EXCELFILENAME,["LogMovimientosAnimales"],[Datos])       

class ReporteMovAnimalesRes(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        self.ui= Ui_RepMovAnimaResumen()
        self.ui.setupUi(self)
        self.ui.Tabla.setColumnWidth(0,150)
        self.ui.Tabla.setColumnWidth(1,120)
        self.ui.Tabla.setColumnWidth(2,70)
        self.ui.Tabla.setColumnWidth(4,70)
        #self.ui.Tabla.setColumnWidth(5,150)
        now = QDateTime.currentDateTime().date()
        #self.ui.FechaInicSel.setDate(now)
        self.ui.FechaFinSel.setDate(now)
        self.ui.PBCerrar.clicked.connect(self.close)
        self.ui.PBHacer.clicked.connect(self.Hacer)
        self.ui.PBExcel.clicked.connect(self.RepToExcel)
        #self.ui.ClienteCBox.activated.connect(self.JalaInfoCorrales)
        global FechaInicial,FechaFinal
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate) 
        self.LlenaClienteCbox() 
        self.ui.BanLbl_3.setText("Reporte Animales")  
        
    def LlenaClienteCbox(self):
        global DataCliente
        DataCliente=ClientesConCorralAsignado(self)
        self.ui.ClienteCBox.clear()
        for i in range(0,len(DataCliente)):
            self.ui.ClienteCBox.addItem(DataCliente[i][1])
    
    def JalaCorralesDeCliente(self,Cliente):
        query=  """
                SELECT ID, Clave, Descripcion, FechaAsigna
                FROM tblCorrales
                WHERE AsignACliente= ?
                """
        CorralesAsignaClie=run_query2(self,query,(Cliente,))
        return CorralesAsignaClie
   
    def Hacer(self):
        if self.ui.RBotCliente.isChecked():
            self.RepUnCliente()
        elif self.ui.RBotTodos.isChecked():
            self.RepTodos()

    def RepUnCliente(self):
        Acumu=0
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate) 
        Cliente=DataCliente[self.ui.ClienteCBox.currentIndex()][0]
        query=""" 
                    SELECT TT.CORRAL, TT.FECHA, TT.ENTRADAS, TT.SALIDAS, TT.ENTRADAS-TT.SALIDAS AS TOTA
                    FROM (  SELECT  tblCorrales.Descripcion AS CORRAL ,tblCorrales.FechaAsigna AS FECHA,
                                SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 0 AND tblMovimientoAnimales.Fecha BETWEEN tblCorrales.FechaAsigna AND ? THEN  tblMovimientoAnimales.Cantidad ELSE 0 END) AS ENTRADAS,
                                SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 1 AND tblMovimientoAnimales.Fecha  BETWEEN tblCorrales.FechaAsigna AND ? THEN  tblMovimientoAnimales.Cantidad   ELSE 0 END) AS SALIDAS
                                
                            FROM  tblMovimientoAnimales
                            INNER JOIN tblClientes ON tblClientes.ID = tblMovimientoAnimales.IDCliente 
                            INNER JOIN tblCorrales ON  tblCorrales.ID = tblMovimientoAnimales.IDCorral
                            WHERE  tblMovimientoAnimales.IDCorral IN   (SELECT  tblCorrales.ID   FROM tblCorrales WHERE AsignACliente = ? ) AND tblMovimientoAnimales.IDCliente = ?
                            GROUP BY tblMovimientoAnimales.IDCorral
                            ) AS  TT
                    ORDER BY TT.CORRAL
               """
        ListaRepMovAnimalesRes=run_query2(self,query,(FechaFinal,FechaFinal,Cliente,Cliente))     
        if len(ListaRepMovAnimalesRes) ==0 :
             msg=QMessageBox()
             msg.setWindowTitle("Informacion")
             msg.setText("No hay Datos ")
             msg.setIcon(QMessageBox.Warning)
             x=msg.exec_() 
             return
                
        #  Suma Los totales por corral         
        for ren,DataRen in enumerate(ListaRepMovAnimalesRes):
            Acumu+=DataRen[4]
               
        self.ui.TotalLblVal.setText(str(Acumu))
        self.ui.BanLbl_3.setText("Entradas y Salidas Clientes por Corral ")
        #  ********************  Llena Tabla ***********************
        self.ui.Tabla.setRowCount(0)
        for ren,DataRen in enumerate(ListaRepMovAnimalesRes):
            self.ui.Tabla.insertRow(ren)
            for col,Data in enumerate(DataRen):
                self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(Data)))
        return ListaRepMovAnimalesRes

    def RepTodos(self):
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        query=  """ SELECT TT.CLIENTE, 0, TT.ENTRADAS, TT.SALIDAS, TT.ENTRADAS-TT.SALIDAS AS TOTA
                    FROM ( SELECT  tblClientes.Nombre AS CLIENTE ,
                                SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 0 AND tblMovimientoAnimales.Fecha BETWEEN tblCorrales.FechaAsigna AND ? THEN  tblMovimientoAnimales.Cantidad ELSE 0 END) AS ENTRADAS,
                                SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 1 AND tblMovimientoAnimales.Fecha  BETWEEN tblCorrales.FechaAsigna AND ? THEN  tblMovimientoAnimales.Cantidad   ELSE 0 END) AS SALIDAS
                    FROM  tblMovimientoAnimales
                    INNER JOIN tblClientes ON tblClientes.ID = tblMovimientoAnimales.IDCliente 
                    INNER JOIN tblCorrales ON  tblCorrales.ID = tblMovimientoAnimales.IDCorral
                    WHERE  tblMovimientoAnimales.IDCliente IN   (SELECT  tblCorrales.AsignACliente   FROM tblCorrales WHERE AsignACliente  > 0 )
                    GROUP BY tblMovimientoAnimales.IDCliente 
                    ) AS  TT
                    ORDER BY TT.CLIENTE
                """  
        ListaRepMovAnimalesRes=run_query2(self,query,(FechaFinal,FechaFinal))
        AcumuTotal=0
        # Obtiene acumulado total
        for ren,DataRen in enumerate(ListaRepMovAnimalesRes):
            AcumuTotal+=DataRen[4]
        #  ********************  Llena Tabla ***********************
        self.ui.Tabla.setColumnWidth(0,200)
        self.ui.Tabla.setColumnWidth(1,0)
        self.ui.TotalLblVal.setText(str(AcumuTotal))
        self.ui.BanLbl_3.setText("Entradas y Salidas Todos Los Clientes Con Corral Asignado")
        self.ui.Tabla.setRowCount(0)
        for ren,DataRen in enumerate(ListaRepMovAnimalesRes):
            self.ui.Tabla.insertRow(ren)
            for col,Data in enumerate(DataRen):
                self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(Data)))
        return   ListaRepMovAnimalesRes  
             
    def RepToExcel(self):
        if self.ui.RBotCliente.isChecked():
            Datos=self.RepUnCliente()
            ClienteName=DataCliente[self.ui.ClienteCBox.currentIndex()][1]
           
        elif self.ui.RBotTodos.isChecked():
            Datos=self.RepTodos()
            ClienteName="Todos"
        query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
        ruta=run_query(self,query)
        ruta=ruta[0][2]
        EXCELFILENAME=ruta+"AnimaRep_"+ClienteName+"_"+FechaFinal
        DataTableToExcel(self,EXCELFILENAME,["ResumMvtoAnimales"],[Datos]) 

class RepAnimaClienXCorral(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        self.ui= Ui_RepAnimaCorrClien()
        self.ui.setupUi(self)
        self.ui.Tabla.setColumnWidth(0,200)
        self.ui.Tabla.setColumnWidth(1,100)
        self.ui.Tabla.setColumnWidth(2,80)
        self.ui.Tabla.setColumnWidth(3,80)
        self.ui.Tabla.setColumnWidth(4,80)
        self.ui.Tabla.setColumnWidth(5,80)
        now = QDateTime.currentDateTime().date()
        self.ui.FechaInicSel.setDate(now)
        self.ui.FechaFinSel.setDate(now)
        self.ui.PBCerrar.clicked.connect(self.close)
        self.ui.PBHacer.clicked.connect(self.Hacer)
        self.ui.PBExcel.clicked.connect(self.RepToExcel)
        self.ui.ClienteCBox.activated.connect(self.Hacer)
        global FechaInicial,FechaFinal
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        self.LlenaCBox()
        self.Hacer()
    
    def LlenaCBox(self):
       global DataCliente
       DataCliente=ClientesConCorralAsignado(self)
       self.ui.ClienteCBox.clear()
       for i in range(0,len(DataCliente)):
           self.ui.ClienteCBox.addItem(DataCliente[i][1])
    
    def Hacer(self):
        idcliente=DataCliente[self.ui.ClienteCBox.currentIndex()][0]
        query= " SELECT id, Descripcion, Clave, IDTipoStatus FROM tblCorrales WHERE AsignACliente = ? ORDER BY Descripcion"      
        CorrData=run_query2(self,query,(idcliente,))
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        f_ini_menos1=f_ini.addDays(-1)
        FechaIniMenos1=f_ini_menos1.toString(Qt.ISODate)
        query= """ SELECT  tblClientes.Nombre,tblCorrales.Descripcion,
                SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 0 AND tblMovimientoAnimales.Fecha BETWEEN tblCorrales.FechaAsigna AND ? THEN  tblMovimientoAnimales.Cantidad ELSE 0 END) - 
                SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 1 AND tblMovimientoAnimales.Fecha  BETWEEN tblCorrales.FechaAsigna AND ? THEN  tblMovimientoAnimales.Cantidad   ELSE 0 END) AS INICIAL,
                SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 0 AND tblMovimientoAnimales.Fecha BETWEEN ? AND ? THEN  tblMovimientoAnimales.Cantidad ELSE 0 END) AS ENTRADA,
                SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 1 AND tblMovimientoAnimales.Fecha BETWEEN ? AND ? THEN  tblMovimientoAnimales.Cantidad  ELSE 0 END) AS SALIDA
                FROM  tblMovimientoAnimales
                INNER JOIN tblClientes ON tblClientes.ID = tblMovimientoAnimales.IDCliente 
                INNER JOIN tblCorrales ON  tblCorrales.ID = tblMovimientoAnimales.IDCorral
                WHERE  tblMovimientoAnimales.IDCorral IN   (SELECT  tblCorrales.ID   FROM tblCorrales WHERE AsignACliente = ? ) AND tblMovimientoAnimales.IDCliente = ?
                GROUP BY tblMovimientoAnimales.IDCorral
              """
        RepData=run_query2(self,query,(FechaIniMenos1,FechaIniMenos1,FechaInicial,FechaFinal,FechaInicial,FechaFinal,idcliente,idcliente))
        self.ui.Tabla.setRowCount(0)
        Acumu=0
        ForExcelData=[]
        TemList=[]
        for ren in range(0,len(RepData)):
            self.ui.Tabla.insertRow(ren)
            for col in range(0,len(RepData[ren])):
                Data=RepData[ren][col]
                self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(Data)))
                TemList.append(Data)
            Data=RepData[ren][2]+RepData[ren][3]-RepData[ren][4]
            Acumu+=Data
            self.ui.Tabla.setItem(ren,5, QtWidgets.QTableWidgetItem(str(Data)))
            TemList.append(Data)
            ForExcelData.append(TemList)
            TemList=[]
        self.ui.TotalLblVal.setText(str(Acumu))
        return ForExcelData
        
    def RepToExcel(self):
        Cliente=self.ui.ClienteCBox.currentText()
        Datos=self.Hacer()
        pm=['Cliente','Corral','Cant Inicial','Entradas','Salidas','SubTotal']
        Datos.insert(0,pm)
        query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
        ruta=run_query(self,query)
        ruta=ruta[0][2]
        if self.ui.RBotTodos.isChecked() :
            EXCELFILENAME=ruta+"AnimalRep_"+FechaInicial+"_"+FechaFinal+".xlsx"
        else:
            EXCELFILENAME=ruta+"AnimalRep_"+Cliente+"_"+FechaFinal+".xlsx"
        DataTableToExcel(self,EXCELFILENAME,["Info"],[Datos])       

class RepAnimalesClienteCorraCantAct(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        PathPgm=os.getcwdb()
        path=os.path.join(str(PathPgm,'utf-8'),'GUIs','RepAnimalClienteCorralCantActual.ui')
        uic.loadUi(path,self)

        self.PBCerrar=self.findChild(QPushButton,'PBCerrar')
        self.PBHacer=self.findChild(QPushButton,'PBHacer')
        self.PBToExcel=self.findChild(QPushButton,'PBToExcel')
        self.PBImprimir=self.findChild(QPushButton,'PBImprimir')
        self.Tabla=self.findChild(QTableWidget,'Tabla')
        self.Fecha=self.findChild(QDateEdit,'Fecha')
        self.ClienteCBox=self.findChild(QComboBox,'ClienteCBox')
        RutaIcon=os.path.join(str(PathPgm,'utf-8'),'Iconos','success.ico')
        RutaPrinIcon=os.path.join(str(PathPgm,'utf-8'),'Iconos','printer.png')
        RutaExcelIcon=os.path.join(str(PathPgm,'utf-8'),'Iconos','excel.png')
        icon = QtGui.QIcon(RutaIcon)
        printicon = QtGui.QIcon(RutaPrinIcon)
        excelicon = QtGui.QIcon(RutaExcelIcon)
        self.PBHacer.setIcon(icon)
        self.PBToExcel.setIcon(excelicon)
        self.PBImprimir.setIcon(printicon)
        self.Tabla.setColumnWidth(0,150)
        #self.ui.FechaCapWidget.setDate(QtCore.QDate(2021, 1, 1))
        now = QDateTime.currentDateTime().date()
        self.Fecha.setDate(now)
        self.PBCerrar.clicked.connect(self.close)
        self.PBHacer.clicked.connect(self.Hacer)
        self.PBToExcel.clicked.connect(self.RepToExcel)
        self.PBImprimir.clicked.connect(self.PrintToPdf)
        self.LlenaCBox()
    
    def LlenaCBox(self):
        global DataCliente
        DataCliente=ClientesConCorralAsignado(self)
        self.ClienteCBox.clear()
        for i in range(0,len(DataCliente)):
            self.ClienteCBox.addItem(DataCliente[i][1])
        
    def Hacer(self):
        IDCliente=DataCliente[self.ClienteCBox.currentIndex()][0]
        f_ini=self.Fecha.date()
        Fecha=f_ini.toString(Qt.ISODate)
        Datos=[]
        self.Tabla.setRowCount(0)
        if self.RBotPorCliente.isChecked():
            Datos=self.HacerReporteUnCliente(IDCliente,Fecha)
            self.LlenaTabla(Datos)
           
        elif self.RBotTodos:
            clientes=ClientesConCorralAsignado(self)
            for ren in clientes:
                d=self.HacerReporteUnCliente(ren[0],Fecha)
                for i in d:
                    if len(d) > 0 :
                        Datos.append(i)
            self.LlenaTabla(Datos)
        return Datos

    def LlenaTabla(self,Datos):      
        for ren,RenData in enumerate(Datos):
            self.Tabla.insertRow(ren)
            for col,ColD in enumerate(RenData): 
                item = QTableWidgetItem(str(ColD))
                item.setTextAlignment(Qt.AlignCenter)
                self.Tabla.setItem(ren, col, item)
        
        
    def HacerReporteUnCliente(self,IDCliente,Fecha):
        query=  """ SELECT  tblClientes.Nombre AS CLIENTE, tblCorrales.Descripcion AS CORRAL,
                            SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 0 AND tblMovimientoAnimales.Fecha BETWEEN tblCorrales.FechaAsigna AND ? THEN  tblMovimientoAnimales.Cantidad ELSE 0 END) -
                            SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 1 AND tblMovimientoAnimales.Fecha  BETWEEN tblCorrales.FechaAsigna AND ? THEN  tblMovimientoAnimales.Cantidad   ELSE 0 END) AS SUBTOTAL
                    FROM  tblMovimientoAnimales
                    INNER JOIN tblClientes ON tblClientes.ID = tblMovimientoAnimales.IDCliente 
                    INNER JOIN tblCorrales ON  tblCorrales.ID = tblMovimientoAnimales.IDCorral
                    WHERE  tblMovimientoAnimales.IDCliente = ?
                    GROUP BY tblMovimientoAnimales.IDCorral,CLIENTE 
                """
        Datos=run_query2(self,query,(Fecha,Fecha,IDCliente)) 
        Total=0 ; Data=[]
        for ren in range (0,len(Datos)):
            Data.append(list(Datos[ren]))
            Total+= Data[ren][2]
            Data[ren][2]='{:,}'.format(Data[ren][2])
        if len(Datos) > 0 :
            Data.append(['Total Animales', '', '{:,}'.format(Total)])
        return Data
        
    def RepToExcel(self):
        pass

    def PrintToPdf(self):
        ListaToTable=self.Hacer()
        if self.RBotPorCliente.isChecked():
            Cliente=DataCliente[self.ClienteCBox.currentIndex()][1]
        else: Cliente='Todos'
        f_ini=self.Fecha.date()
        Fecha=f_ini.toString(Qt.ISODate)
        now = QDateTime.currentDateTime().date()
        FechaPre=now.toString(Qt.ISODate)
        f_ini=self.Fecha.date()
        Fecha=f_ini.toString(Qt.ISODate)
        TituloRep='Reporte Animales Cliente Corral'
        TitulosCols=['Cliente','Corral','Cantidad Actual']
        ListaToTable.insert(0,TitulosCols)
        EncabeData=['Fecha Reporte:',FechaPre,'Cliente:',Cliente,'Fecha Inicial:',Fecha,'Fecha Final:',Fecha]
        r=GeneraRepAnimalClienteCorral(self,1,TituloRep,EncabeData,list(ListaToTable))    
        if r== 1 :
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setText(" Error archivo pdf abierto")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_()
            return 
        pass

class RepProdTodos(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        self.ui= Ui_RepProdMovTodos()
        self.ui.setupUi(self)
        self.ui.Tabla.setColumnWidth(0,70)
        self.ui.Tabla.setColumnWidth(1,70)
        self.ui.Tabla.setColumnWidth(2,80)
        self.ui.Tabla.setColumnWidth(3,70)
        self.ui.Tabla.setColumnWidth(4,110)
        self.ui.Tabla.setColumnWidth(5,80)
        self.ui.Tabla.setColumnWidth(6,150)
        self.ui.Tabla.setColumnWidth(7,150)
        self.ui.Tabla.setColumnWidth(8,100)
        #self.ui.FechaCapWidget.setDate(QtCore.QDate(2021, 1, 1))
        now = QDateTime.currentDateTime().date()
        self.ui.FechaInicSel.setDate(now)
        self.ui.FechaFinSel.setDate(now)
        self.ui.AlmacenCBox.activated.connect(self.Hacer)
        self.ui.RBotTodos.toggled.connect(self.Hacer)
        self.ui.RBotAlmacen.toggled.connect(self.Hacer)
        self.ui.PBCerrar.clicked.connect(self.close)
        self.ui.PBHacer.clicked.connect(self.Hacer)
        self.ui.PBExcel.clicked.connect(self.RepToExcel)
        global FechaInicial,FechaFinal
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        self.LlenaCBox()
   
    def LlenaCBox(self):
        global AlmacenData
        query="SELECT ID,Proveedor FROM tblContenedoresProducto "
        AlmacenData=run_query(self,query)
        self.ui.AlmacenCBox.clear()
        for item in AlmacenData :
            j=str(item[1])
            self.ui.AlmacenCBox.addItem(j) 
        self.ui.AlmacenCBox.setCurrentIndex(0)
       
    def Hacer(self):
        if len(AlmacenData) == 0:
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setText("No hay Info De Alamacenes")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_() 
            return
        Almacen=AlmacenData[self.ui.AlmacenCBox.currentIndex()][0]
        AlmacenName=AlmacenData[self.ui.AlmacenCBox.currentIndex()][1]
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
       
        if self.ui.RBotTodos.isChecked() :
            query=  """     SELECT  Folio, FoBas, Fecha, tblProductoMovimientos.TipoMov, tblRecetas.Descripcion , Cantidad, tblContenedoresProducto.Proveedor,
                                    tblClientes.Nombre , tblOperadores.Descripcion, Camion, Chofer, Placas, tblProductoMovimientos.Notas
                            FROM tblProductoMovimientos
                            INNER JOIN tblRecetas ON tblRecetas.ID=tblProductoMovimientos.IDProd
                            INNER JOIN tblClientes ON tblClientes.ID = tblProductoMovimientos.IDCliente
                            INNER JOIN tblContenedoresProducto ON  tblContenedoresProducto.ID = tblProductoMovimientos.IDAlmacen
                            INNER JOIN tblOperadores ON tblOperadores.ID= tblProductoMovimientos.IDPesador
                            WHERE tblProductoMovimientos.Fecha BETWEEN ? AND ? 
                            ORDER BY Folio
                    """
            Datos=run_query2(self,query,(FechaInicial,FechaFinal)) 
        elif self.ui.RBotAlmacen.isChecked():
            query=  """     SELECT  Folio, FoBas, Fecha, tblProductoMovimientos.TipoMov, tblRecetas.Descripcion , Cantidad, tblContenedoresProducto.Proveedor,
                                    tblClientes.Nombre , tblOperadores.Descripcion, Camion, Chofer, Placas, tblProductoMovimientos.Notas
                            FROM tblProductoMovimientos
                            INNER JOIN tblRecetas ON tblRecetas.ID=tblProductoMovimientos.IDProd
                            INNER JOIN tblClientes ON tblClientes.ID = tblProductoMovimientos.IDCliente
                            INNER JOIN tblContenedoresProducto ON  tblContenedoresProducto.ID = tblProductoMovimientos.IDAlmacen
                            INNER JOIN tblOperadores ON tblOperadores.ID= tblProductoMovimientos.IDPesador
                            WHERE (tblProductoMovimientos.Fecha BETWEEN ? AND ?)  AND tblProductoMovimientos.IDAlmacen= ?
                            ORDER BY Folio
                    """
            Datos=run_query2(self,query,(FechaInicial,FechaFinal,Almacen))
        if len(Datos)==0 :
             msg=QMessageBox()
             msg.setWindowTitle("Informacion")
             msg.setText("No hay Datos en el periodo")
             msg.setIcon(QMessageBox.Warning)
             x=msg.exec_() 
             return
        self.ui.Tabla.setRowCount(0)
        for ren in range(0,len(Datos)):
            self.ui.Tabla.insertRow(ren)
            if Datos[ren][3] == 0 :
                TipoMov='Entrada'
            elif Datos[ren][3] == 1 :
                TipoMov='SalPorBas'
            elif Datos[ren][3] == 2 :
                TipoMov='SalPorSurtido'
            for col in range(0,len(Datos[0])):
                DaToTabla=str(Datos[ren][col])
                if col == 3:
                    DaToTabla=TipoMov
                if col == 5:
                    DaToTabla='{:,}'.format(Datos[ren][col])
                self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(DaToTabla)))
        return Datos
    
    def RepToExcel(self):
        AlmacenName=AlmacenData[self.ui.AlmacenCBox.currentIndex()][1]
        Datos=self.Hacer()
        query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
        ruta=run_query(self,query)
        ruta=ruta[0][2]
        if self.ui.RBotTodos.isChecked() :
            EXCELFILENAME=ruta+"ProdRep_"+FechaInicial+"_"+FechaFinal+".xlsx"
        else:
            EXCELFILENAME=ruta+"ProdRep_"+AlmacenName+"_"+FechaFinal+".xlsx"
        DataTableToExcel(self,EXCELFILENAME,["LogMovimientosProductos"],[Datos])       

class  RepProdActual(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        self.ui= Ui_RepProdMovActual()
        self.ui.setupUi(self)
        self.ui.Tabla.setColumnWidth(0,150)
        self.ui.Tabla.setColumnWidth(1,150)
        self.ui.Tabla.setColumnWidth(2,80)
        self.ui.Tabla.setColumnWidth(3,80)
        self.ui.Tabla.setColumnWidth(4,80)
        #self.ui.FechaCapWidget.setDate(QtCore.QDate(2021, 1, 1))
        now = QDateTime.currentDateTime().date()
        #self.ui.FechaInicSel.setDate(now)
        self.ui.FechaFinSel.setDate(now)
        self.ui.AlmacenCBox.activated.connect(self.Hacer)
        self.ui.PBCerrar.clicked.connect(self.close)
        self.ui.PBHacer.clicked.connect(self.Hacer)
        self.ui.PBExcel.clicked.connect(self.RepToExcel)
        global FechaFinal
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        self.LlenaCBox()
   
    def LlenaCBox(self):
        global AlmacenData, ProdData
        query="SELECT ID,Proveedor FROM tblContenedoresProducto WHERE Estatus=1"
        AlmacenData=run_query(self,query)
        self.ui.AlmacenCBox.clear()
        for item in AlmacenData :
            j=str(item[1])
            self.ui.AlmacenCBox.addItem(j) 
        self.ui.AlmacenCBox.setCurrentIndex(0)
          
    def Hacer(self):
        global ListaToTable
        ListaToTable=[]
        Lista=[]
        AlmaCBoxIdx=self.ui.AlmacenCBox.currentIndex()
        Almacen=AlmacenData[self.ui.AlmacenCBox.currentIndex()][0]
        ListaToTable=ObtienePrductosPorAlmacen(self,Almacen,AlmaCBoxIdx,0)
        if type(ListaToTable) != type(Lista):
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setText("Faltan Datos, Revisa Inventarios Inciales ")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_() 
            return
        #Llena tabla
        self.ui.Tabla.setRowCount(0)
        for ren in range(0,len(ListaToTable)):
            self.ui.Tabla.insertRow(ren)
            for col in range(0,len(ListaToTable[0])):
                DaToTabla=str(ListaToTable[ren][col])
                self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(DaToTabla)))
        return DaToTabla
        
    def RepToExcel(self):
        AlmacenName=AlmacenData[self.ui.AlmacenCBox.currentIndex()][1]
        Datos=self.Hacer()
        query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
        ruta=run_query(self,query)
        ruta=ruta[0][2]
        EXCELFILENAME=ruta+"ProductosRep_"+AlmacenName+"_"+FechaFinal+".xlsx"
        DataTableToExcel(self,EXCELFILENAME,["LogMovimientosProductos"],[ListaToTable])       
    
class RepAlmaPorProducto(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        self.ui= Ui_RepAlmaxProdActual()
        self.ui.setupUi(self)
        self.ui.Tabla.setColumnWidth(0,150)
        self.ui.Tabla.setColumnWidth(1,150)
        self.ui.Tabla.setColumnWidth(2,80)
        self.ui.Tabla.setColumnWidth(3,80)
        self.ui.Tabla.setColumnWidth(4,80)
        #self.ui.FechaCapWidget.setDate(QtCore.QDate(2021, 1, 1))
        now = QDateTime.currentDateTime().date()
        #self.ui.FechaInicSel.setDate(now)
        self.ui.FechaFinSel.setDate(now)
        self.ui.ProductoCBox.activated.connect(self.Hacer)
        self.ui.PBCerrar.clicked.connect(self.close)
        self.ui.PBHacer.clicked.connect(self.Hacer)
        self.ui.PBExcel.clicked.connect(self.RepToExcel)
        global FechaFinal
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        self.LlenaProductoCbox()
    
    def LlenaProductoCbox(self):
        global DataProducto
        query="SELECT ID,Descripcion  FROM  tblProductos"
        DataProducto=run_query2(self,query) 
        self.ui.ProductoCBox.clear()
        for i in range(0,len(DataProducto)):
            self.ui.ProductoCBox.addItem(DataProducto[i][1])

    def BuscaEnLista(self,Tabla,Col,Dato):
        query="SELECT  "+Col +"  FROM  "+Tabla +"  WHERE ID= ? " 
        Res=run_query2(self,query,(Dato,)) 
        return Res[0][0]
   
    def Hacer(self):
        global ListaToTable
        ProdID=DataProducto[self.ui.ProductoCBox.currentIndex()][0]
        query= "SELECT ID FROM tblContenedoresProducto WHERE Estatus=1"
        ProdContene=run_query2(self,query)
        ProdConteneList=[]
        LogData=[]
        ListaProdEnAlma=[]
        ListaToTable=[]
        ListaTemp=[]
        for j in range(0,len(ProdContene)):
            ProdConteneList.append(ProdContene[j][0])
        for k in range(0,len(ProdConteneList)):
            Lista=ObtienePrductosPorAlmacen(self,ProdConteneList[k],1,1)
            if type(ListaToTable) != type(Lista):
                msg=QMessageBox()
                msg.setWindowTitle("Informacion")
                msg.setText("Faltan Datos, Revisa Inventarios Inciales ")
                msg.setIcon(QMessageBox.Warning)
                x=msg.exec_() 
                return
            for j in range(0,len(Lista)):
                LogData.append(Lista[j])
        for j in range(0,len(LogData)):
            if LogData[j][1] == ProdID :
                ListaProdEnAlma.append(LogData[j])
        # Hace Lista para Tabla y excel
        if len(ListaProdEnAlma) == 0:
             msg=QMessageBox()
             msg.setWindowTitle("Informacion")
             msg.setText("No hay Datos en el periodo")
             msg.setIcon(QMessageBox.Warning)
             x=msg.exec_() 
             return
        NumCols=len(ListaProdEnAlma[0])
        for h in range(0,len(ListaProdEnAlma)):
            for k in range (0, NumCols ):
                if k == 0:
                    Da=self.BuscaEnLista('tblContenedoresProducto','Proveedor',ListaProdEnAlma[h][0])
                elif k ==1 :
                    Da=self.BuscaEnLista('tblProductos','Descripcion',ListaProdEnAlma[h][1])
                else:
                    Da=ListaProdEnAlma[h][k]
                ListaTemp.append(Da)
            ListaToTable.append(ListaTemp)
            ListaTemp=[]
        #Datos a Tabla Qt
        TotalProducto=0
        self.ui.Tabla.setRowCount(0)
        for ren in range(0,len(ListaToTable)):
            self.ui.Tabla.insertRow(ren)
            for col in range(0,len(ListaToTable[0])):
                DaToTabla=str(ListaToTable[ren][col])
                self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(DaToTabla)))
            #EsteMov=ListaToTable[ren][5]
            #TotalProducto=int(TotalProducto)+int(EsteMov)
        #self.ui.TotalLblVal.setText('{:,}'.format(TotalProducto))
        return DaToTabla

    def RepToExcel(self):
        ProdName=DataProducto[self.ui.ProductoCBox.currentIndex()][1]
        Datos=self.Hacer()
        query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
        ruta=run_query(self,query)
        ruta=ruta[0][2]
        EXCELFILENAME=ruta+"RepProdTot_"+ProdName+"_"+FechaFinal+".xlsx"
        DataTableToExcel(self,EXCELFILENAME,["TotalesProd"],[ListaToTable])  

class RepVentMovimientos(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        self.ui=Ui_RepVentasMovs()
        self.ui.setupUi(self)
        self.ui.PBCerrar.clicked.connect(self.close)
        self.ui.Tabla.setColumnWidth(0,70)
        self.ui.Tabla.setColumnWidth(1,70)
        self.ui.Tabla.setColumnWidth(2,100)
        self.ui.Tabla.setColumnWidth(3,100)
        self.ui.Tabla.setColumnWidth(4,180)
        self.ui.Tabla.setColumnWidth(5,180)
        self.ui.Tabla.setColumnWidth(6,150)
        self.ui.Tabla.setColumnWidth(7,70)
        self.ui.Tabla.setColumnWidth(8,100)
        self.ui.Tabla.setColumnWidth(9,70)
        self.ui.Tabla.setColumnWidth(10,200)
        now = QDateTime.currentDateTime().date()
        self.ui.FechaInicSel.setDate(now)
        self.ui.FechaFinSel.setDate(now)
        #self.ui.AlmacenCBox.activated.connect(self.Hacer)
        #self.ui.RBotTodos.toggled.connect(self.Hacer)
        #self.ui.RBotAlmacen.toggled.connect(self.Hacer)
        self.ui.PBHacer.clicked.connect(self.Hacer)
        self.ui.PBExcel.clicked.connect(self.RepToExcel)
        global FechaInicial,FechaFinal
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
       
    def Hacer(self):
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)

        if self.ui.RBotTodos.isChecked() :
            query = """ SELECT   tblProductoMovimientos.Folio, "" ,tblProductoMovimientos.Fecha AS FECHA, "Producto", tblClientes.Nombre,tblContenedoresProducto.Proveedor, tblProductos.Descripcion,
                                tblProductoMovimientos.Cantidad, tblTipoPresentacion.Descripcion, tblProductoMovimientos.Referencia, tblProductoMovimientos.Notas
                        FROM  tblProductoMovimientos
                        INNER JOIN tblClientes ON tblClientes.ID = tblProductoMovimientos.IDCliente
                        INNER JOIN tblContenedoresProducto ON tblContenedoresProducto.ID = tblProductoMovimientos.IDAlmacen
                        INNER JOIN  tblProductos  ON  tblProductos.ID = tblProductoMovimientos.IDProd
                        INNER JOIN tblTipoPresentacion ON  tblTipoPresentacion.ID = tblProductoMovimientos.IDPresentacion
                        WHERE  tblProductoMovimientos.TipoMov = 1 AND tblTipoPresentacion.ID < 5 AND tblProductoMovimientos.Fecha BETWEEN ? AND ?
                        UNION
                        SELECT tblMovimientosMP.Folio, "", tblMovimientosMP.FechaMov AS FECHA, "MateriaPrima", tblClientes.Nombre, tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion,
                                tblMovimientosMP.Cantidad, tblTipoPresentacion.Descripcion, tblMovimientosMP.Referencia, tblMovimientosMP.Notas
                        FROM tblMovimientosMP
                        INNER JOIN tblClientes ON tblClientes.ID = tblMovimientosMP.IDClienProve
                        INNER JOIN tblContenedoresMateriaPrima ON tblContenedoresMateriaPrima.ID =tblMovimientosMP.IDAlmacen
                        INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblMovimientosMP.IDMP
                        INNER JOIN tblTipoPresentacion ON  tblTipoPresentacion.ID = tblMovimientosMP.IDPresentacion
                        WHERE tblMovimientosMP.TipoMov = 1  AND tblTipoPresentacion.ID < 5 AND tblMovimientosMP.FechaMov BETWEEN ? AND ?
                        ORDER BY FECHA

                    """
            Datos=run_query2(self,query,(FechaInicial,FechaFinal,FechaInicial,FechaFinal))  
        elif  self.ui.RBotProd.isChecked() :
            query = """  SELECT   tblProductoMovimientos.Folio, "" ,tblProductoMovimientos.Fecha AS FECHA, "Producto", tblClientes.Nombre,tblContenedoresProducto.Proveedor, tblProductos.Descripcion,
                                tblProductoMovimientos.Cantidad, tblTipoPresentacion.Descripcion, tblProductoMovimientos.Referencia, tblProductoMovimientos.Notas
                        FROM  tblProductoMovimientos
                        INNER JOIN tblClientes ON tblClientes.ID = tblProductoMovimientos.IDCliente
                        INNER JOIN tblContenedoresProducto ON tblContenedoresProducto.ID = tblProductoMovimientos.IDAlmacen
                        INNER JOIN  tblProductos  ON  tblProductos.ID = tblProductoMovimientos.IDProd
                        INNER JOIN tblTipoPresentacion ON  tblTipoPresentacion.ID = tblProductoMovimientos.IDPresentacion
                        WHERE  tblProductoMovimientos.TipoMov = 1 AND tblTipoPresentacion.ID <> 2 AND tblProductoMovimientos.Fecha BETWEEN ? AND ?
                        ORDER BY FECHA
                   """
            Datos=run_query2(self,query,(FechaInicial,FechaFinal)) 
        elif self.ui.RBotMP.isChecked() :
            query = """ SELECT tblMovimientosMP.Folio, "", tblMovimientosMP.FechaMov AS FECHA, "MateriaPrima", tblClientes.Nombre, tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion,
                                tblMovimientosMP.Cantidad, tblTipoPresentacion.Descripcion, tblMovimientosMP.Referencia, tblMovimientosMP.Notas
                        FROM tblMovimientosMP
                        INNER JOIN tblClientes ON tblClientes.ID = tblMovimientosMP.IDClienProve
                        INNER JOIN tblContenedoresMateriaPrima ON tblContenedoresMateriaPrima.ID =tblMovimientosMP.IDAlmacen
                        INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblMovimientosMP.IDMP
                        INNER JOIN tblTipoPresentacion ON  tblTipoPresentacion.ID = tblMovimientosMP.IDPresentacion
                        WHERE tblMovimientosMP.TipoMov = 1  AND tblTipoPresentacion.ID <> 2 AND tblMovimientosMP.FechaMov BETWEEN ? AND ?
                        ORDER BY FECHA
                    """
            Datos=run_query2(self,query,(FechaInicial,FechaFinal)) 
        if len(Datos)==0 :
             msg=QMessageBox()
             msg.setWindowTitle("Informacion")
             msg.setText("No hay Datos en el periodo")
             msg.setIcon(QMessageBox.Warning)
             x=msg.exec_() 
             return
        self.ui.Tabla.setRowCount(0)
        for ren,RenData in enumerate(Datos):
            self.ui.Tabla.insertRow(ren)
            for col,item in enumerate(RenData):
                 if col ==7 :
                      item='{:,.2f}'.format(item)
                 self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(item)))
        pm=['Folio','FolioBas','Fecha','TipoMaterial','Cliente','Almacen','Material','Cantidad','Presentacion','Referencia','Notas']
        Datos.insert(0,pm)
        return Datos
    
    def RepToExcel(self):
        Datos=self.Hacer()
        query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
        ruta=run_query(self,query)
        ruta=ruta[0][2]
        EXCELFILENAME=ruta+"ReporteVentasSalidas_"+"_"+FechaFinal+".xlsx"
        DataTableToExcel(self,EXCELFILENAME,["LogMovimientosSalida"],[Datos])       
 
class RepAlmaProdPresen(QDialog):
    def __init__(self,Data):
        QDialog.__init__(self)
        self.ui=Ui_RepVenAlmaProdPresenta()
        self.ui.setupUi(self)
        self.ui.PBCerrar.clicked.connect(self.close)
        self.ui.Tabla.setColumnWidth(0,200)
        self.ui.Tabla.setColumnWidth(1,200)
        self.ui.Tabla.setColumnWidth(2,70)
        self.ui.Tabla.setColumnWidth(3,70)
        self.ui.Tabla.setColumnWidth(4,70)
        self.ui.Tabla.setColumnWidth(5,70)
        now = QDateTime.currentDateTime().date()
        self.ui.FechaInicSel.setDate(now)
        self.ui.FechaFinSel.setDate(now)
        self.ui.PBHacer.clicked.connect(self.Hacer)
        self.ui.PBExcel.clicked.connect(self.RepToExcel)
        global FechaInicial,FechaFinal,TipoRep
        TipoRep=Data
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        if TipoRep == 2:
            self.ui.Tabla.setHorizontalHeaderLabels(('Cliente', ))
            self.setWindowTitle("Reporte Cliente Producto Presentacion")
            
    def Hacer(self):
        f_ini=self.ui.FechaInicSel.date()
        FechaInicial=f_ini.toString(Qt.ISODate)
        f_fin=self.ui.FechaFinSel.date()
        FechaFinal=f_fin.toString(Qt.ISODate)
        if TipoRep == 1:
            query= """  SELECT  tblContenedoresProducto.Proveedor,tblProductos.Descripcion,
                            SUM(case WHEN  tblTipoPresentacion.ID = 1  THEN  tblProductoMovimientos.Cantidad ELSE 0 END) AS ENSACADO,
		                    SUM(case WHEN  tblTipoPresentacion.ID = 2  THEN  tblProductoMovimientos.Cantidad ELSE 0 END) AS SERVIDO,
		                    SUM(case WHEN  tblTipoPresentacion.ID = 3  THEN  tblProductoMovimientos.Cantidad  ELSE 0 END) AS GRANEL,
		                    SUM ( tblProductoMovimientos.Cantidad) AS SUBTOTAL
                    FROM tblProductoMovimientos
                    INNER JOIN tblContenedoresProducto ON tblContenedoresProducto.ID = tblProductoMovimientos.IDAlmacen
                    INNER JOIN tblClientes ON tblClientes.ID = tblProductoMovimientos.IDCliente 
                    INNER JOIN tblProductos ON tblProductos.ID = tblProductoMovimientos.IDProd
                    INNER JOIN tblTipoPresentacion ON  tblTipoPresentacion.ID = tblProductoMovimientos.IDPresentacion
                    WHERE tblProductoMovimientos.Fecha BETWEEN ? AND ?
                    GROUP BY   tblContenedoresProducto.Proveedor, tblProductos.ID
            
               """
        elif TipoRep ==2 :
            query= """  SELECT  tblClientes.Nombre,tblProductos.Descripcion,
                            SUM(case WHEN  tblTipoPresentacion.ID = 1  THEN  tblProductoMovimientos.Cantidad ELSE 0 END) AS ENSACADO,
		                    SUM(case WHEN  tblTipoPresentacion.ID = 2  THEN  tblProductoMovimientos.Cantidad ELSE 0 END) AS SERVIDO,
		                    SUM(case WHEN  tblTipoPresentacion.ID = 3  THEN  tblProductoMovimientos.Cantidad ELSE 0 END) AS GRANEL,
		                    SUM ( tblProductoMovimientos.Cantidad) AS SUBTOTAL
                    FROM tblProductoMovimientos
                    INNER JOIN tblContenedoresProducto ON tblContenedoresProducto.ID = tblProductoMovimientos.IDAlmacen
                    INNER JOIN tblClientes ON tblClientes.ID = tblProductoMovimientos.IDCliente 
                    INNER JOIN tblProductos ON tblProductos.ID = tblProductoMovimientos.IDProd
                    INNER JOIN tblTipoPresentacion ON  tblTipoPresentacion.ID = tblProductoMovimientos.IDPresentacion
                    WHERE tblProductoMovimientos.Fecha BETWEEN ? AND ?
                    GROUP BY   tblClientes.Nombre, tblProductos.ID
                    
               """
        Datos=run_query2(self,query,(FechaInicial,FechaFinal)) 
        if len(Datos)==0 :
             msg=QMessageBox()
             msg.setWindowTitle("Informacion")
             msg.setText("No hay Datos en el periodo")
             msg.setIcon(QMessageBox.Warning)
             x=msg.exec_() 
             return
        self.ui.Tabla.setRowCount(0)
        for ren,RenData in enumerate(Datos):
            self.ui.Tabla.insertRow(ren)
            for col,item in enumerate(RenData):
                if col > 1:
                    item='{:,.2f}'.format(item)
                self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(item)))
        pm=['Almacen','Producto','Ensacado','Servido','Granel','SubTotal']
        Datos.insert(0,pm)
        return Datos
    
    def RepToExcel(self):
        Datos=self.Hacer()
        query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
        ruta=run_query(self,query)
        ruta=ruta[0][2]
        EXCELFILENAME=ruta+"RepVen_"+"_"+FechaFinal+".xlsx"
        DataTableToExcel(self,EXCELFILENAME,["ReVenPorAlmaProPres"],[Datos])
        
class Configs(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        path=os.getcwdb()
        path=os.path.join(str(path,'utf-8'),'GUIs','Configs.ui')
        uic.loadUi(path,self)
        self.PBCerrar=self.findChild(QPushButton,'PBCerrar')
        self.PBGuardar=self.findChild(QPushButton,'PBGuardar')
        self.PBCerrar.clicked.connect(self.close)
        self.PBGuardar.clicked.connect(self.Guardar)
        global Data
        query="SELECT  *  FROM  tblConfigs   "
        Data=run_query(self,query)
        self.RepClieCampo=self.findChild(QLineEdit,'RepClieCampo')
        self.RutaExcelCampo=self.findChild(QLineEdit,'RutaExcelCampo')
        self.RutaAcrobatCampo=self.findChild(QLineEdit,'RutaAcrobatCampo')
        self.RutaExcelCampo.setText(Data[0][2])
        self.RepClieCampo.setText(Data[1][2])
        self.RutaAcrobatCampo.setText(Data[2][2])
           
    def Guardar(self):
        global Data
        ruta=self.RutaExcelCampo.text()
        query = "UPDATE  tblConfigs SET Data =?  WHERE ID=? "
        run_query2(self,query,(ruta,1))
        ruta=self.RepClieCampo.text()
        run_query2(self,query,(ruta,2))
        ruta=self.RutaAcrobatCampo.text()
        run_query2(self,query,(ruta,3))
        msg=QMessageBox()
        msg.setWindowTitle("Informacion")
        msg.setText("Cobfiguraciones Grabadas satisfactoriamente")
        msg.setIcon(QMessageBox.Warning)
        x=msg.exec_()
        self.close()

#   Funciones  comunes.............................

def JalaMovsDeSurtidos(self,cliente,clienteDescrip,FechaIncial,FechaFinal):
        if cliente > 0 :
            query= """
        	SELECT DISTINCT tblDetalleOrdenSurtido.Folio, tblOrdenesSurtido.NoOrden,  tblClientes.Nombre , tblProductos.Descripcion,
                    tblRecetas.Descripcion, tblCorrales.Descripcion,  tblDetalleOrdenSurtido.CantSolicitada, tblDetalleOrdenSurtido.CantSurtida,
	                tblDetalleOrdenSurtido.FechaSol, tblDetalleOrdenSurtido.Fecha
            FROM tblDetalleOrdenSurtido
            INNER JOIN tblOrdenesSurtido ON tblDetalleOrdenSurtido.IDOrden=tblOrdenesSurtido.ID	
            INNER JOIN tblRecetas ON tblOrdenesSurtido.IDProducto=tblRecetas.IDProd	
            INNER JOIN tblClientes ON tblDetalleOrdenSurtido.IDCliente=tblClientes.ID 
            INNER JOIN tblProductos ON tblRecetas.IDProd=tblProductos.ID
            INNER JOIN tblCorrales ON tblDetalleOrdenSurtido.IDCorral=tblCorrales.ID
            WHERE  tblDetalleOrdenSurtido.IDCliente = ?  AND  (tblDetalleOrdenSurtido.Fecha BETWEEN ? AND ? )
            GROUP BY tblDetalleOrdenSurtido.Folio
            ORDER BY  tblDetalleOrdenSurtido.Folio
	        """
            Datos=run_query2(self,query,(cliente,FechaInicial,FechaFinal))
        else   : 
            query= """
        	SELECT DISTINCT tblDetalleOrdenSurtido.Folio, tblOrdenesSurtido.NoOrden,  tblClientes.Nombre , tblProductos.Descripcion,
                    tblRecetas.Descripcion, tblCorrales.Descripcion,  tblDetalleOrdenSurtido.CantSolicitada, tblDetalleOrdenSurtido.CantSurtida,
	                tblDetalleOrdenSurtido.FechaSol, tblDetalleOrdenSurtido.Fecha
            FROM tblDetalleOrdenSurtido
            INNER JOIN tblOrdenesSurtido ON tblDetalleOrdenSurtido.IDOrden=tblOrdenesSurtido.ID	
            INNER JOIN tblRecetas ON tblOrdenesSurtido.IDProducto=tblRecetas.IDProd	
            INNER JOIN tblClientes ON tblDetalleOrdenSurtido.IDCliente=tblClientes.ID 
            INNER JOIN tblProductos ON tblRecetas.IDProd=tblProductos.ID
            INNER JOIN tblCorrales ON tblDetalleOrdenSurtido.IDCorral=tblCorrales.ID
            WHERE  tblDetalleOrdenSurtido.Fecha BETWEEN ? AND ? 
            GROUP BY tblDetalleOrdenSurtido.Folio
            ORDER BY  tblDetalleOrdenSurtido.Folio
	        """       
            Datos=run_query2(self,query,(FechaInicial,FechaFinal))

def LlenaTabla(self,Lista):
    pass   

def ClientesConCorralAsignado(self):
    query= """  SELECT ID,Nombre  FROM  tblClientes WHERE tblClientes.ID 
                IN ( SELECT tblCorrales.AsignACliente FROM tblCorrales WHERE tblCorrales.AsignACliente > 0 )
                ORDER BY Nombre
           """
    DataCliente=run_query2(self,query)
    return DataCliente

def ProductosQueSeSirven(self,tipo):
    Lista=[]
    if tipo == 2 :
        query="SELECT Descripcion FROM  tblProductos WHERE IDTipoStatus='Activo' and SeSirve= 'Si' ORDER BY Descripcion"
    elif tipo == 1:
        query="SELECT ID FROM  tblProductos WHERE IDTipoStatus='Activo' and SeSirve= 'Si' ORDER BY Descripcion"
    ProdData=run_query(self,query)
    for ren,item in  enumerate(ProdData):
        Lista.append(item[0])
    return Lista



def JalaFechaAsignaCorral(self,IDCorral):
    query="SELECT FechaAsigna  FROM  tblCorrales WHERE  ID=? "
    FechaAsigna=run_query1SinMsg(self,query,(IDCorral,)) 
    FechaAsigna=FechaAsigna[0]
    return FechaAsigna

#  Jala Movimientos de animales en rango de fecha y suma y resta las del mismo dia
def JalaMovsEnRangFechas(self,IDCorral,FechaInicial,FechaFinal):
    #query="SELECT  Fecha, IDMovimiento, Cantidad  FROM  tblMovimientoAnimales WHERE    IDCorral=?  AND (Fecha BETWEEN ? AND ? )  ORDER BY Fecha"
    query="""SELECT  Fecha,  
                     SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 0  THEN  tblMovimientoAnimales.Cantidad ELSE 0 END) -
                     SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 1  THEN  tblMovimientoAnimales.Cantidad  ELSE 0 END) AS SUMA
            FROM  tblMovimientoAnimales 
            WHERE    IDCorral=?  AND (Fecha BETWEEN ? AND ? )  
            GROUP BY tblMovimientoAnimales.Fecha
            ORDER BY Fecha
          """
    DataForQuery=(IDCorral,FechaInicial,FechaFinal)
    ListaData=run_query2(self,query,DataForQuery)
    return ListaData

def JalaCorralesAsignaCliente(self,IDCliente):
    Lista=[]
    query= """ SELECT tblCorrales.ID FROM tblCorrales WHERE tblCorrales.AsignACliente = ?"""
    ListaCorralesCliente=run_query2(self,query,(IDCliente,))
    for ren,item in  enumerate(ListaCorralesCliente):
        Lista.append(item[0])
    return Lista
#  Genera una lista de fechas a partir de una inicial y final
def GeneraListaFechas(self,FechaInicial,FechaFinal):
    Lista=[]
    query=""" WITH RECURSIVE ran(x) AS ( 
            SELECT ? 
                UNION ALL 
            SELECT DATE(x,'1 day')  FROM ran WHERE x < ? 
        )
        SELECT x AS DIA FROM ran
         """
    ListaFechaRango=run_query2(self,query,(FechaInicial,FechaFinal,))
    for ren,item in  enumerate(ListaFechaRango):
        Lista.append(item[0])
    return Lista
#   Obtiene  la cantidad de animales en el corral desde la fecha de asignacion hasta la fecha proporcionada

def CantidadActualAnimales(self,IDCorral,fecha):
    query=  """ SELECT  SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 0  THEN  tblMovimientoAnimales.Cantidad ELSE 0 END) -
                       SUM(case WHEN  tblMovimientoAnimales.IDMovimiento = 1  THEN  tblMovimientoAnimales.Cantidad  ELSE 0 END) AS SUMA
                FROM tblMovimientoAnimales 
                WHERE tblMovimientoAnimales.IDCorral= ?  AND tblMovimientoAnimales.Fecha BETWEEN 
                (SELECT FechaAsigna FROM tblCorrales WHERE ID=? ) AND ?
            """
    Cantidad=run_query2(self,query,(IDCorral,IDCorral,fecha))
    if Cantidad[0][0] is None :
        return -1
    else:
        return Cantidad[0][0]
#  Saca el rango de fechas de cuando se asigno y libero un corral con un cliente, si el segundo dato es 0 significa que sigue asignado
#  al cliente. si es diferente de 0 es la ultima fecha cuando se libero a este cliente
def RangoFechasOcupaCorral(self,IDCorral,IDCliente):
    query= """  SELECT FECHAS.FECHA_ASIGNA, 
                    (SELECT (CASE WHEN FECHAS.FECHA_LIBERA > FECHAS.FECHA_ASIGNA THEN FECHAS.FECHA_LIBERA ELSE 0 END)) AS FECHA_LIBERA
                FROM (
                        SELECT 
                        MAX ( CASE WHEN tblAsignaCorrales.IDCorral = ? AND tblAsignaCorrales.IDCliente= ?  AND tblAsignaCorrales.TipoMov = 1  
                        THEN tblAsignaCorrales.Fecha ELSE 0 END) AS FECHA_ASIGNA,
	                    MAX ( CASE WHEN tblAsignaCorrales.IDCorral = ? AND tblAsignaCorrales.IDCliente= ?  AND tblAsignaCorrales.TipoMov = 0  
                        THEN tblAsignaCorrales.Fecha ELSE 0 END) AS FECHA_LIBERA
                        FROM tblAsignaCorrales 
                     ) AS FECHAS
            """
    Datos=run_query2(self,query,(IDCorral,IDCliente,IDCorral,IDCliente))
    return Datos

#  Calcula los dias animal en rango de fecha de un solo corral
def CalculaDiasAnimal(self,IDCliente,IDCorral,FechaInicial,FechaFinal):
    ListaTem=[]
    ListaForRet=[]
    FechasOcupa=RangoFechasOcupaCorral(self,IDCorral,IDCliente)
    if FechasOcupa[0][1] == 0:
        pass
    else :
        if FechasOcupa[0][1] < FechaFinal :
            FechaFinal=FechasOcupa[0][1]
    # -----------------------------------------------------------------------
    ListaFechas=GeneraListaFechas(self,FechaInicial,FechaFinal)
    AcuDiasAnimal=0
    for i, fecha in enumerate(ListaFechas):
            ListaTem.append(fecha)
            ListaTem.append(CantidadActualAnimales(self,IDCorral,fecha))
            ListaForRet.append(ListaTem)
            ListaTem=[]
    for d, item in enumerate(ListaForRet):
        if int(item[1]) > -1 :
           AcuDiasAnimal=AcuDiasAnimal+int(item[1])
    return AcuDiasAnimal

#  Genera una lista de fechas con la cantidad de animales de cada corral asignado al cliente en esa fecha.
def CalculaDiasAnimalCorral(self,IDCliente,FechaInicial,FechaFinal):
    ListaTem=[]
    ListaForRet=[]
    ListaFechas=GeneraListaFechas(self,FechaInicial,FechaFinal)
    ListaCorrales=JalaCorralesAsignaCliente(self,IDCliente)
    NoDias=0
    AcuDiasAnimal=0
    for i, fecha in enumerate(ListaFechas):
        for j , corral in enumerate(ListaCorrales):
            ListaTem.append(fecha)
            ListaTem.append(corral)
            ListaTem.append(CantidadActualAnimales(self,corral,fecha))
            ListaForRet.append(ListaTem)
            ListaTem=[]
    return AcuDiasAnimal,ListaForRet    

def DesglosaIngredientesProds(self,IDProducto,CantProd):
    self.IDProducto=IDProducto
    self.CantProd=CantProd
    query="SELECT  IDMateriaPrima, Porcentaje   FROM  tblProductosMateriaPrima  WHERE    IDProducto=?  "
    DataForQuery=(IDProducto,)
    Receta=run_query2(self,query,DataForQuery)
    ListaCants=[]
    Cant=[]
    for r in range(0,len(Receta)):
       Cant.append(Receta[r][0])
       CantIng=int(CantProd)*int(Receta[r][1])/100
       Cant.append(CantIng)
       ListaCants.append(Cant)
       Cant=[]
    return ListaCants

def ObtienePrductosPorAlmacen(self,AlmacenProd,AlCBoxIdx,Modo):
    LisTemp=[]
    InvInicData=[]
    EntradasData=[]
    SalidasData=[]
    CantActualData=[]
    ListaToTable=[]
    Almacen=AlmacenProd
    #f_ini=self.ui.FechaInicSel.date()
    #FechaInicial=f_ini.toString(Qt.ISODate)
    f_fin=self.ui.FechaFinSel.date()
    FechaFinal=f_fin.toString(Qt.ISODate)    
    query="SELECT ID,Proveedor FROM tblContenedoresProducto WHERE Estatus=1"
    AlmacenData=run_query(self,query)
    #Saca lista de las materias primas en el almacen seleccionado.
    DataForQuery=(Almacen,)
    # Saca lista de las materias primas en el almacen seleccionado.
    query=  """ SELECT DISTINCT tblProductoMovimientos.IDProd, tblProductos.Descripcion
                FROM tblProductoMovimientos
                INNER JOIN tblProductos ON tblProductos.ID=tblProductoMovimientos.IDProd
                WHERE IDAlmacen= ? ORDER BY tblProductoMovimientos.IDProd
                """  
    ProdData=run_query2(self,query,DataForQuery) 
    if len(ProdData)==0 :
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setText("No hay info ")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_() 
            return     
    #saca el ultimo inventario de la lista de Productos´s obtenida anteriormente en el mismo almacen
    query= "SELECT IDProducto,Cantidad,Fecha  FROM tblInventarioInicialesProductos WHERE  IDProducto= ? AND IDContenedor= ? ORDER BY  ID DESC"    
    for j in range(0,len(ProdData)):
        ProdDescripcion= ProdData[j][1]
        Data=run_query2(self,query,(ProdData[j][0],Almacen))
        if len(Data)==0 :
            ban="Faltan dato Inv Inicial de "+  ProdDescripcion
            msg=QMessageBox()
            msg.setWindowTitle("Informacion")
            msg.setText(ban)
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_() 
            return
        LisTemp.append(Data[0][0])
        LisTemp.append(Data[0][1])
        LisTemp.append(Data[0][2])
        InvInicData.append(LisTemp)
        LisTemp=[]
    # Calcula las Entradas y Salidas
    for h in range(0,len(ProdData)):
        res=CalCanRanFechasPorAlm(self,Almacen,ProdData[h][0],InvInicData[h][2],FechaFinal,0)
        if len(res) == 0:
            EntradasData.append([ProdData[h][0],0,0,])
        else :
            EntradasData.append(list(res[0]))
    for h in range(0,len(ProdData)):
        res=CalCanRanFechasPorAlm(self,Almacen,ProdData[h][0],InvInicData[h][2],FechaFinal,1)
        if len(res) == 0:
            SalidasData.append([ProdData[h][0],1,0,])
        else :
            SalidasData.append(list(res[0]))
    #  Arma  lista para tabla y excel  se llama LisToTable
    LisTemp=[]
    
    for j  in range(0,len(ProdData)):
        if Modo == 0:
            LisTemp.append(AlmacenData[AlCBoxIdx][1])
            LisTemp.append(ProdData[j][1])
        elif Modo ==1 :
            LisTemp.append(Almacen)
            LisTemp.append(ProdData[j][0])
        LisTemp.append('{:,}'.format(InvInicData[j][1]))
        LisTemp.append('{:,}'.format(EntradasData[j][2]))
        LisTemp.append('{:,}'.format(SalidasData[j][2]))
        CantActual='{:,}'.format(int(InvInicData[j][1])+int(EntradasData[j][2])-int(SalidasData[j][2]))
        LisTemp.append(CantActual)
        ListaToTable.append(LisTemp)
        LisTemp=[]
    return ListaToTable
    
def CalCanRanFechasPorAlm(self,Almacen,Prod,FechaInicial,FechaFinal,TipoMov):
    query= """  SELECT  IDProd,  TipoMov, SUM(tblProductoMovimientos.Cantidad)
                FROM tblProductoMovimientos
                WHERE tblProductoMovimientos.IDAlmacen= ?  AND tblProductoMovimientos.IDProd= ? AND (tblProductoMovimientos.Fecha BETWEEN ? AND ? )
                GROUP BY  tblProductoMovimientos.TipoMov
                HAVING  tblProductoMovimientos.TipoMov= ?
            """
    DataForQuery=(Almacen,Prod,FechaInicial,FechaFinal,TipoMov)
    MovsData=run_query2(self,query,DataForQuery)
    return MovsData      
    