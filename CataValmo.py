# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TipoAnimal.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5 import uic
from UisPy import *
from UisProcesos import *
from Utilis import *
#from PyQt5 import QtSql
import pathlib
import sys,re,os,sqlite3



class  Receta(QDialog):
       def __init__(self,prod):
           QDialog.__init__(self)
           self.prod=prod
           self.ui=UiReceta(prod)
           self.ui.setupUi(self)
           self.ui.Tabla.setColumnWidth(0,0)
           self.ui.Tabla.setColumnWidth(1,60)
           self.ui.Tabla.setColumnWidth(2,150)
           self.ui.Tabla.setColumnWidth(3,80)
           self.LlenaIngredientesCBox()
           self.ui.ClaveValLbl.setText(prod[1]) 
           self.ui.NombreValLbl.setText(prod[2])
           self.ui.UdeMValLbl.setText(prod[3])
           self.ui.PBAgregar.clicked.connect(self.Agregar) 
           self.ui.PBBorrar.clicked.connect(self.Borrar) 
           self.ui.PropCampo.textChanged.connect(self.ChecaDatProp)
           self.ui.MermaCampo.textChanged.connect(self.ChecaDatMerma)
           self.ui.PBGuardarNota.clicked.connect(self.GuardaNota)  
           self.ui.PBCerrar.clicked.connect(self.close)
           self.ui.PropCampo.setFocus()
           global DetalleRecetaLista
           DetalleRecetaLista=[]
           self.LlenaTabla()
           global idprod
                      

       def ChecaDatProp(self):
           r=0
           r=ChecaDatNum(self,0.01,100,self.ui.PropCampo.text())
           if r == 2:
              self.ui.PropCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif r == 0:
              self.ui.PropCampo.setStyleSheet("border: 2px solid red;")
              return False
           CurrDat=float(self.ui.PropCampo.text())
           faltan=100-AcumulaProp-CurrDat
           if faltan < 0 :
               self.ui.PropCampo.setStyleSheet("border: 2px solid red;")
               return False
           else :
               self.ui.PropCampo.setStyleSheet("border: 2px solid green;")
               return True 
              
                          
       
       def ChecaDatMerma(self):
           r=ChecaDatNum(self,-1,10,self.ui.MermaCampo.text())
           if r == 2:
              self.ui.MermaCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif r == 0:
              self.ui.MermaCampo.setStyleSheet("border: 2px solid red;")
              return False
           elif  r == 1:
              self.ui.MermaCampo.setStyleSheet("border: 2px solid green;")
              return True 
       
       def LlenaIngredientesCBox(self):
           global MPData
           query="SELECT ID,Clave,Descripcion,IDUnidadMedida  FROM  tblMateriaPrima WHERE IDTipoStatus= 'Activo' ORDER BY Descripcion "
           MPData=run_query(self,query)
           row=[]
           self.ui.IngCBox.clear()
           for item in MPData :
               j=str(item[2])
               self.ui.IngCBox.addItem(j) 
      
       def LlenaTabla(self):
           global DetalleRecetaLista
           query= """   SELECT tblProductosMateriaPrima.ID, tblMateriaPrima.Clave, tblMateriaPrima.Descripcion,tblProductosMateriaPrima.Porcentaje,
                             tblProductosMateriaPrima.PorMerma
                        FROM tblProductosMateriaPrima
                        INNER JOIN tblMateriaPrima ON  tblMateriaPrima.ID = tblProductosMateriaPrima.IDMateriaPrima
                        WHERE tblProductosMateriaPrima.IDprod=?
                  """
           DetalleRecetaLista=run_query2(self,query,(self.prod[0],))
           
           self.ui.Tabla.setRowCount(0)
           for ren in range(0,len(DetalleRecetaLista)):
               self.ui.Tabla.insertRow(ren)
               for col in range(0,len(DetalleRecetaLista[0])):
                   if col ==3 or col ==4:
                       DaToTabla=DetalleRecetaLista[ren][col]
                       if DaToTabla == None :
                           DaToTabla=0
                       DaToTabla='{:,.2f}'.format(DaToTabla)
                       #DaToTabla=str(DetalleRecetaLista[ren][col])
                   else:
                       DaToTabla=str(DetalleRecetaLista[ren][col])
                   #DaToTabla='{:,.2f}'.format(Datos[ren][col])
                   self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(DaToTabla)))
           self.CalculaAcumulado()

       def CalculaAcumulado(self):
           global AcumulaProp,DetalleRecetaLista
           AcumulaProp=0
           for ren in range(0,len(DetalleRecetaLista)):
               AcumulaProp=AcumulaProp+float(DetalleRecetaLista[ren][3])
           self.ui.AcuValLbl.setText(str(AcumulaProp))
           return AcumulaProp
      
       def Agregar(self):
           OkToAgr=self.ChecaDatProp() and self.ChecaDatMerma()
           if OkToAgr == False:
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Error en Dato de Proporcion o merma")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           global MPData
           #self.ui.MermaCampo.setText("2.0")
           MPPos=self.ui.IngCBox.currentIndex()
           IDMP=MPData[MPPos][0]
           Prop=float(self.ui.PropCampo.text())
           self.ui.MermaCampo.setFocus()
           Merma=float(self.ui.MermaCampo.text())
           IDProd= self.prod[0]
           query = "INSERT INTO tblProductosMateriaPrima VALUES(NULL, ?, ?, ?, ?)"
           parameters =  (IDMP,Prop,Merma,IDProd)
           run_query(self,query,parameters)
           self.LlenaTabla()
           self.ui.PropCampo.clear()
           self.ui.MermaCampo.clear()
           self.ui.MermaCampo.setText("2.0")
           self.ui.PropCampo.setFocus()

       def Borrar(self):
           CurrRow=DetalleRecetaLista[self.ui.Tabla.currentRow()]
           res=QMessageBox.question(self,"Borrar Registro ??","Estas Seguro de Borrar Registro?????",
                                  QMessageBox.Yes | QMessageBox.No)
           if res==QMessageBox.Yes: 
               query= "DELETE FROM tblProductosMateriaPrima WHERE ID= ?"
               run_query1(self,query,(CurrRow[0],))
           self.LlenaTabla()
           self.ui.PropCampo.setFocus()

       def GuardaNota(self):
           pass
           #Nota=self.ui.NotasCampo.toPlainText()
           #query = """UPDATE  tblRecetas SET  Notas= ?  WHERE ID = ? """
           #res=run_query(self,query, (Nota, self.CurrReceta[0]))




class  Productos(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           self.ui=UiProductos()
           self.ui.setupUi(self)
           self.ui.Tabla.setColumnWidth(0,0)
           self.ui.Tabla.setColumnWidth(1,80)
           self.ui.Tabla.setColumnWidth(2,200)
           self.ui.Tabla.setColumnWidth(3,80)
           self.ui.Tabla.setColumnWidth(4,80)
           self.ui.Tabla.setColumnWidth(5,80)
           self.ui.PBAgregar.clicked.connect(self.Agregar)
           self.ui.PBModificar.clicked.connect(self.Modificar)
           self.ui.PBAgregaModIng.clicked.connect(self.ListaRecetas)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.ui.ClaveCampo.textChanged.connect(self.MayusClave)          
           self.ui.DescripcionCampo.textChanged.connect(self.MayusNombre)
           self.ui.Tabla.itemSelectionChanged.connect(self.LlenaCampos)
           self.LlenarTabla()
           self.ComboBox()
          
       def MayusNombre(self):
           nombre=self.ui.DescripcionCampo.text()
           self.ui.DescripcionCampo.setText(nombre.upper())
       def MayusClave(self):
           clave=self.ui.ClaveCampo.text()
           self.ui.ClaveCampo.setText(clave.upper())
              
       def LlenarTabla(self):
           global ListaProductos
           query="SELECT * FROM tblProductos ORDER BY Descripcion"
           ListaProductos=run_query(self,query)
           self.ui.Tabla.setRowCount(0)
           for ren in range(0,len(ListaProductos)):
               self.ui.Tabla.insertRow(ren)
               for col in range(0,len(ListaProductos[ren])):
                   self.ui.Tabla.setItem(ren, col, QtWidgets.QTableWidgetItem(str(ListaProductos[ren][col])))
              
       def LlenaCampos(self):
           CurrProd=ListaProductos[self.ui.Tabla.currentRow()]
           self.ui.ClaveCampo.setText(CurrProd[1])
           self.ui.DescripcionCampo.setText(CurrProd[2])     
           self.ui.UdeMLblVal.setText(CurrProd[3])
           self.ui.PUCampo.setText(str(CurrProd[4]))           
           
                         
       def Agregar(self):
            clave=self.ui.ClaveCampo.text()
            clave=clave.strip()
            nombre=self.ui.DescripcionCampo.text()
            nombre=nombre.strip()
            status=CheckRButtons(self)
            sirve=CheckRButtonsSirve(self)
            precio = self.ui.PUCampo.text()
            precio=precio.strip()
            UdeM=self.ui.UdeMComBox.currentText()
            query = "INSERT INTO tblProductos VALUES(NULL, ?, ?, ?, ?, ?, ?)"
            parameters =  (clave,nombre,UdeM, precio, status,sirve)
            data=run_query(self,query, parameters)
            self.LlenarTabla()
            self.ui.ClaveCampo.clear()
            self.ui.DescripcionCampo.clear()
            
          
       def Modificar(self):
           items = self.ui.Tabla.selectedItems()
           descripcion=self.ui.DescripcionCampo.text()
           status=CheckRButtons(self)
           sirve=CheckRButtonsSirve(self)
           UdeM=self.ui.UdeMComBox.currentText()
           precio = self.ui.PUCampo.text()
           if len(items) > 0  :
              Ind=str(items[0].text())
              query = """UPDATE  tblProductos SET UdeM = ?, PU = ?, IDTipoStatus = ?, SeSirve = ?  WHERE ID = ?"""
              parameters =  (UdeM, precio, status, sirve, Ind)
              res=run_query(self,query, parameters)
              self.LlenarTabla()
           else:
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("Selecciona un renglon")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()

       def ListaRecetas(self):
           CurrProd=ListaProductos[self.ui.Tabla.currentRow()]
           self.dialog=Receta(CurrProd)
           self.dialog.show()
      
       def DetalleRecetasWin(self):
           CurrReceta=ListaRecetasCurrProd[self.ui.Tabla.currentRow()]
           query=" SELECT Notas FROM tblRecetas WHERE ID= ?"
           Notas=run_query1SinMsg(self,query, (CurrReceta[0],))
           Notas=Notas[0]
           self.dialog=Receta(self.prod,CurrReceta,Notas)
           self.dialog.show()
        
       def ComboBox(self):
           query="SELECT ID, Abreviacion FROM tblUnidades"
           LlenarCbox =run_query(self,query)
           for item in LlenarCbox :
               j=str(item[1])
               self.ui.UdeMComBox.addItem(j) 

            
      
#  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        
class  ProveedoresWin(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           self.ui= dialogoClientes()
           self.ui.setupUi(self)
           self.ui.groupBox.setTitle("Proveedores:")
           self.ui.Tabla.setColumnWidth(1,350) 
           self.ui.PBAgregar.clicked.connect(self.Agregar)
           self.ui.PBModificar.clicked.connect(self.Modificar)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.ui.NombreCampo.textChanged.connect(self.MayusNombre)
           self.ui.DireccionCampo.textChanged.connect(self.MayusDireccion)
           self.ui.CiudadCampo.textChanged.connect(self.MayusCiudad)
           self.ui.ClaveCampo.textChanged.connect(self.MayusClave)
           self.ui.RfcCampo.textChanged.connect(self.MayusRFC)
           self.LlenarTabla()
           self.ui.Tabla.itemSelectionChanged.connect(self.LlenaCampos)
              
       def MayusNombre(self):
           nombre=self.ui.NombreCampo.text()
           self.ui.NombreCampo.setText(nombre.upper())
       def MayusDireccion(self):
           nombre=self.ui.DireccionCampo.text()
           self.ui.DireccionCampo.setText(nombre.upper())
       def MayusCiudad(self):
           nombre=self.ui.CiudadCampo.text()
           self.ui.CiudadCampo.setText(nombre.upper())
       def MayusClave(self):
           clave=self.ui.ClaveCampo.text()
           self.ui.ClaveCampo.setText(clave.upper())
       def MayusRFC(self):
           clave=self.ui.RfcCampo.text()
           self.ui.RfcCampo.setText(clave.upper())
       
       def LlenarTabla(self):
           query="SELECT * FROM tblProveedores ORDER BY Nombre"
           TraerDatosFrDb(self,query,9)
            
       def LlenaCampos(self):
           CC=self.ui.Tabla.columnCount()
           CuRo=self.ui.Tabla.currentRow()
           if CuRo < 0 :
               CuRo=0
               return
           tu=[]
           for col in range(0,CC):
                   i=self.ui.Tabla.item(CuRo,col)
                   if i != None :
                      tu.append(str(i.text()))
           self.ui.ClaveCampo.setText(tu[0])
           self.ui.NombreCampo.setText(tu[1])           
           self.ui.DireccionCampo.setText(tu[2])
           self.ui.CiudadCampo.setText(tu[3])
           self.ui.RfcCampo.setText(tu[4])
           self.ui.EmailCampo.setText(tu[5])
           self.ui.ContactoCampo.setText(tu[6])
           self.ui.TelefonoCampo.setText(tu[7])
              
       def Agregar(self):
            clave=self.ui.ClaveCampo.text()
            clave=clave.strip()
            nombre=self.ui.NombreCampo.text()
            nombre=nombre.strip()
            direccion=self.ui.DireccionCampo.text()
            direccion=direccion.upper()
            ciudad=self.ui.CiudadCampo.text()
            ciudad=ciudad.upper()
            Rfc=self.ui.RfcCampo.text()
            Rfc=Rfc.strip()
            email=self.ui.EmailCampo.text()
            contacto=self.ui.ContactoCampo.text()
            telefono=self.ui.TelefonoCampo.text()
            query = "INSERT INTO tblProveedores VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?)"
            parameters =  (clave,nombre,direccion,ciudad,Rfc,email,contacto,telefono)
            data=run_query(self,query, parameters)
            self.LlenarTabla()
            self.ui.ClaveCampo.clear()
            self.ui.NombreCampo.clear()
            self.ui.DireccionCampo.clear()
            self.ui.CiudadCampo.clear()
            self.ui.RfcCampo.clear()
            self.ui.EmailCampo.clear()
            self.ui.ContactoCampo.clear()
            self.ui.TelefonoCampo.clear()
          
       def Modificar(self):
           items = self.ui.Tabla.selectedItems()
           direccion=self.ui.DireccionCampo.text()
           direccion=direccion.upper()
           ciudad=self.ui.CiudadCampo.text()
           ciudad=ciudad.upper()
           Rfc=self.ui.RfcCampo.text()
           Rfc=Rfc.strip()
           email=self.ui.EmailCampo.text()
           contacto=self.ui.ContactoCampo.text()
           telefono=self.ui.TelefonoCampo.text()
           if len(items) > 0  :
              Ind=str(items[0].text())
              query = """UPDATE  tblProveedores SET  Direccion =?, Ciudad = ?, RFC = ?, Email= ?, Contacto= ?, TelefonoContacto= ?  WHERE Clave = ?"""
              parameters =  (direccion,ciudad,Rfc,email,contacto,telefono,Ind)
              res=run_query(self,query, parameters)
              self.LlenarTabla()
           else:
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("Selecciona un renglon")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()
               
                 
class  ClienteWin(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           self.ui= dialogoClientes()
           self.ui.setupUi(self)
           self.ui.groupBox.setTitle("Clientes:")
           self.ui.PBAgregar.clicked.connect(self.Agregar)
           self.ui.PBModificar.clicked.connect(self.Modificar)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.ui.Tabla.setColumnWidth(1,200)          
           self.ui.NombreCampo.textChanged.connect(self.MayusNombre)
           self.ui.DireccionCampo.textChanged.connect(self.MayusDireccion)
           self.ui.CiudadCampo.textChanged.connect(self.MayusCiudad)
           self.ui.ClaveCampo.textChanged.connect(self.MayusClave)
           self.ui.RfcCampo.textChanged.connect(self.MayusRFC)
           self.LlenarTabla()
           self.ui.Tabla.itemSelectionChanged.connect(self.LlenaCampos)
       def MayusNombre(self):
           nombre=self.ui.NombreCampo.text()
           self.ui.NombreCampo.setText(nombre.upper())
       def MayusDireccion(self):
           nombre=self.ui.DireccionCampo.text()
           self.ui.DireccionCampo.setText(nombre.upper())
       def MayusCiudad(self):
           nombre=self.ui.CiudadCampo.text()
           self.ui.CiudadCampo.setText(nombre.upper())
       def MayusClave(self):
           clave=self.ui.ClaveCampo.text()
           self.ui.ClaveCampo.setText(clave.upper())
       def MayusRFC(self):
           clave=self.ui.RfcCampo.text()
           self.ui.RfcCampo.setText(clave.upper())
       
       def LlenarTabla(self):
           query="SELECT * FROM  tblClientes ORDER BY Nombre"
           TraerDatosFrDb(self,query,9)
            
       def LlenaCampos(self):
           CC=self.ui.Tabla.columnCount()
           CuRo=self.ui.Tabla.currentRow()
           if CuRo < 0 :
               CuRo=0
               return
           tu=[]
           for col in range(0,CC):
                   i=self.ui.Tabla.item(CuRo,col)
                   if i != None :
                      tu.append(str(i.text()))
           self.ui.ClaveCampo.setText(tu[0])
           self.ui.NombreCampo.setText(tu[1])           
           self.ui.DireccionCampo.setText(tu[2])
           self.ui.CiudadCampo.setText(tu[3])
           self.ui.RfcCampo.setText(tu[4])
           self.ui.EmailCampo.setText(tu[5])
           self.ui.ContactoCampo.setText(tu[6])
           self.ui.TelefonoCampo.setText(tu[7])
              
       def Agregar(self):
            clave=self.ui.ClaveCampo.text()
            clave=clave.strip()
            nombre=self.ui.NombreCampo.text()
            nombre=nombre.strip()
            direccion=self.ui.DireccionCampo.text()
            direccion=direccion.upper()
            ciudad=self.ui.CiudadCampo.text()
            ciudad=ciudad.upper()
            Rfc=self.ui.RfcCampo.text()
            Rfc=Rfc.strip()
            email=self.ui.EmailCampo.text()
            contacto=self.ui.ContactoCampo.text()
            telefono=self.ui.TelefonoCampo.text()
            query = "INSERT INTO tblClientes VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?)"
            parameters =  (clave,nombre,direccion,ciudad,Rfc,email,contacto,telefono)
            data=run_query(self,query, parameters)
            self.LlenarTabla()
            self.ui.ClaveCampo.clear()
            self.ui.NombreCampo.clear()
            self.ui.DireccionCampo.clear()
            self.ui.CiudadCampo.clear()
            self.ui.RfcCampo.clear()
            self.ui.EmailCampo.clear()
            self.ui.ContactoCampo.clear()
            self.ui.TelefonoCampo.clear()

       def Modificar(self):
           items = self.ui.Tabla.selectedItems()
           direccion=self.ui.DireccionCampo.text()
           direccion=direccion.upper()
           ciudad=self.ui.CiudadCampo.text()
           ciudad=ciudad.upper()
           Rfc=self.ui.RfcCampo.text()
           Rfc=Rfc.strip()
           email=self.ui.EmailCampo.text()
           contacto=self.ui.ContactoCampo.text()
           telefono=self.ui.TelefonoCampo.text()
           if len(items) > 0  :
              Ind=str(items[0].text())
              query = """UPDATE  tblClientes SET  Direccion =?, Ciudad = ?, RFC = ?, Email= ?, Contacto= ?, TelefonoContacto= ?  WHERE Clave = ?"""
              parameters =  (direccion,ciudad,Rfc,email,contacto,telefono,Ind)
              res=run_query(self,query, parameters)
              self.LlenarTabla()
           else:
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("Selecciona un renglon")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()
               
class  Unidadeswin(QDialog):               
       def __init__(self):
           QDialog.__init__(self)
           self.ui= Ui_DialogoUnidades()
           self.ui.setupUi(self)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.traer_datos()

       def traer_datos(self):
           query="SELECT * FROM  tblUnidades"
           data=run_query(self,query)
           row=[]
           self.ui.Tabla.clear()
           for item in data :
               row.append(str(item[1]))
               row.append(str(item[2]))
               self.ui.Tabla.insertTopLevelItems(0,[QTreeWidgetItem(self.ui.Tabla,row)])
               row=[]   

class  MateriasPrimasWin(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           PathPgm=os.getcwdb()
           path=os.path.join(str(PathPgm,'utf-8'),'GUIs','CataMPWin.ui')
           uic.loadUi(path,self)
        #    self.ui=DialogoMatPrimas()
        #    self.ui.setupUi(self)
           self.Tabla.setColumnWidth(0,0)
           self.Tabla.setColumnWidth(1,80)
           self.Tabla.setColumnWidth(2,200)
           self.Tabla.setColumnWidth(3,60)
           self.Tabla.setColumnWidth(4,60)
           self.ClaveCampo.textChanged.connect(self.MayusClave)
           self.DescripcionCampo.textChanged.connect(self.MayusDescripcion)
           self.PBAgregar.clicked.connect(self.Agregar)
           self.PBModificar.clicked.connect(self.Modificar)
           self.PBCerrar.clicked.connect(self.close)
           self.Tabla.itemSelectionChanged.connect(self.LlenaCampos)
           self.traer_unidades()
           self.LlenarTabla()
               
       def MayusClave(self):
           nombre=self.ClaveCampo.text()
           self.ClaveCampo.setText(nombre.upper())
       def MayusDescripcion(self):
           clave=self.DescripcionCampo.text()
           self.DescripcionCampo.setText(clave.upper())
       
       def LlenarTabla(self):
           global MPData
           query="""SELECT * 
                    FROM tblMateriaPrima"""
           MPData=run_query(self,query)
           self.Tabla.setRowCount(0)
           for ren,RenData in enumerate(MPData):
               self.Tabla.insertRow(ren)
               for col,item in enumerate(RenData):
                   self.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(item)))
           return MPData
       
       def traer_unidades(self):
           query="SELECT * FROM  tblUnidades"
           data=run_query(self,query)
           row=[]
           self.UdeMComBox.clear()
           for item in data :
               j=str(item[2])
               self.UdeMComBox.addItem(j)
      
       def LlenaCampos(self):
            CC=self.Tabla.columnCount()
            CuRo=self.Tabla.currentRow()
            if CuRo < 0 :
                CuRo=0
                return
            self.ClaveCampo.setText(MPData[CuRo][1])
            self.DescripcionCampo.setText(MPData[CuRo][2])           
            self.PUCampo.setText(MPData[CuRo][5])
            self.MermaCampo.setText(str(MPData[CuRo][6]))
              
       def Agregar(self):
           CuRo=self.Tabla.currentRow()
           clave=self.ClaveCampo.text()
           if self.MermaCampo.text() !=  None:
               merma=int(self.MermaCampo.text())
           else :  Merma=0
           if merma < 0 or merma > 20:
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText(" Merma Fuera de Rango (0 a 20")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           
           descripcion=self.DescripcionCampo.text()
           if self.RBotAlta.isChecked() :
               status="Activo"
           elif self.RBotBaja.isChecked() :
               status="Baja"
           UdeM=self.UdeMComBox.currentText()
           pu=self.PUCampo.text()
           query = "INSERT INTO tblMateriaPrima VALUES(NULL, ?, ?, ?, ?, ?, ?)"
           parameters =  (clave,descripcion,status,UdeM,pu,merma)
           data=run_query(self,query, parameters)
           self.LlenarTabla()
           self.ClaveCampo.clear()
           self.DescripcionCampo.clear()
           self.PUCampo.clear()

       def Modificar(self):
           #j=self.TraeRenglonTabla()
           CuRo=self.Tabla.currentRow()
           items = self.Tabla.selectedItems()
           descripcion=self.DescripcionCampo.text()
           merma=int(self.MermaCampo.text())
           if merma < 0 or merma > 20:
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText(" Merma Fuera de Rango (0 a 20")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           if self.RBotAlta.isChecked() :
               status="Activo"
           elif self.RBotBaja.isChecked() :
               status="Baja"
           UdeM=self.UdeMComBox.currentText()
           pu=self.PUCampo.text()
           if len(items) > 0  :
              Ind=str(items[0].text())
              ID=MPData[CuRo][0]
              query = """UPDATE tblMateriaPrima SET   IDTipoStatus = ?, IDUnidadMedida = ?, PrecioUnitario= ?, Merma= ? WHERE ID = ?"""
              parameters =  (status,UdeM,pu,merma,ID)
              res=run_query(self,query, parameters)
              self.LlenarTabla()
           else:
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("Selecciona un renglon")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()
            
# ---------------------------------------------------------------------------------------------------------------------------------------------       
class  Operadoreswin(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           global pos
           self.ui=DialogOperadores()
           self.ui.setupUi(self)
           self.ui.DescCampo.textChanged.connect(self.validar_descripcion)
           self.ui.PBAgregar.clicked.connect(self.Agregar)
           self.ui.PBModificar.clicked.connect(self.ModificarEstatus)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.LlenarTabla()
           #self.ui.Tabla.itemSelectionChanged.connect(self.print_row)

       def validar_descripcion(self):
           nombre=self.ui.DescCampo.text()
           self.ui.DescCampo.setText(nombre.upper())
           validar = re.match('^[a-z\sáéíóúàèìòùäëïöüñ]+$', nombre, re.I)
           if nombre == "":
              self.ui.DescCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.DescCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
               self.ui.DescCampo.setStyleSheet("border: 2px solid green;")
               return True
       
       def LlenarTabla(self):
           query="SELECT * FROM  tblOperadores"
           TraerDatosFrDb(self,query,3)
           
       def Agregar(self):
           status=CheckRButtons(self)
           data=self.ui.DescCampo.text()
           data=data.upper()
           data=data.strip()
           query = "INSERT INTO tblOperadores VALUES(NULL, ?, ?)"
           parameters =  (data,status)
           data=run_query(self,query, parameters)
           self.LlenarTabla()
           
       def ModificarEstatus(self):
           items = self.ui.Tabla.selectedItems()
           status=CheckRButtons(self)
           if len(items) > 0  :
              pos=str(items[0].text())
              query = """UPDATE tblOperadores SET  Descripcion =?, IDTipoEstatus = ?  WHERE Descripcion = ?"""
              parameters =  (pos,status,pos)
              data=run_query(self,query, parameters)
              self.LlenarTabla()
              self.ui.DescCampo.clear()
           else:
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("Selecciona un renglon")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()
      
#------------------------------------------------------------------------------------------------------------------------------------------------           

class  CorralesWin(QDialog):   
       def __init__(self):
           QDialog.__init__(self)
           self.ui= UiCorrales()
           self.ui.setupUi(self)
           self.ui.Tabla.setColumnWidth(0,80)
           self.ui.Tabla.setColumnWidth(4,200)
           self.ui.ClaveCampo.textChanged.connect(self.MayusClave)
           self.ui.NombreCampo.textChanged.connect(self.MayusNombre)
           self.ui.PBAgregar.clicked.connect(self.Agregar)
           self.ui.PBModificar.clicked.connect(self.Modificar)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.ui.Tabla.itemSelectionChanged.connect(self.LlenaCampos)
           global DataCliente,DataCorrales
           query="SELECT ID,Nombre FROM  tblClientes"
           DataCliente=run_query(self,query)
           query="SELECT * FROM  tblCorrales"
           DataCorrales=run_query(self,query)
           self.LlenarTabla()
                                   
       def MayusClave(self):
           clave=self.ui.ClaveCampo.text()
           self.ui.ClaveCampo.setText(clave.upper())
       def MayusNombre(self):
           nombre=self.ui.NombreCampo.text()
           self.ui.NombreCampo.setText(nombre.upper())
       
       def LlenaCampos(self):
           CC=self.ui.Tabla.columnCount()
           CuRo=self.ui.Tabla.currentRow()
           if CuRo < 0 :
               CuRo=0
               return
           tu=[]
           for col in range(0,CC):
                   i=self.ui.Tabla.item(CuRo,col)
                   if i != None :
                      tu.append(str(i.text()))
           self.ui.ClaveCampo.setText(tu[0])
           self.ui.NombreCampo.setText(tu[1])           
           self.ui.CapaCampo.setText(tu[3])

       def LlenarTabla(self):
           query="SELECT ID,Nombre FROM  tblClientes"
           DataCliente=run_query(self,query)
           query="SELECT * FROM  tblCorrales"
           DataCorrales=run_query(self,query)
           self.ui.Tabla.setRowCount(0)
           for ren in range(0,len(DataCorrales)):
               self.ui.Tabla.insertRow(ren)
               self.ui.Tabla.setItem(ren, 0, QtWidgets.QTableWidgetItem(str(DataCorrales[ren][1])))
               self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(DataCorrales[ren][2])))
               self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(str(DataCorrales[ren][3])))
               self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem(str(DataCorrales[ren][4])))
               for j in range(0,len(DataCliente)):
                   if int(DataCliente[j][0])== int(DataCorrales[ren][5]):
                       self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(str(DataCliente[j][1])))  
           
       def Agregar(self):
           status=CheckRButtons(self)
           if self.ui.RBotMtto.isChecked() :
                status="Mtto"
           clave=self.ui.ClaveCampo.text()
           nombre=self.ui.NombreCampo.text()
           capa=self.ui.CapaCampo.text()
           AsignTo=0
           CantActual=0
           FechaAsigna=0-0-0
           query = "INSERT INTO tblCorrales VALUES(NULL, ?, ?, ?, ?, ?, ?, ?)"
           parameters =  (clave,nombre,status,capa,AsignTo,CantActual,FechaAsigna)
           data=run_query(self,query, parameters)
           self.LlenarTabla()
           self.ui.ClaveCampo.clear()
           self.ui.NombreCampo.clear()
           self.ui.CapaCampo.clear()
      
       def Modificar(self):
           items = self.ui.Tabla.selectedItems()
           status=CheckRButtons(self)
           if self.ui.RBotMtto.isChecked() :
                status="Mtto"
           nombre=self.ui.NombreCampo.text()
           capa=self.ui.CapaCampo.text()
           if len(items) > 0  :
              Ind=str(items[0].text())
              query = """UPDATE tblCorrales SET  Descripcion =?, IDTipoStatus = ?, Capacidad = ?  WHERE Clave = ?"""
              parameters =  (nombre,status,capa,Ind)
              res=run_query(self,query, parameters)
              self.LlenarTabla()
           else:
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("Selecciona un renglon")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()
        
class  TipoAnimalWin(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           self.ui=DialogAltaAnimales()
           self.ui.setupUi(self)
           self.ui.DescCampo.textChanged.connect(self.validar_descripcion)
           self.ui.PBAgregar.clicked.connect(self.Agregar)
           self.ui.PBModificar.clicked.connect(self.ModificarEstatus)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.LlenarTabla()
       
       def validar_descripcion(self):
           nombre=self.ui.DescCampo.text()
           self.ui.DescCampo.setText(nombre.upper())
           validar = re.match('^[a-z\sáéíóúàèìòùäëïöüñ]+$', nombre, re.I)
           if nombre == "":
              self.ui.DescCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.DescCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
               self.ui.DescCampo.setStyleSheet("border: 2px solid green;")
               return True
       
       def LlenarTabla(self):
           query="SELECT * FROM  tblTipoAnimales"
           TraerDatosFrDb(self,query,3)
           
       def Agregar(self):
           status=CheckRButtons(self)
           data=self.ui.DescCampo.text()
           data=data.upper()
           data=data.strip()
           query = "INSERT INTO tblTipoAnimales VALUES(NULL, ?, ?)"
           parameters =  (data,status)
           data=run_query(self,query, parameters)
           self.LlenarTabla()
           self.ui.DescCampo.clear()
           
       def ModificarEstatus(self):
           items = self.ui.Tabla.selectedItems()
           #status=CheckRButtons(self)
           status=""
           if self.ui.RBotAlta.isChecked() :
               status="Activo"
           elif self.ui.RBotBaja.isChecked() :
               status="Baja"
    
           if len(items) > 0  :
              pos=str(items[0].text())
              query = """UPDATE tblTipoAnimales SET  Descripcion =?, IDTipoEstatus = ?  WHERE Descripcion = ?"""
              parameters =  (pos,status,pos)
              res=run_query(self,query, parameters)
              self.LlenarTabla()
           else:
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("Selecciona un renglon")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()

class  CatAlamaMP(QDialog):  
       def __init__(self):
           QDialog.__init__(self)
           self.ui= UiAsignaAlmacen()
           self.ui.setupUi(self)  
           self.ui.Tabla.setColumnWidth(0,0)
           self.ui.wt="Asignacion de Almacenes de Materias Primas"
           self.setWindowTitle(self.ui.wt)
           #self.ui.Tabla.hideColumn(0)
           self.ui.Tabla.setColumnWidth(1,80)
           self.ui.Tabla.setColumnWidth(2,180)
           self.ui.ClaveCampo.textChanged.connect(self.MayusClave)   
           self.ui.CapaCampo.textChanged.connect(self.ChecaCantCapa)
           self.ui.Tabla.itemSelectionChanged.connect(self.LlenaCampos)
           self.ui.ClienteCBox.activated.connect(self.BorraCampos)
           self.ui.RBotActivos.toggled.connect(self.LlenaTabla) 
           self.ui.RBotTodos.toggled.connect(self.LlenaTabla) 
           self.ui.PBCerrar.clicked.connect(self.close) 
           self.ui.PBAgrega.clicked.connect(self.Agregar)   
           self.ui.PBActualiza.clicked.connect(self.Actualiza)       
           global DataCliente,DataAlmacenesMP
           query="SELECT ID,Clave,Nombre FROM  tblClientes ORDER BY Nombre"
           DataCliente=run_query(self,query)
           query="SELECT * FROM  tblContenedoresMateriaPrima"
           DataAlmacenesMP=run_query(self,query)
           self.LlenaDatos()
           self.LlenaTabla()

       def LlenaDatos(self):
           global DataCliente
           self.ui.ClienteCBox.clear()
           for item in DataCliente :
               j=str(item[2])
               self.ui.ClienteCBox.addItem(j)
           self.ui.ClaveCampo.clear()
           self.ui.CapaCampo.clear() 
      
       def BorraCampos(self):
           self.ui.ClaveCampo.clear()
           self.ui.CapaCampo.clear() 

       def LlenaTabla(self):
           global DataAlmacenesMP
           if self.ui.RBotActivos.isChecked() :
              query="SELECT * FROM  tblContenedoresMateriaPrima WHERE Estatus=1"
           else:
               query="SELECT * FROM  tblContenedoresMateriaPrima"
           DataAlmacenesMP=run_query(self,query)
          
           self.ui.Tabla.setRowCount(0)
           if len(DataAlmacenesMP) > 0 :
               for ren in range(0,len(DataAlmacenesMP)):
                   self.ui.Tabla.insertRow(ren)
                   for col in range(0,len(DataAlmacenesMP[0])):
                       self.ui.Tabla.setItem(ren, col, QtWidgets.QTableWidgetItem(str(DataAlmacenesMP[ren][col])))
                
           else:
               self.ui.Tabla.clearContents()
       
       def LlenaCampos(self):
           global DataAlmacenesMP
           CuRo=self.ui.Tabla.currentRow()
           self.ui.ClaveCampo.setText(DataAlmacenesMP[CuRo][1])
           self.ui.CapaCampo.setText(str(DataAlmacenesMP[CuRo][4]))
      
       def MayusClave(self):
           clave=self.ui.ClaveCampo.text()
           self.ui.ClaveCampo.setText(clave.upper())  

       def ChecaCantCapa(self):
           Cant=self.ui.CapaCampo.text()
           validar = Cant.isdigit() 
           if Cant == "":
              self.ui.CapaCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CapaCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
              self.ui.CapaCampo.setStyleSheet("border: 2px solid green;")
              return True   

       def Agregar(self):
           if self.ui.RBotActivar.isChecked() :
               st=1
           else:
               st=0
           c=self.ui.ClienteCBox.currentIndex()
           cliente=DataCliente[c][2]
           idcliente=DataCliente[c][0]
           if self.ChecaCantCapa():
               Capa=self.ui.CapaCampo.text()
               clave=self.ui.ClaveCampo.text()
               query = "INSERT INTO tblContenedoresMateriaPrima VALUES(NULL, ?, ?, ?, ?, ?)"
               datosToDb =  (clave,cliente,st,Capa,idcliente)
               run_query(self,query, datosToDb)
               self.LlenaTabla()

       def Actualiza(self):
           ren = self.ui.Tabla.selectedItems()
           Capa=self.ui.CapaCampo.text()
           if self.ui.RBotActivar.isChecked() :
               st=1
           else:
               st=0
           
           if len(ren) > 0  :
              pos=str(ren[0].text())
              query = "UPDATE  tblContenedoresMateriaPrima SET  Estatus =?, Capacidad = ?  WHERE ID = ?"
              DataToDb = (st,Capa,pos)
              run_query(self,query, DataToDb)
              self.LlenaTabla()
           else:
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("Selecciona un renglon")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_() 


class  CatAlamaProductos(QDialog):  
       def __init__(self):
           QDialog.__init__(self)
           self.ui= UiAsignaAlmacen()
           self.ui.setupUi(self)  
           self.ui.Tabla.setColumnWidth(0,0)
           self.ui.wt="Asignacion de Almacenes de Productos"
           self.setWindowTitle(self.ui.wt)
           #self.ui.Tabla.hideColumn(0)
           self.ui.Tabla.setColumnWidth(1,80)
           self.ui.Tabla.setColumnWidth(2,180)
           self.ui.ClaveLbl.setText("Proveedor:")
           self.ui.ClaveCampo.textChanged.connect(self.MayusClave)   
           self.ui.CapaCampo.textChanged.connect(self.ChecaCantCapa)
           self.ui.Tabla.itemSelectionChanged.connect(self.LlenaCampos)
           self.ui.ClienteCBox.activated.connect(self.BorraCampos)
           self.ui.RBotActivos.toggled.connect(self.LlenaTabla) 
           self.ui.RBotTodos.toggled.connect(self.LlenaTabla) 
           self.ui.PBCerrar.clicked.connect(self.close) 
           self.ui.PBAgrega.clicked.connect(self.Agregar)   
           self.ui.PBActualiza.clicked.connect(self.Actualiza)       
           global DataCliente,DataAlmacenesMP
           query="SELECT ID,Clave,Nombre FROM  tblProveedores ORDER BY Nombre"
           DataCliente=run_query(self,query)
           query="SELECT * FROM  tblContenedoresProducto"
           DataAlmacenesMP=run_query(self,query)
           self.LlenaDatos()
           self.LlenaTabla()

       def LlenaDatos(self):
           global DataCliente
           self.ui.ClienteCBox.clear()
           for item in DataCliente :
               j=str(item[2])
               self.ui.ClienteCBox.addItem(j)
           self.ui.ClaveCampo.clear()
           self.ui.CapaCampo.clear() 
      
       def BorraCampos(self):
           self.ui.ClaveCampo.clear()
           self.ui.CapaCampo.clear() 

       
       def LlenaTabla(self):
           global DataAlmacenesMP
           if self.ui.RBotActivos.isChecked() :
              query="SELECT * FROM  tblContenedoresProducto WHERE Estatus=1"
           else:
               query="SELECT * FROM  tblContenedoresProducto"
           DataAlmacenesMP=run_query(self,query)
          
           self.ui.Tabla.setRowCount(0)
           if len(DataAlmacenesMP) > 0 :
               for ren in range(0,len(DataAlmacenesMP)):
                   self.ui.Tabla.insertRow(ren)
                   for col in range(0,len(DataAlmacenesMP[0])):
                       self.ui.Tabla.setItem(ren, col, QtWidgets.QTableWidgetItem(str(DataAlmacenesMP[ren][col])))
                
           else:
               self.ui.Tabla.clearContents()
       
       def LlenaCampos(self):
           global DataAlmacenesMP
           CuRo=self.ui.Tabla.currentRow()
           self.ui.ClaveCampo.setText(DataAlmacenesMP[CuRo][1])
           self.ui.CapaCampo.setText(str(DataAlmacenesMP[CuRo][4]))
      
       def MayusClave(self):
           clave=self.ui.ClaveCampo.text()
           self.ui.ClaveCampo.setText(clave.upper())  

       def ChecaCantCapa(self):
           Cant=self.ui.CapaCampo.text()
           validar = Cant.isdigit() 
           if Cant == "":
              self.ui.CapaCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CapaCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
              self.ui.CapaCampo.setStyleSheet("border: 2px solid green;")
              return True   

       def Agregar(self):
           if self.ui.RBotActivar.isChecked() :
               st=1
           else:
               st=0
           c=self.ui.ClienteCBox.currentIndex()
           cliente=DataCliente[c][2]
           idcliente=DataCliente[c][0]
           if self.ChecaCantCapa():
               Capa=self.ui.CapaCampo.text()
               clave=self.ui.ClaveCampo.text()
               query = "INSERT INTO tblContenedoresProducto VALUES(NULL, ?, ?, ?, ?, ?)"
               datosToDb =  (clave,cliente,st,Capa,idcliente)
               run_query(self,query, datosToDb)
               self.LlenaTabla()

       def Actualiza(self):
           ren = self.ui.Tabla.selectedItems()
           #print(str(ren[0].text()))
           Capa=self.ui.CapaCampo.text()
           if self.ui.RBotActivar.isChecked() :
               st=1
           else:
               st=0
           
           if len(ren) > 0  :
              pos=str(ren[0].text())
              query = "UPDATE  tblContenedoresProducto SET  Estatus =?, Capacidad = ?  WHERE ID = ?"
              DataToDb = (st,Capa,pos)
              run_query(self,query, DataToDb)
              self.LlenaTabla()
           else:
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("Selecciona un renglon")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()            


