# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TipoAnimal.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDateTime, Qt
from PyQt5.QtWidgets import *
from UisProcesos import *
from Utilis import *
from PyQt5 import QtSql
import sys,re,sqlite3
import time as tm
from os import remove
import openpyxl 
from openpyxl import load_workbook
import re
import FileOpera
EXCELFILENAME='ListaSurtido.xlsx'

class CapturaManual(QWidget):
       def __init__(self):
           QDialog.__init__(self)
           self.ui=UiCapturaManSurtido()
           self.ui.setupUi(self)
           self.ui.Tabla.setColumnWidth(0,0)
           #self.ui.FechaCapWidget.setDate(QtCore.QDate(2021, 1, 1))
           now = QDateTime.currentDateTime().date()
           self.ui.FechaCapWidget.setDate(now)
           self.ui.NoOrdenCBox.activated.connect(self.LlenaTabla)
           self.ui.CapturaCampo.textChanged.connect(self.ChecaCantProd)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.ui.PBAgregar.clicked.connect(self.Agregar)
           self.ui.CapturaCampo.returnPressed.connect(self.Agregar)
           self.ui.PBBorrar.clicked.connect(self.Borrar)
           self.ui.PBGuardar.clicked.connect(self.GuardarCaptura)
           global ListaNoOrdenes,Lista,ListaCant,idprod
           ListaCant=[]
           self.CBoxData()
                     
       def CBoxData(self):
           global ListaNoOrdenes,ListaCant
           ListaCant=[]
           query="SELECT ID,NoOrden,IDProducto,Status FROM tblOrdenesSurtido WHERE Status = 0 OR Status = 1 OR Status = 2"
           ListaNoOrdenes=run_query(self,query)
           if len(ListaNoOrdenes)==0 :
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("No hay Ordenes para captura Manual")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()
              self.close()
              return
           self.ui.NoOrdenCBox.clear()
           for item in ListaNoOrdenes :
               j=str(item[1])
               self.ui.NoOrdenCBox.addItem(j) 
           self.ui.NoOrdenCBox.setCurrentIndex(0)
           self.LlenaTabla()
           self.ui.CapturaCampo.setFocus()
       
       def LlenaTabla(self):
           global Lista,NoOrden,IDOrden,DataProd
           IDOrden=0
           NoOrden=self.ui.NoOrdenCBox.currentText()
           IDOrden=ListaNoOrdenes[self.ui.NoOrdenCBox.currentIndex()][0]
           self.ui.NoOrdenValLbl.setText(NoOrden)
           query="""
           SELECT  tblProductos.Clave, tblProductos.Descripcion,tblProductos.ID
           FROM  tblProductos
           INNER JOIN tblOrdenesSurtido ON tblProductos.ID=tblOrdenesSurtido.IDProducto 
           WHERE tblOrdenesSurtido.ID= ?"""
           DataProd=run_query2(self,query,(IDOrden,))
           self.ui.ClaveValLbl.setText(DataProd[0][0])
           self.ui.NombreProValLbl.setText(DataProd[0][1])
           query="""
           SELECT  tblDetalleOrdenSurtido.ID, tblDetalleOrdenSurtido.Folio, tblCorrales.Descripcion, tblDetalleOrdenSurtido.CantSolicitada, tblDetalleOrdenSurtido.CantSurtida
           FROM tblDetalleOrdenSurtido
           INNER JOIN tblCorrales ON tblDetalleOrdenSurtido.IDCorral=tblCorrales.ID 
           WHERE IDOrden= ?"""
           Lista=run_query2(self,query,(IDOrden,))
           self.ui.Tabla.setRowCount(0)
           for ren in range(0,len(Lista)):
               self.ui.Tabla.insertRow(ren)
               self.ui.Tabla.setItem(ren, 0, QtWidgets.QTableWidgetItem(str(Lista[ren][0])))
               self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(Lista[ren][1])))
               self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(str(Lista[ren][2])))
               self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem(str(Lista[ren][3])))
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(str(Lista[ren][4])))
           
       def LlenadoColumnaCaptura(self):
           global ListaCant
           Acumulado=0
           for ren in range(0,len(Lista)):
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(None))
           for ren in range(0,len(ListaCant)):
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(ListaCant[ren][0]))
               Acumulado=Acumulado+float(ListaCant[ren][0])
           self.ui.AcumuladoLblVal.setText(str(Acumulado))
          
       def Agregar(self):
           global ListaCant,Lista
           l=[]
           d=self.ui.FechaCapWidget.date()
           FechaCap=d.toString(Qt.ISODate)
           if self.ChecaCantProd() == False :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Dato Invalido")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           if len(ListaCant) == len(Lista):
               return
           cap=self.ui.CapturaCampo.text()
           self.ui.CapturaCampo.setFocus()
           l.append(cap)
           l.append(FechaCap)
           ListaCant.append(l)
           self.LlenadoColumnaCaptura()
           self.ui.CapturaCampo.clear()

       def Borrar(self):
           global ListaCant
           if len(ListaCant)==0:
               return
           ListaCant.pop()
           self.LlenadoColumnaCaptura()

       def GuardarCaptura(self):
           global ListaCant,Lista,DataProd,ListaNoOrdenes
           query=" SELECT  ID,IDCliente,Folio,CantSurtida  FROM tblDetalleOrdenSurtido   WHERE IDOrden= ?"
           ListFolOrden=run_query2(self,query,(IDOrden,))
           d=self.ui.FechaCapWidget.date()
           FechaCap=d.toString(Qt.ISODate)
           #  29-03-2021   Se forza que la fecha de todos los folios de la orden se al misma
           fecha=FechaCap
           LCLen=len(ListaCant)
           LLen=len(Lista)
           if LCLen ==0 or LLen > LCLen:
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Captura Incompleta")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           query = "UPDATE  tblDetalleOrdenSurtido SET CantSurtida =?,  Fecha= ?  WHERE ID= ? "
           for ren in range(0,len(Lista)):
               cant=float(ListaCant[ren][0])
               iddetalle=int(Lista[ren][0])
               run_query2(self,query,(cant,fecha,iddetalle))
               
           #  Graba el valor 5 en la columna de Status para Indicar que fue capturada Manualmente.
           query = "UPDATE  tblOrdenesSurtido SET Status =5 WHERE ID = ?"
           run_query2(self,query,(IDOrden,))
           #MsgGrabReg(True)
           self.ui.AcumuladoLblVal.setText("0")

       # *********** Comienza seccion de carga de desglose de MP y a Almacen de Productos de folio de Proucto Servido *******************************************
           query=" SELECT  ID,IDCliente,Folio,CantSurtida  FROM tblDetalleOrdenSurtido   WHERE IDOrden= ?"
           ListFolOrden=run_query2(self,query,(IDOrden,))
           IDProd=DataProd[0][2]
           fecha=fecha
           TipoMov=3
           for j in range(0,len(ListFolOrden)):
               IDClieProve=ListFolOrden[j][1]
               res=self.BuscaSiClieTieneAlm(IDClieProve)
               ClaveAlmacen=res[0]
               IDAlmaProd=res[1]
               Cant=ListFolOrden[j][3]
               IDPesador=6
               Folio=ListFolOrden[j][2]
               Referencia=ListFolOrden[j][0]
               NotaProd='Generado de Surtidos No. Folio= '+ str(ListFolOrden[j][2])
               HaceCargoEnAlmaMP_X_SalProd(self,IDProd,fecha,TipoMov,ClaveAlmacen,Cant,IDClieProve,IDPesador,Folio)
               self.CargaAAlmaProdSurtCorrales(fecha,IDClieProve,IDAlmaProd,IDProd,Cant,NotaProd)
           self.CBoxData()
           msg=QMessageBox()
           msg.setWindowTitle("Informacion")
           msg.setText("Informacion Guardada Ok")
           msg.setIcon(QMessageBox.Warning)
           x=msg.exec_()


       def BuscaSiClieTieneAlm(self,IDCliente):
           DataAlmacen=[]
           query="SELECT Clave FROM  tblContenedoresMateriaPrima WHERE IDCliente= ?"
           Data=run_query2(self,query,(IDCliente,))
           if len(Data) == 0 :
               ClaveAlmacen="VALMO"
           else :
                ClaveAlmacen=Data[0][0]
           DataAlmacen.append(ClaveAlmacen)
           query=" SELECT  ID,Clave FROM tblContenedoresProducto "
           Data=run_query2(self,query)
           IDAlmaProd=""
           for j in range(0,len(Data)):
              if  Data[j][1] == ClaveAlmacen :
                   IDAlmaProd=Data[j][0]
           if IDAlmaProd == "" :
               for j in range(0,len(Data)):
                   if  Data[j][1] == "VALMO" :
                       IDAlmaProd=Data[j][0]
           DataAlmacen.append(IDAlmaProd)
           return DataAlmacen
             
       def ChecaF_O_I(self):
           Cant=self.ui.CapturaCampo.text()
           try:
               float(Cant)
               return True
	       
           except:
               return False

       def ChecaCantProd(self):
           v=self.ChecaF_O_I()
           Cant=self.ui.CapturaCampo.text()
           validar = v  and float(Cant)   < 3501 and float(Cant) >= 0
           if Cant == "":
              self.ui.CapturaCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CapturaCampo.setStyleSheet("border: 2px solid red;")
              return False
           elif validar:
              self.ui.CapturaCampo.setStyleSheet("border: 2px solid green;")
              return True 
           if int(Acumulado)  > 4500 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Se sobrepasa la Capacidad de la Tolva de 4500kgs")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return False
           else :
               return True 
       
       def CargaAAlmaProdSurtCorrales(self,Fecha,IDCliente,IDAlmacen,IDProd,Cant,Nota):
           TipoMov=2
           Oper=6
           datos=(Fecha,TipoMov,IDCliente,IDAlmacen,IDProd,Cant,Oper,Nota)
           query="INSERT INTO tblProductoMovimientos VALUES(NULL, NULL, ?, ?, ?, ?, ?, ?, ?, NULL,  NULL,  NULL, ?)"
           run_query2(self,query,datos)


class ListaOrdenesSurtido(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           self.ui=Ui_ListaOS()
           self.ui.setupUi(self)
           self.ui.Tabla.setColumnWidth(0,0)
           self.ui.Tabla.setColumnWidth(1,80)
           self.ui.Tabla.setColumnWidth(4,100)
           self.ui.Tabla.setColumnWidth(2,180)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.ui.PBAgregar.clicked.connect(self.AgregarOrden)
           self.ui.PBDetalle.clicked.connect(self.VerDetalleOrdenSurtido)
           self.ui.PBActualiza.clicked.connect(self.ListaOrdenes)
           self.ui.PBLogToEx.clicked.connect(self.LogToExcel)
           global ProdData,CorrData,DataCliente,Lista,NoOrden,UltimoFolio,Acumulado
           self.ui.RBotActivas.toggled.connect(self.ListaOrdenes) 
           self.ui.RBotCerradas.toggled.connect(self.ListaOrdenes)
           self.ui.RBotEnT1.toggled.connect(self.ListaOrdenes)
           self.ui.RBotEnT2.toggled.connect(self.ListaOrdenes)
           self.ui.RBotTodas.toggled.connect(self.ListaOrdenes)  
           #self.ui.Tabla.itemSelectionChanged.connect(self.ListaSelectRows)
           query="SELECT ID,Descripcion FROM  tblProductos"
           ProdData=run_query(self,query)
           self.ListaOrdenes()
             
       def ListaSelectRows(self):
           CuRo=self.ui.Tabla.currentRow()
           #print(CuRo)
              
       def ListaOrdenes(self):
           global ListaOrdenesSurtido
           if self.ui.RBotActivas.isChecked():
                 query="""
                     SELECT  tblOrdenesSurtido.ID, tblOrdenesSurtido.NoOrden, tblProductos.Descripcion, tblOrdenesSurtido.Status
                     FROM tblOrdenesSurtido
                     INNER JOIN tblProductos ON tblOrdenesSurtido.IDProducto=tblProductos.ID 
                     WHERE Status=0"""
           elif self.ui.RBotEnT1.isChecked():
                query="""
                     SELECT  tblOrdenesSurtido.ID, tblOrdenesSurtido.NoOrden, tblProductos.Descripcion, tblOrdenesSurtido.Status
                     FROM tblOrdenesSurtido
                     INNER JOIN tblProductos ON tblOrdenesSurtido.IDProducto=tblProductos.ID 
                     WHERE Status=1"""
           elif self.ui.RBotEnT2.isChecked():
                query="""
                     SELECT  tblOrdenesSurtido.ID, tblOrdenesSurtido.NoOrden, tblProductos.Descripcion,  tblOrdenesSurtido.Status
                     FROM tblOrdenesSurtido
                     INNER JOIN tblProductos ON tblOrdenesSurtido.IDProducto=tblProductos.ID 
                     WHERE Status=2 """
           
           elif self.ui.RBotCerradas.isChecked():
                query="""
                     SELECT  tblOrdenesSurtido.ID, tblOrdenesSurtido.NoOrden, tblProductos.Descripcion, tblOrdenesSurtido.Status
                     FROM tblOrdenesSurtido
                     INNER JOIN tblProductos ON tblOrdenesSurtido.IDProducto=tblProductos.ID 
                     WHERE Status=5 OR Status= 6 OR Status= 7"""
           else :
                query="""
                     SELECT  tblOrdenesSurtido.ID, tblOrdenesSurtido.NoOrden, tblProductos.Descripcion, tblOrdenesSurtido.Status
                     FROM tblOrdenesSurtido
                     INNER JOIN tblProductos ON tblOrdenesSurtido.IDProducto=tblProductos.ID """
           ListaOrdenesSurtido=run_query(self,query)    
           self.ui.Tabla.setRowCount(0)
           for ren in range(0,len(ListaOrdenesSurtido)):
               if ListaOrdenesSurtido[ren][3] == 0 :
                   St="Activa"
               elif  ListaOrdenesSurtido[ren][3] == 1 :
                   St="Por Sur T#1"
               elif  ListaOrdenesSurtido[ren][3] == 2 :
                   St="Por Sur T#2"
               elif  ListaOrdenesSurtido[ren][3] == 5:
                   St="CompMan"
               elif  ListaOrdenesSurtido[ren][3] == 6:
                   St="CompPor T#1"
               elif  ListaOrdenesSurtido[ren][3] == 7:
                   St="CompPor T#2"

               self.ui.Tabla.insertRow(ren)
               #self.ui.Tabla.setItem(ren, 0, QtWidgets.QTableWidgetItem(str(ListaOrdenesSurtido[ren][0])))
               self.ui.Tabla.setItem(ren, 0, QtWidgets.QTableWidgetItem(str(ListaOrdenesSurtido[ren][0])))
               self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(ListaOrdenesSurtido[ren][1])))
               self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(str(ListaOrdenesSurtido[ren][2])))
               self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem('ND'))
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(St))
      
       def AgregarOrden(self):
           self.dialog= CapturaOrdenSurtido()
           self.dialog.show()
           self.ListaOrdenes()

       def VerDetalleOrdenSurtido(self):
           CuRo=self.ui.Tabla.currentRow()
           CurrIDOrden=ListaOrdenesSurtido[CuRo]
           self.dialog=DetalleOrdenesSurtido(CurrIDOrden)
           self.dialog.show()
             
       def  LogToExcel(self):
            return
            query= """
            SELECT tblDetalleOrdenSurtido.Folio, tblOrdenesSurtido.NoOrden, tblClientes.Nombre,  tblProductos.Descripcion ,tblCorrales.Descripcion , tblDetalleOrdenSurtido.CantSolicitada, 
            tblDetalleOrdenSurtido.CantSurtida,tblDetalleOrdenSurtido.Fecha
            FROM tblOrdenesSurtido
            INNER JOIN tblProductos ON tblOrdenesSurtido.IDProducto=tblProductos.ID
            INNER JOIN tblDetalleOrdenSurtido ON tblDetalleOrdenSurtido.IDOrden=tblOrdenesSurtido.ID
            INNER JOIN tblClientes ON tblDetalleOrdenSurtido.IDCliente=tblClientes.ID 
            INNER JOIN tblCorrales ON tblDetalleOrdenSurtido.IDCorral=tblCorrales.ID
            ORDER BY tblDetalleOrdenSurtido.Fecha 
            """
            # WHERE  tblDetalleOrdenSurtido.IDCliente = ?  AND  tblDetalleOrdenSurtido.CantSurtida > 0 AND (tblDetalleOrdenSurtido.Fecha BETWEEN ? AND ? 
            Data=run_query2(self,query)
            query="SELECT  *  FROM  tblConfigs  WHERE ID =2 "
            ruta=run_query(self,query)
            ruta=ruta[0][2]
            ExcelFile=ruta+'LogOrdenesSurtido.xlsx'
            DataTableToExcel(self,ExcelFile,["LogOrdenesSurido",],[Data,]) 

class  DetalleOrdenesSurtido(QDialog):
       def __init__(self,CurrOrden):
           QDialog.__init__(self)
           self.ui=Ui_DetalleOrdenSurtido()
           self.ui.setupUi(self)
           self.ui.Tabla.setColumnWidth(0,0)
           self.CurrOrden=CurrOrden
           St="Activa"
           IDNoOrden=CurrOrden[0]
           self.ui.NoOrdenValLbl.setText(str(CurrOrden[1]))
           self.ui.NombreProValLbl.setText(CurrOrden[2])
           Estatus=CurrOrden[3]
           if Estatus==0 :
               St="Activa"
           elif Estatus==1 :
               St="En Tolva#1"
           elif Estatus==2:
                St="En Tolva#2"
           elif Estatus==5:
                St="Comp Man"
           elif Estatus==6:
                St="En Auto Tolva#1"
           elif Estatus==7:
                St="En Auto Tolva#2"    
           self.ui.EstatusOrdenValLbl.setText(St)
           query="""SELECT tblDetalleOrdenSurtido.Folio,  tblCorrales.Descripcion, tblDetalleOrdenSurtido.CantSolicitada,tblDetalleOrdenSurtido.CantSurtida,tblDetalleOrdenSurtido.Fecha 
           FROM tblDetalleOrdenSurtido
           INNER JOIN tblCorrales ON  tblDetalleOrdenSurtido.IDCorral= tblCorrales.ID
           WHERE IDOrden= ? """
           data=(IDNoOrden,)
           OrdenesSurtido=run_query2(self,query,data)
           self.ui.Tabla.setRowCount(0)
           TotalSol=0
           TotalSurtido=0
           for ren in range(0,len(OrdenesSurtido)):
               self.ui.Tabla.insertRow(ren)
               self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(OrdenesSurtido[ren][0]))) 
               self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(str(OrdenesSurtido[ren][1]))) 
               self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem(str(OrdenesSurtido[ren][2])))    
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(str(OrdenesSurtido[ren][3]))) 
               self.ui.Tabla.setItem(ren, 5, QtWidgets.QTableWidgetItem(str(OrdenesSurtido[ren][4])))   
               if OrdenesSurtido[ren][2] == None:
                   CurrSol=0
               else :
                   CurrSol=int(OrdenesSurtido[ren][2])
               if  OrdenesSurtido[ren][3] != None :
                   CurrSurtido=int(OrdenesSurtido[ren][3])
               else :
                   CurrSurtido=0
               TotalSol+=CurrSol
               TotalSurtido+=CurrSurtido
           self.ui.TotalSolValLbl.setText(str(TotalSol))
           self.ui.TotalSurtidoValLbl.setText(str(TotalSurtido))
           self.ui.PBCerrar.clicked.connect(self.close)





class CapturaOrdenSurtido(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           self.ui=Ui_CapturaOSur()
           self.ui.setupUi(self)
           self.ui.Tabla.setColumnWidth(0,0)
           self.ui.CantSolCampo.textChanged.connect(self.ChecaCantSolProd)
           self.ui.CantSurCampo.textChanged.connect(self.ChecaCantSurProd)
           self.ui.CorralCampo.textChanged.connect(self.FiltroCorral)
           self.ui.ProductoCBox.activated.connect(self.CurrProdCBoxdata)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.ui.PBAgregar.clicked.connect(self.AgregarATabla)
           self.ui.PBBorrar.clicked.connect(self.BorrarRenTabla)
           self.ui.PBGuardar.clicked.connect(self.GuardaOrden)
           self.ui.Lista.itemClicked.connect(self. AjustaSelCorr)
           #self.ui.CantCampo.returnPressed.connect(self.AgregarATabla)
           now = QDateTime.currentDateTime().date()
           self.ui.FechaSolWid.setDate(now)
           self.ui.FechaSurtWid.setDate(now)
           self.ui.NoOrdenCampo.setFocus()
           global ProdData,CorrData,CorralesTodos,DataCliente,Lista,ListaToTabla,NoOrden,IDOrden,UltimoFolio,Acumulado,CorrLista
           ren=0
           Lista=[]
           ListaToTabla=[]
           query="SELECT ID,Clave,Descripcion FROM  tblProductos WHERE IDTipoStatus='Activo' and SeSirve= 'Si' ORDER BY Descripcion"
           ProdData=run_query(self,query)
           query="SELECT * FROM tblCorrales WHERE AsignACliente > 0 ORDER BY Descripcion"
           CorrData=run_query(self,query)
           query="SELECT * FROM  tblClientes"
           DataCliente=run_query(self,query)
           query="SELECT ID,NoOrden FROM tblOrdenesSurtido ORDER BY NoOrden DESC LIMIT 1"
           NO=run_query(self,query)
           if len(NO) ==0 :
               NoOrden=1
           else :
               NoOrden=int(NO[0][1])
               IDOrden=int(NO[0][0])+1
               NoOrden=NoOrden+1  
           self.ui.NoOrdenCampo.setText(str(NoOrden))
           query="SELECT Folio FROM tblDetalleOrdenSurtido ORDER BY Folio DESC LIMIT 1"
           UF=run_query(self,query) 
           if len(UF) == 0 :
               UltimoFolio=0
           else:
               UltimoFolio=int(UF[0][0])       
           self.TraerData()
           self.ui.Tabla.setRowCount(0) 
           self.LlenaTabla()
           self.ChecaCantSolProd()
           self.FiltroCorral()
           self.SelecCorral()
           
       def TraerData(self):
           global CorrSel
           CorrSel=1
           self.ui.ProductoCBox.clear()
           for item in ProdData :
               j=str(item[2])
               self.ui.ProductoCBox.addItem(j) 
           self.ui.ProductoCBox.setCurrentIndex(0)
           i=0
                    
       
       def CurrProdCBoxdata(self):
           global CurrProdData
           i=self.ui.ProductoCBox.currentIndex()
           CurrProdID=ProdData[i][0]
           query="SELECT ID,Clave,Descripcion FROM  tblProductos WHERE ID=?"
           CurrProdData=run_query1SinMsg(self,query,(CurrProdID,))
           self.ui.ClaveProdValLbl.setText(CurrProdData[1])
           self.ui.NombreProValLbl.setText(CurrProdData[2])
           #self.ui.CantSolCampo.setFocus() 
           return CurrProdData
           pass
             
       def FiltroCorral(self):
           global CorrSel,CorrLista,CorrData
           CorrLista=[]
           self.ui.Lista.clear()
           d=self.ui.CorralCampo.text()
           CorrDes=d.upper()
           self.ui.CorralCampo.setText(CorrDes)
           if d !="" :
               CorrLista=[]
               self.ui.Lista.clear()
               for i in range(0,len(CorrData)):
                   DatToTest=CorrData[i][2]
                   res=DatToTest.startswith(CorrDes)
                   if res== True :
                       CorrLista.append(CorrData[i])
           elif d == "":
               CorrLista=[]
               self.ui.Lista.clear()
               for k in range(0,len(CorrData)):
                   CorrLista.append(CorrData[k])
           for i in range(0,len(CorrLista)):
               self.ui.Lista.addItem(str(CorrLista[i][2]))
           self.ui.Lista.setCurrentRow(0)
           self.SelecCorral()
          
       def SelecCorral(self):
           global CorrSel,CorrLista
           CorrSel=self.ui.Lista.currentRow()
           if CorrSel < 0:
               return
           TemDat=CorrLista[CorrSel][5]
           for l in range(0,len(DataCliente)):
                if DataCliente[l][0]==TemDat:
                   self.ui.ClienteValLbl.setText(str(DataCliente[l][2]))   
           self.ui.CorralSelLblVal.setText(str(CorrLista[CorrSel][2]))        
           
       def AjustaSelCorr(self):
           self.SelecCorral()
           #self.ui.CantSolCampo.setFocus()
                   
       def AgregarATabla(self):
           global UltimoFolio,CorrSel,CorrLista
           f=self.ui.FechaSurtWid.date()
           FechaSurt=f.toString(Qt.ISODate)
           f=self.ui.FechaSolWid.date()
           FechaSol=f.toString(Qt.ISODate)
           UltimoFolio=UltimoFolio+1
           ListaTemp=[]
           if len(CorrLista) == 0 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText(" Selecciona en la lista un Corral")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return 

           if self.ChecaCantSolProd() and self.ChecaCantSurProd() :  
              ListaTemp.append(CorrLista[CorrSel][5])
              ListaTemp.append(UltimoFolio)
              ListaTemp.append(CorrLista[CorrSel][0])
              ListaTemp.append(self.ui.CantSolCampo.text())
              ListaTemp.append(self.ui.CantSurCampo.text())
              ListaTemp.append(FechaSurt)
              ListaTemp.append(FechaSol)
              Lista.append(ListaTemp)
              self.LlenaTabla()
           else :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText(" Dato Capturado erroneo")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return 
           
           self.ui.CantSolCampo.clear()
           self.ui.CantSurCampo.clear()
           #self.ui.CorralCampo.setFocus()  

       def BorrarRenTabla(self):
           if len(Lista) == 0 :
              return False
           global UltimoFolio
           UltimoFolio=UltimoFolio-1
           Lista.pop()
           self.LlenaTabla()
       
       def LlenaTabla(self):
           global CorrData
           Acumulado=0
           NombCorral=''
           self.ui.Tabla.setRowCount(0)
           for ren in range(0,len(Lista)):
               self.ui.Tabla.insertRow(ren)
               for i in range(0,len(CorrData)):
                   if int(Lista[ren][2]) == CorrData[i][0]:
                       NombCorral=CorrData[i][2]
               self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(Lista[ren][1])))
               self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(NombCorral))
               self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem(str(Lista[ren][3])))
               self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(str(Lista[ren][4])))
               Acumulado=Acumulado+float(Lista[ren][4])
           self.ui.AcuValLbl.setText(str(Acumulado))
           return Acumulado
       
       def ChecaF_O_I(self,Data):
           Cant=Data
           try:
               float(Cant)
               return True
	       
           except:
               return False

       def ChecaCantSolProd(self):
           global Acumulado
           Cant=self.ui.CantSolCampo.text()
           v=self.ChecaF_O_I(Cant)
           validar = v  and float(Cant)   < 3501 and float(Cant) >= 0
           if Cant == "":
              self.ui.CantSolCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CantSolCampo.setStyleSheet("border: 2px solid red;")
              return False
           elif validar:
              self.ui.CantSolCampo.setStyleSheet("border: 2px solid green;")
              return True 
           if int(Acumulado)  > 4500 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Se sobrepasa la Capacidad de la Tolva de 4500kgs")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return False
           else :
               return True 

       def ChecaCantSurProd(self):
           Cant=self.ui.CantSurCampo.text()
           v=self.ChecaF_O_I(Cant)
           validar = v  and float(Cant)   < 3501 and float(Cant) >= 0
           if Cant == "":
              self.ui.CantSurCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CantSurCampo.setStyleSheet("border: 2px solid red;")
              return False
           elif validar:
              self.ui.CantSurCampo.setStyleSheet("border: 2px solid green;")
              return True 
           if int(Acumulado)  > 4500 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Se sobrepasa la Capacidad de la Tolva de 4500kgs")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return False
           else :
               return True 

       def ChecaAcumulado(self): 
           acc=0
           for ren in range(0,len(Lista)):
               acc=acc+int(Lista[ren][1])
           if int(acc)  > 4500 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Se sobrepasa la Capacidad de la Tolva de 4500kgs")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return False
           else :
               return True
           
       def CargaDesgloseMPsDeServidos(self,IDOrden,NoOrden,IDProd):
           TotalO=TotalOrden(self,IDOrden)
           TotalRamonA= TotalServClienteEnOrden(self,IDOrden,3)
           TotalJulian= TotalServClienteEnOrden(self,IDOrden,4)
           if TotalO == None :
               TotalO=0
               return
           if TotalRamonA == None :
               TotalRamonA=0
           if TotalJulian == None :
               TotalJulian=0
           TotalValmo=TotalO-TotalRamonA-TotalJulian 
           now = QDateTime.currentDateTime().date()
           Fecha=now.toString(Qt.ISODate)
           if TotalRamonA > 0 :
               ID=GenerarFolioSalidas(self,0,Fecha,1)
               GuardaMovMP_Prod(self,1,ID,0,1,3,1,IDProd,TotalRamonA,2,NoOrden,"")
               HaceCargoEnAlmaMP_X_SalProd(self,Fecha,IDProd,1,3,4,TotalRamonA,2,NoOrden)
           if TotalJulian > 0 :
               ID=GenerarFolioSalidas(self,0,Fecha,1)
               GuardaMovMP_Prod(self,1,ID,0,1,4,2,IDProd,TotalJulian,2,NoOrden,"")
               HaceCargoEnAlmaMP_X_SalProd(self,Fecha,IDProd,1,4,5,TotalJulian,2,NoOrden)
           
           if TotalValmo > 0:
               query= """   SELECT  tblDetalleOrdenSurtido.IDCliente, SUM( tblDetalleOrdenSurtido.CantSurtida)
                            FROM  tblDetalleOrdenSurtido
                            WHERE tblDetalleOrdenSurtido.IDOrden = ? AND tblDetalleOrdenSurtido.IDCliente <> 3  AND tblDetalleOrdenSurtido.IDCliente <> 4
                            GROUP BY IDCliente
                      """
               TotalesClienValmoEnOSur=run_query(self,query,(IDOrden,)) 
               for ren in range(0,len(TotalesClienValmoEnOSur)):
                   ID=GenerarFolioSalidas(self,0,Fecha,1)
                   GuardaMovMP_Prod(self,1,ID,0,1,TotalesClienValmoEnOSur[ren][0],3,IDProd,TotalesClienValmoEnOSur[ren][1],2,NoOrden,"")
               HaceCargoEnAlmaMP_X_SalProd(self,Fecha,IDProd,1,48,3,TotalValmo,2,NoOrden)

               """
               ID=GenerarFolioSalidas(self,0,Fecha,1)
               GuardaMovMP_Prod(self,1,ID,0,1,48,3,IDProd,TotalValmo,2,NoOrden,"")
               HaceCargoEnAlmaMP_X_SalProd(self,Fecha,IDProd,1,48,3,TotalValmo,2,NoOrden)
               """

       def GuardaOrden(self):
           CurrProdData=self.CurrProdCBoxdata()
           if len(Lista) == 0 :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("No hay Datos Para Guardar")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           now = QDateTime.currentDateTime().date()
           Fecha=now.toString(Qt.ISODate)
           #  ***************  Genera Folio de Salida  *****************
           #IDSalida=GenerarFolioSalidas(self,0,Fecha,1)
           Acumulado=self.LlenaTabla()
           prod=CurrProdData[0]
           status=5
           parameters =  (NoOrden,prod,status,0)
           query="INSERT INTO tblOrdenesSurtido VALUES(NULL, ?, ?, ?, ?)"
           run_query2(self,query,parameters)
           query="SELECT ID FROM tblOrdenesSurtido ORDER BY NoOrden DESC LIMIT 1"
           IDLi=run_query(self,query) 
           IDOrden=int(IDLi[0][0])
           for ren in range(0,len(Lista)):
               Lista[ren].insert(1,IDOrden)
           try:
               DBConMuchos=sqlite3.connect("valmodb")
               cur=DBConMuchos.cursor()
               #j=cur.execute("INSERT INTO tblOrdenesSurtido VALUES(NULL, ?, ?, ?, ?)",parameters)
               k=cur.executemany("INSERT INTO tblDetalleOrdenSurtido VALUES(NULL, ?, ?, ?, ?, ?,?, ?, ?)",Lista)
               result=cur.fetchall
               DBConMuchos.commit()
               MsgGrabReg(True)
           except sqlite3.OperationalError :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("No se econtro tablas en  DB")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_() 
               exit()
           #  Hace cargo a almacenes de MP  desglose de los servidos
           self.CargaDesgloseMPsDeServidos(IDOrden,NoOrden,prod)
           self.close()
           self.dialog=CapturaOrdenSurtido()
           self.dialog.show()

class  AsignaCorral(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           self.ui=UiAsignaCorral()
           self.ui.setupUi(self)
           #self.ui.Tabla.hideColumn(0)
           self.ui.Tabla.setColumnWidth(0,0)
           self.ui.Tabla.setColumnWidth(1,100)
           self.ui.Tabla.setColumnWidth(3,80)
           self.ui.Tabla.setColumnWidth(4,200)
           self.ui.Tabla.setColumnWidth(5,150)
           self.ui.RBotAsignar.toggled.connect(self.LlenaTabla)
           self.ui.RBotLibera.toggled.connect(self.LlenaTabla)
           self.ui.RBotTodos.toggled.connect(self.LlenaTabla)
           self.ui.RBotPorCliente.toggled.connect(self.LlenaTabla)
           self.ui.ClienteCBox.activated.connect(self.LlenaTabla)
           self.ui.PBActuliza.clicked.connect(self.ActualizaFun)
           self.ui.CorralCampo.textChanged.connect(self.LlenaTabla)
           self.ui.PBCerrar.clicked.connect(self.close)
           self.InicializaClieCBox()
           now = QDateTime.currentDateTime().date()
           self.ui.FechaSel.setDate(now)
           self.LlenaTabla()

       def InicializaClieCBox(self):
           global DataCliente
           query="SELECT ID,Clave,Nombre FROM  tblClientes ORDER BY Nombre"
           DataCliente=run_query(self,query)
           self.ui.ClienteCBox.clear()
           for item in DataCliente :
               j=str(item[2])
               self.ui.ClienteCBox.addItem(j) 
           self.ui.ClienteCBox.setCurrentIndex(0)

       def LlenaTabla(self):
           global CorrData
           i=self.ui.ClienteCBox.currentIndex()
           corr=self.ui.CorralCampo.text()
           CorrData=[]
           if self.ui.RBotAsignar.isChecked()  :
              query="SELECT * FROM tblCorrales WHERE AsignACliente=? AND IDTipoStatus='Activo' ORDER BY Descripcion"
              cliente=0
              CorrData=run_query2(self,query,(cliente,))
              CorrData.sort()
              if self.ui.checkBox.isChecked():
                  CorrData=FiltroCorral(self,CorrData,corr)
              
           elif  self.ui.RBotLibera.isChecked() and self.ui.RBotTodos.isChecked()  :
              query="SELECT * FROM tblCorrales WHERE AsignACliente > ? AND IDTipoStatus='Activo' "
              cliente=0
              CorrData=run_query2(self,query,(cliente,))
              CorrData.sort()
              if self.ui.checkBox.isChecked():
                  CorrData=FiltroCorral(self,CorrData,corr)
           
           elif self.ui.RBotLibera.isChecked() and self.ui.RBotPorCliente.isChecked() :
               query="SELECT * FROM tblCorrales WHERE AsignACliente=? AND IDTipoStatus='Activo' ORDER BY Descripcion"
               cliente=DataCliente[i][0]
               CorrData=run_query2(self,query,(cliente,))
               CorrData.sort()
               if self.ui.checkBox.isChecked():
                  CorrData=FiltroCorral(self,CorrData,corr)
              
           if  CorrData != None :
               self.ui.Tabla.setRowCount(0)
           
           for ren in range(0,len(CorrData)):
               self.ui.Tabla.insertRow(ren)
               self.ui.Tabla.setItem(ren, 0, QtWidgets.QTableWidgetItem(str(CorrData[ren][0])))
               self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(CorrData[ren][1])))
               self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(str(CorrData[ren][2])))
               self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem(str(CorrData[ren][3])))
               for l in range(0,len(DataCliente)):
                   if DataCliente[l][0]==CorrData[ren][5]:
                       self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(str(DataCliente[l][2])))
               self.ui.Tabla.setItem(ren, 5, QtWidgets.QTableWidgetItem(str(CorrData[ren][7])))
                                  
       def ActualizaFun(self):
           f_ini=self.ui.FechaSel.date()
           currDaTi=f_ini.toString(Qt.ISODate)
           CuRo=self.ui.Tabla.currentRow()
           items = self.ui.Tabla.selectedItems()
           i=self.ui.ClienteCBox.currentIndex()
           if self.ui.RBotAsignar.isChecked() :
              dato=DataCliente[i][0]
           else:
              dato=0
              currDaTi=""
           if self.ui.RBotLibera.isChecked() :
               if int(CorrData[CuRo][6]) > 0 :
                   msg=QMessageBox()
                   msg.setWindowTitle("Informacion")
                   msg.setText("No se puede liberar Corral con Animales")
                   msg.setIcon(QMessageBox.Warning)
                   x=msg.exec_() 
                   return
           if len(items) > 0  :
              Ind=str(items[0].text())
              query = """UPDATE  tblCorrales SET   AsignACliente = ?, FechaAsigna=?  WHERE ID = ?"""
              parameters =  (dato,currDaTi,Ind)
              res=run_query(self,query, parameters)
              self.LlenaTabla()
              if dato > 0 :
                  DataCliente[i][2]
           else:
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("Selecciona un renglon")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()

class MovAnimales(QDialog):
     def __init__(self):
         QDialog.__init__(self)
         self.ui=Ui_MovAnimalesPpal()
         self.ui.setupUi(self)
         global Lista
         self.ui.Tabla.setColumnWidth(0,50)
         self.ui.Tabla.setColumnWidth(2,200)
         self.ui.Tabla.setColumnWidth(3,80)
         self.ui.Tabla.setColumnWidth(5,50)
         self.ui.Tabla.setColumnWidth(6,200)
         self.ui.PBCerrar.clicked.connect(self.close)
         self.ui.PBAgregar.clicked.connect(self.Agregar)
         self.ui.PBActualizar.clicked.connect(self.TraerLista)
         self.TraerLista()
     def TraerLista(self):
         query= """
         SELECT tblMovimientoAnimales.Folio, tblMovimientoAnimales.Fecha, tblClientes.Nombre , tblCorrales.Descripcion, tblMovimientoAnimales.IDMovimiento,
         tblMovimientoAnimales.Cantidad, tblMovimientoAnimales.Notas
         FROM tblMovimientoAnimales
         INNER JOIN tblClientes ON tblMovimientoAnimales.IDCliente=tblClientes.ID 
         INNER JOIN tblCorrales ON tblMovimientoAnimales.IDCorral=tblCorrales.ID
         """
         Lista=run_query(self,query)
         self.ui.Tabla.setRowCount(0)
         for ren in range(0,len(Lista)):
             self.ui.Tabla.insertRow(ren)
             if int(Lista[ren][4]) == 0 :
                 TipoMov="Entrada"
             elif int(Lista[ren][4]) == 1 :
                 TipoMov="Salida"
             self.ui.Tabla.setItem(ren, 0, QtWidgets.QTableWidgetItem(str(Lista[ren][0])))
             self.ui.Tabla.setItem(ren, 1, QtWidgets.QTableWidgetItem(str(Lista[ren][1])))
             self.ui.Tabla.setItem(ren, 2, QtWidgets.QTableWidgetItem(str(Lista[ren][2])))
             self.ui.Tabla.setItem(ren, 3, QtWidgets.QTableWidgetItem(str(Lista[ren][3])))
             self.ui.Tabla.setItem(ren, 4, QtWidgets.QTableWidgetItem(TipoMov))
             self.ui.Tabla.setItem(ren, 5, QtWidgets.QTableWidgetItem(str(Lista[ren][5])))
             self.ui.Tabla.setItem(ren, 6, QtWidgets.QTableWidgetItem(str(Lista[ren][6])))
     
     def Agregar(self):
         self.dialog= AgregarMovAnimales()
         self.dialog.show()

class  AgregarMovAnimales(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           self.ui=Ui_MovAnimalesVer1()
           #self.ui=UiMovAnimales()
           self.ui.setupUi(self)
           global Lista
           Lista=[]
           #self.ui.Tabla.hideColumn(0)
           self.ui.CorralCBox.activated.connect(self.AjustaCorrData)
           self.ui.ClienteCBox.activated.connect(self.JalaCorralesDeClieSel)
           self.ui.TipoMovCBox.activated.connect(self.TipoMovimiento)
           self.ui.CantCampo.textChanged.connect(self.ChecaCant)
           self.ui.PesoCampo.textChanged.connect(self.ChecaPeso)
           self.ui.PBCerrar.clicked.connect(self.close)
           #self.ui.PBAgregar.clicked.connect(self.AgregarATabla)
           #self.ui.PBBorrar.clicked.connect(self.BorrarRenTabla)
           self.ui.PBGuardar.clicked.connect(self.GuardarMovimiento)
           now = QDateTime.currentDateTime().date()
           self.ui.FechaMvtoSel.setDate(now)
           self.TraeTablasFrmDB()
           self.TraerData()
           self.TipoMovimiento()
           self.JalaCorralesDeClieSel()
             
       def TraeTablasFrmDB(self): 
           global CorrData,DataCliente,DataTipoAnimales,UltimoFolio   
           query="SELECT * FROM tblCorrales WHERE AsignACliente > 0 ORDER BY Descripcion"
           CorrData=run_query(self,query)
           query="SELECT ID,Clave,Nombre FROM  tblClientes ORDER BY Nombre"
           DataCliente=run_query(self,query)
           query="SELECT * FROM  tblTipoAnimales"
           DataTipoAnimales=run_query(self,query)
           query="SELECT Folio FROM tblMovimientoAnimales ORDER BY Folio DESC LIMIT 1"
           UF=run_query(self,query) 
           UltimoFolio=int(UF[0][0])
           self.ui.FolioValLbl.setText(str(UltimoFolio+1))
              
       def TraerData(self):
           self.ui.ClienteCBox.clear()
           for i  in range(len(DataCliente)) :
               self.ui.ClienteCBox.addItem(DataCliente[i][2])
           self.ui.TipoAnimalCBox.clear()
           for item in DataTipoAnimales:
               j=str(item[1])
               self.ui.TipoAnimalCBox.addItem(j)    
           self.ui.TipoMovCBox.clear()
           self.ui.TipoMovCBox.addItem("ENTRADA")
           self.ui.TipoMovCBox.addItem("SALIDA")
           self.ChecaCant()
           self.ChecaPeso()
           self.ui.CantCampo.setFocus()
          
       def JalaCorralesDeClieSel(self):
           global CorrData
           idxcliente=self.ui.ClienteCBox.currentIndex()
           idcliente=DataCliente[idxcliente][0]
           query= " SELECT id, Descripcion, Clave, IDTipoStatus FROM tblCorrales WHERE AsignACliente = ?"      
           CorrData=run_query2(self,query,(idcliente,))
           self.ui.CorralCBox.clear()
           if len(CorrData) == 0 :
               self.ui.CorralCBox.addItem("Sin Corral Asignado")
           else :
               for i in range(0,len(CorrData)):
                   self.ui.CorralCBox.addItem(CorrData[i][1])
           self.AjustaCorrData() 
                  
       def AjustaCorrData(self):
           global CorrData
           idxCorral=self.ui.CorralCBox.currentIndex()
           if len(CorrData)  == 0 :
              self.ui.NombreValLbl.setText('ND')
              self.ui.ClaveValLbl.setText('ND')
              self.ui.EstatusValLbl.setText('ND')
           else :
              self.ui.NombreValLbl.setText(CorrData[idxCorral][1])
              self.ui.ClaveValLbl.setText(CorrData[idxCorral][2])
              self.ui.EstatusValLbl.setText(CorrData[idxCorral][3])
           
       def TipoMovimiento(self):
           if self.ui.TipoMovCBox.currentIndex() == 0:
               self.ui.BanerLbl.setText("ENTRADA")
               self.ui.PesoLbl.setText("Peso de Entrada")
           elif self.ui.TipoMovCBox.currentIndex() == 1:
               self.ui.BanerLbl.setText("SALIDA")
               self.ui.PesoLbl.setText("Peso de Salida")

       def ChecaCant(self):
           Cant=self.ui.CantCampo.text()
           validar = Cant.isdigit() 
           if Cant == "":
              self.ui.CantCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CantCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
              self.ui.CantCampo.setStyleSheet("border: 2px solid green;")
              return True 
      
       def ChecaPeso(self):
           Peso=self.ui.PesoCampo.text()
           validar = Peso.isdigit() 
           if Peso == "":
              self.ui.PesoCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.PesoCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
              self.ui.PesoCampo.setStyleSheet("border: 2px solid green;")
              return True
      
       def GuardarMovimiento(self):
           global CorrData
           if len(CorrData) == 0 :
              msg=QMessageBox()
              msg.setWindowTitle("Informacion")
              msg.setText("El cliente no tiene corrales asignados")
              msg.setIcon(QMessageBox.Warning)
              x=msg.exec_()
              return
           CantDeEsteMov=self.ui.CantCampo.text()
           Peso=self.ui.PesoCampo.text()
           TipoAnimal=DataTipoAnimales[self.ui.TipoAnimalCBox.currentIndex()][0]
           if self.ChecaCant() == False or self.ChecaPeso() == False or int(CantDeEsteMov) == 0 or Peso== 0:
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Datos Erroneos")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
          
           if int(CantDeEsteMov) == 0:
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Numero de Animales igual a cero No se puede guardar")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_()
               return
           Notas=self.ui.Notas.toPlainText()
           idcliente=DataCliente[self.ui.ClienteCBox.currentIndex()][0]
           idcorral=CorrData[self.ui.CorralCBox.currentIndex()][0]
           TMov=self.ui.TipoMovCBox.currentIndex()
           Fecha=self.ui.FechaMvtoSel.date()
           FechaMvto=Fecha.toString(Qt.ISODate)
           NoGuia=self.ui.GuiaCampo.text()
           Datos=(idcliente,idcorral,CantDeEsteMov,TMov,FechaMvto,Notas,Peso,NoGuia,TipoAnimal)
           query="INSERT INTO tblMovimientoAnimales VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
           run_query2(self,query,Datos)
           MsgGrabReg(True)
           query="SELECT Folio FROM tblMovimientoAnimales ORDER BY Folio DESC LIMIT 1"
           UF=run_query(self,query) 
           UltimoFolio=int(UF[0][0])
           self.ui.FolioValLbl.setText(str(UltimoFolio+1))
           self.ui.Notas.clear()
           self.ui.CantCampo.clear()
           self.ui.PesoCampo.clear()
          
class  EntSalMPrima(QDialog):
       def __init__(self,TipoMov):
           QDialog.__init__(self)
           self.ui=Ui_EntradasMPWin()
           self.ui.setupUi(self) 
           self.TipoMov=TipoMov
           now = QDateTime.currentDateTime().date()
           self.ui.FechaMov.setDate(now)
           self.ui.PBCerrar.clicked.connect(self.close)  
           self.ui.CantCampo.textChanged.connect(self.ChecaCant)
           self.ui.MPProdCBox.activated.connect(self.LeeMPCBox)
           self.ui.PBGuardar.clicked.connect(self.GuardarFolio) 
           self.ui.ManFolioCampo.setDisabled( True)
           #self.ui.FolioLbl.setText("Folio")
           self.CargaDatosEnWn()
            
       def CargaDatosEnWn(self):
           self.TraeFromDbClienProvee()
           self.TraeFrmDbAlmMP()
           self.LeeMPCBox()
           self.ui.TipoMovValLbl.setText("")
           if self.TipoMov==0 :
               self.ui.TipoMovValLbl.setText("ENTRADA ")
               self.ui.ClienProvLbl.setText("Proveedor: ")
           else :
               self.ui.TipoMovValLbl.setText("SALIDA ")
               self.ui.ClienProvLbl.setText("Cliente: ")
           self.ChecaCampoCant()
           
       def  TraeFromDbClienProvee(self):
            global Folio,DataClienProv
            if self.TipoMov==0 :
                query="SELECT ID,Nombre  FROM  tblProveedores"
        
            elif self.TipoMov==1 :
                query="SELECT ID,Nombre  FROM  tblClientes"
            DataClienProv=run_query(self,query)
            self.ui.ClienProvCBox.currentIndex()
            self.ui.ClienProvCBox.clear()
            for i in range(0,len(DataClienProv)):
                self.ui.ClienProvCBox.addItem(DataClienProv[i][1])
            Folio=UltimoFolMas1(self,"ID", "tblEntradas")
            self.ui.FolioValLbl.setText(str(Folio))

       def  TraeFrmDbAlmMP(self):
            global DataMP,DataAlmacenesMP, DataOperadores,DataPresentacion
            query="SELECT *  FROM  tblMateriaPrima"
            DataMP=run_query(self,query)           
            query="SELECT ID,Clave,Cliente  FROM  tblContenedoresMateriaPrima WHERE Estatus=1"
            DataAlmacenesMP=run_query(self,query) 
            self.ui.AlmacenCBox.clear()
            for i in range(0,len( DataAlmacenesMP)):
                self.ui.AlmacenCBox.addItem( DataAlmacenesMP[i][2])
            self.ui.MPProdCBox.clear()
            for i in range(0,len(DataMP)):
                self.ui.MPProdCBox.addItem( DataMP[i][2])
            query="SELECT *  FROM  tblOperadores"
            DataOperadores=run_query(self,query) 
            self.ui.PesadorCBox.clear()
            for i in range(0,len(DataOperadores)):
                self.ui.PesadorCBox.addItem( DataOperadores[i][1])   
            
            query="SELECT ID, Descripcion FROM  tblTipoPresentacion"
            DataPresentacion=run_query(self,query) 
            self.ui.PresentaCBox.clear()
            for i in range(0,len(DataPresentacion)):
                self.ui.PresentaCBox.addItem( DataPresentacion[i][1])   
       
       def  LeeMPCBox(self):
            global DataMP   
            ind=self.ui.MPProdCBox.currentIndex()
            self.ui.UdeMValLbl.setText(DataMP[ind][4])
        
       def ChecaCampoCant(self):
           Cant=self.ui.CantCampo.text()
           validar = Cant.isdigit() 
           if Cant == "":
              self.ui.CantCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CantCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
              self.ui.CantCampo.setStyleSheet("border: 2px solid green;")
              return True     
           
       
       def ChecaCant(self):
           Cant=self.ui.CantCampo.text()
           #  Checa que sean datos positivos
           num_format = re.compile(r'^[1-9][0-9]*$')
           it_is = re.match(num_format,Cant)
           if Cant == "":
              self.ui.CantCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not it_is:
              self.ui.CantCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
              self.ui.CantCampo.setStyleSheet("border: 2px solid green;")
              return True     
           

       def GuardarFolio(self):
           global Folio, DataClienProv
           Costo=ChecaDatNumNoNeg(self,self.ui.CostoCampo.text())
           Flete=ChecaDatNumNoNeg(self,self.ui.FleteCampo.text())
           Maniobra=ChecaDatNumNoNeg(self,self.ui.ManiobraCampo.text())
           Folio=ChecaDatNumNoNeg(self,self.ui.ManFolioCampo.text())
           Cantidad=ChecaDatNumNoNeg(self,self.ui.CantCampo.text())
           if Costo*Flete*Maniobra*Cantidad < 0  :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Error en Datos ")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_() 
               return
           
           f_mov=self.ui.FechaMov.date()
           Fecha=f_mov.toString(Qt.ISODate)
           IDClieProve=DataClienProv[self.ui.ClienProvCBox.currentIndex()][0]
           IxAlmacen=self.ui.AlmacenCBox.currentIndex()
           IDAlmacen=DataAlmacenesMP[IxAlmacen][0]
           IDMP=DataMP[self.ui.MPProdCBox.currentIndex()][0]
           IDPresenta= DataPresentacion[self.ui.PresentaCBox.currentIndex()][0]
           ID=GenerarFolioEntradas(self,Folio,Fecha,2)
           IxPesador=self.ui.PesadorCBox.currentIndex()
           IDPesador=DataOperadores[IxPesador][0]
           Camion=self.ui.CamionCampo.text()
           Chofer=self.ui.ChoferCampo.text()
           Placas=self.ui.PlacasCampo.text()
           Refe=0
           Nota=self.ui.NotasCampo.toPlainText()
           Datos=(ID,0,IDClieProve,IDAlmacen,IDMP,Cantidad,IDPresenta,0,Nota)
           query="INSERT INTO tblMovimientosMP VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
           run_query2(self,query,Datos)
           Datos=(Folio,IDPesador,Costo,Flete,Maniobra,Camion,Chofer,Placas)
           query="INSERT INTO tblOtrosDatMovMP VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?)"
           run_query2(self,query,Datos)
           MsgGrabReg(True)
           Folio=UltimoFolMas1(self,"ID", "tblEntradas")
           self.ui.FolioValLbl.setText(str(Folio))
           self.ui.CantCampo.clear()
           self.ui.CantCampo.setFocus()
           self.ui.CamionCampo.clear()
           self.ui.ChoferCampo.clear()
           self.ui.PlacasCampo.clear()
           self.ui.NotasCampo.clear()
           


class  SalidasPorBas(QDialog):
       def __init__(self):
           QDialog.__init__(self)
           self.ui=Ui_UISalidasPorBas()
           self.ui.setupUi(self) 
           now = QDateTime.currentDateTime().date()
           self.ui.FechaMov.setDate(now)    
           self.ui.PBCerrar.clicked.connect(self.close)  
           self.ui.CantCampo.textChanged.connect(self.ChecaCampoCant)
           self.ui.MPProdCBox.activated.connect(self.LeeMPProdCBox)
           self.ui.TipoSalCBox.activated.connect(self.LeeTSCBox)
           self.ui.PBGuardar.clicked.connect(self.GuardarFolio)
           self.ui.FolioLbl.setText("Folio:") 
           self.ui.ManFolioLbl.setText("FolioBas:")
           self.TraeFrmDb()
           self.ChecaCampoCant()
           self.LeeTSCBox()
           global Lista,ListaToDb
           ListaToDb=[]
           Lista=[]
           #self.ui.CantCampo.clear()
           #self.ui.CantCampo.setFocus()
                  
       def   TraeFromDbClienProvee(self):
            global Folio,DataProveedor,DataCliente
            query= "SELECT ID,Nombre FROM tblClientes  "
            DataCliente=run_query(self,query)
            Folio=UltimoFolMas1(self,"Folio", "tblProductoMovimientos")
            self.ui.FolioValLbl.setText(str(Folio))
        
       def  TraeFrmDb(self):
            global  DataOperadores,ID
            global Folio,DataCliente,DataPresentacion, DataTipoMaterial
            query= "SELECT ID,Nombre FROM tblClientes  "
            DataCliente=run_query(self,query)
            self.ui.ClienProvCBox.clear()
            for i in range(0,len(DataCliente)):
                self.ui.ClienProvCBox.addItem(DataCliente[i][1])
            query="SELECT *  FROM  tblTipoMaterial"
            DataTipoMaterial=run_query(self,query) 
            self.ui.TipoSalCBox.clear()
            for i in range(0,len(DataTipoMaterial)):
                self.ui.TipoSalCBox.addItem( DataTipoMaterial[i][1])  
            query="SELECT *  FROM  tblOperadores"
            DataOperadores=run_query(self,query) 
            self.ui.PesadorCBox.clear()
            for i in range(0,len(DataOperadores)):
                self.ui.PesadorCBox.addItem( DataOperadores[i][1])   
            query="SELECT *  FROM  tblTipoPresentacion WHERE Visible=1 "
            DataPresentacion=run_query(self,query) 
            self.ui.PresentacionCBox.clear()
            for i in range(0,len(DataPresentacion)):
                self.ui.PresentacionCBox.addItem( DataPresentacion[i][1]) 
            ID=UltimoFolMas1(self,"ID", "tblSalidas")
            self.ui.FolioValLbl.setText(str(ID))
      
       def LeeTSCBox(self):
           global TipoMat,DataMat,DataAlmacen,DbTabla
           TipoMat= DataTipoMaterial[self.ui.TipoSalCBox.currentIndex()][0]
           self.ui.MPProdCBox.clear()
           self.ui.AlmacenCBox.clear()
           #  Tipos de Salida    1= Sale Producto    2=  sale Materia Prima
           if TipoMat == 1:
               query1="SELECT ID, Descripcion,UdeM  FROM  tblProductos WHERE IDTipoStatus='Activo'"
               query2="SELECT ID,Clave,Proveedor  FROM  tblContenedoresProducto WHERE Estatus=1"
               DbTabla="tblProductoMovimientos"
           elif TipoMat == 2:
               query1="SELECT ID, Descripcion, IDUnidadMedida   FROM  tblMateriaPrima WHERE IDTipoStatus='Activo'"
               query2="SELECT ID,Clave,Cliente  FROM  tblContenedoresMateriaPrima WHERE Estatus=1"
               DbTabla="tblMovimientosMP"
           DataMat=run_query(self,query1)   
           for i in range(0,len(DataMat)):
               self.ui.MPProdCBox.addItem(DataMat[i][1])
           DataAlmacen=run_query(self,query2)
           for i in range(0,len(DataAlmacen)):
               self.ui.AlmacenCBox.addItem(DataAlmacen[i][2])

       def  LeeMPProdCBox(self):
           ind=self.ui.MPProdCBox.currentIndex()
           self.ui.UdeMValLbl.setText(DataMat[ind][2])
                  
       def ChecaCampoCant(self):
           Cant=self.ui.CantCampo.text()
           validar = Cant.isdigit() 
           if Cant == "":
              self.ui.CantCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif not validar:
              self.ui.CantCampo.setStyleSheet("border: 2px solid red;")
              return False
           else:
              self.ui.CantCampo.setStyleSheet("border: 2px solid green;")
              return True     
              
       def GuardarFolio(self):
           if self.ChecaCampoCant() == False :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Error en Datos ")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_() 
               return
           if TipoMat ==1:
               if  ChecaSiProdTieneReceta(self,DataMat[self.ui.MPProdCBox.currentIndex()][0]) == False:
                    msg=QMessageBox()
                    msg.setWindowTitle("Informacion")
                    msg.setText("Error No Hay Receta para este Producto ")
                    msg.setIcon(QMessageBox.Warning)
                    x=msg.exec_() 
                    return
           Folio=self.ui.ManFolioCampo.text()
           f_mov=self.ui.FechaMov.date()
           Fecha=f_mov.toString(Qt.ISODate)
           IDPresentacion=DataPresentacion[self.ui.PresentacionCBox.currentIndex()][0]
           Datos=(Folio,Fecha,TipoMat,DbTabla)
           GenerarFolioSalidas(self,Folio,Fecha,TipoMat)
           IDCliente=DataCliente[self.ui.ClienProvCBox.currentIndex()][0]
           IDAlmacen=DataAlmacen[self.ui.AlmacenCBox.currentIndex()][0]
           DescAlmacen=DataAlmacen[self.ui.AlmacenCBox.currentIndex()][2]
           IDMaterial=DataMat[self.ui.MPProdCBox.currentIndex()][0]
           DescMaterial=DataMat[self.ui.MPProdCBox.currentIndex()][1]
           Cant=int(self.ui.CantCampo.text())
           Nota=self.ui.NotasCampo.toPlainText()
           Referencia=0
           ID=UltimoFolMas1(self,"ID", "tblSalidas")-1
           GuardaMovMP_Prod(self,TipoMat,ID,Folio,1,IDCliente,IDAlmacen,IDMaterial,Cant,IDPresentacion,Referencia,Nota)
           if TipoMat == 1:
               Datos=(Folio,Fecha,2,"tblMovimientosMP")
               query="INSERT INTO tblSalidas VALUES(NULL, ?, ?, ?, ?)"
               #Hace el cruce de para identificar el almacen de MP para cargar el desglose , entre los almacenes de RA y Julian y Valmo
               if IDAlmacen == 1 :
                   IDAlmaMP=4
               elif IDAlmacen == 2:
                   IDAlmaMP=5
               else :
                   IDAlmaMP=3
               HaceCargoEnAlmaMP_X_SalProd(self,Fecha,IDMaterial,1,IDCliente,IDAlmaMP,Cant,IDPresentacion,ID)
           MsgGrabReg(True)
           #  Saca ultimo folio de Movs MP
           Folio=UltimoFolMas1(self,"ID", "tblSalidas")
           self.ui.FolioValLbl.setText(str(Folio))
           self.ui.CantCampo.clear()
           self.ui.CantCampo.setFocus()
           self.ui.CamionCampo.clear()
           self.ui.ChoferCampo.clear()
           self.ui.PlacasCampo.clear()
           self.ui.NotasCampo.clear()
         
#   Si es Salida  Carga el desglose de la  MP  en el inventario de MP 
#           
           #res= HaceCargoEnAlmaMP_X_SalProd(self,IDProd,Fecha,TipoMov,ClaveAlmacen,Cant,IDClieProve,IDPesador,0)
class  InventarioInicialMPyProd(QDialog):
       def __init__(self,EoS):
           QDialog.__init__(self)
           self.ui=Ui_InventarioInicialesMP()
           self.ui.setupUi(self) 
           now = QDateTime.currentDateTime().date()
           self.ui.FechaWidget.setDate(now)
           global TipoMov
           TipoMov=EoS
           if TipoMov==1 :
               self.wt="Inventario Incial de Productos" 
               self.setWindowTitle(self.wt)
               self.ui.MPProdLbl.setText("Producto:")  
           self.ui.PBCerrar.clicked.connect(self.close)  
           self.ui.CantidadCampo.textChanged.connect(self.ChecaCampoCant)
           self.ui.MPProdCBox.activated.connect(self.LeeCBox)
           self.ui.AlmacenCBox.activated.connect(self.LeeCBox)
           self.ui.PBAceptar.clicked.connect(self.Agregar) 
           self.LlenaCBox()
           self.LlenaAlmacenCBox()
           self.LeeCBox()
           now = QDateTime.currentDateTime().date()
           self.ui.FechaWidget.setDate(now)
           
       def LlenaCBox(self):
           global DataMP,DataProd
           if TipoMov==1 :
               query="SELECT ID,Descripcion  FROM  tblProductos"
               DataProd=run_query(self,query) 
               data=DataProd
           elif TipoMov==0 :
               query="SELECT ID,Descripcion  FROM  tblMateriaPrima"
               DataMP=run_query(self,query) 
               data=DataMP
           self.ui.MPProdCBox.clear()
           for i in range(0,len(data)):
               self.ui.MPProdCBox.addItem( data[i][1])
       
       def LlenaAlmacenCBox(self):
           global AlmacenData
           if TipoMov==0 :
               query="SELECT ID,Cliente FROM tblContenedoresMateriaPrima "
           elif TipoMov==1:
               query="SELECT ID,Proveedor FROM tblContenedoresProducto "
           AlmacenData=run_query(self,query)
           self.ui.AlmacenCBox.clear()
           for item in AlmacenData :
               j=str(item[1])
               self.ui.AlmacenCBox.addItem(j) 
           self.ui.AlmacenCBox.setCurrentIndex(0)
       
       def LeeCBox(self):
           if TipoMov==0 :
               query="SELECT ID,Cliente FROM tblContenedoresMateriaPrima "
               AlmacenData=run_query(self,query)
               Almacen=AlmacenData[self.ui.AlmacenCBox.currentIndex()][0]
               IDMP=DataMP[self.ui.MPProdCBox.currentIndex()][0] 
               query= "SELECT * FROM tblInventarioInicialesMP WHERE  IDMP= ? AND IDContenedor= ? ORDER BY  ID DESC"    
               Data=run_query2(self,query,(IDMP,Almacen)) 
           elif TipoMov == 1 :
               query="SELECT ID, Proveedor FROM tblContenedoresProducto "
               AlmacenData=run_query(self,query)
               Almacen=AlmacenData[self.ui.AlmacenCBox.currentIndex()][0]
               IDProd=DataProd[self.ui.MPProdCBox.currentIndex()][0] 
               query= "SELECT * FROM tblInventarioInicialesProductos WHERE  IDProducto= ? AND IDContenedor= ? ORDER BY  ID DESC"    
               Data=run_query2(self,query,(IDProd,Almacen)) 
           if len(Data) > 0 :
               self.ui.FechaUltValLbl.setText(Data[0][1])
           else :
               self.ui.FechaUltValLbl.setText("Sin Datos")
          
       
       def ChecaCampoCant(self):
           Cant=self.ui.CantidadCampo.text()
           num_format = re.compile(r'^\-?[1-9][0-9]*$')
           it_is = re.match(num_format,Cant)
           if Cant == "":
              self.ui.CantidadCampo.setStyleSheet("border: 2px solid yellow;")
              return False
           elif it_is:
              self.ui.CantidadCampo.setStyleSheet("border: 2px solid green;")
              return True
           else:
              self.ui.CantidadCampo.setStyleSheet("border: 2px solid red;")
              return False 
        
       def Agregar(self):
           Fecha=self.ui.FechaWidget.date()
           Fecha=Fecha.toString(Qt.ISODate)
           ind=self.ui.MPProdCBox.currentIndex()
           IDContenedor=AlmacenData[self.ui.AlmacenCBox.currentIndex()][0]
           valida=self.ChecaCampoCant()
           #currdate="20"+tm.strftime('%y-%m-%d')
           Nota=self.ui.NotasCampo.toPlainText()
           if valida== True :  
               cant=self.ui.CantidadCampo.text()
           else :
               msg=QMessageBox()
               msg.setWindowTitle("Informacion")
               msg.setText("Cantidad Invalida")
               msg.setIcon(QMessageBox.Warning)
               x=msg.exec_() 
               return
           if TipoMov==0 :
               ID=DataMP[ind][0] 
               query="INSERT INTO tblInventarioInicialesMP VALUES(NULL, ?, ?, ?, ?, ?)"
           else :
               ID=DataProd[ind][0]
               query="INSERT INTO tblInventarioInicialesProductos VALUES(NULL, ?, ?, ?, ?, ?)" 
           DataToDB=(Fecha,ID,IDContenedor,cant,Nota)
           run_query(self,query,DataToDB)
           self.ui.CantidadCampo.clear()
           self.ui.NotasCampo.clear()
           self.LeeCBox()

class ListaInvenInicMP(QDialog):
        def __init__(self):
           QDialog.__init__(self)
           self.ui=Ui_ListaUltimoInvMP()
           self.ui.setupUi(self) 
           self.ui.Tabla.setColumnWidth(0,200)
           self.ui.Tabla.setColumnWidth(1,150)
           self.ui.Tabla.setColumnWidth(2,120)
           now = QDateTime.currentDateTime().date()
           self.ui.PBCerrar.clicked.connect(self.close) 
           self.ui.PBImprimir.clicked.connect(self.Imprimir) 
           self.LlenaTabla()


        def LlenaTabla(self):
            query= """  SELECT  tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion,MAX(tblInventarioInicialesMP.Fecha),tblInventarioInicialesMP.Cantidad 
                        FROM tblInventarioInicialesMP
                        INNER JOIN tblContenedoresMateriaPrima ON  tblContenedoresMateriaPrima.ID = tblInventarioInicialesMP.IDContenedor
                        INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblInventarioInicialesMP.IDMP
                        WHERE tblInventarioInicialesMP.IDContenedor=3
                        GROUP BY tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion
                        UNION
                        SELECT  tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion,MAX(tblInventarioInicialesMP.Fecha),tblInventarioInicialesMP.Cantidad 
                        FROM tblInventarioInicialesMP
                        INNER JOIN tblContenedoresMateriaPrima ON  tblContenedoresMateriaPrima.ID = tblInventarioInicialesMP.IDContenedor
                        INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblInventarioInicialesMP.IDMP
                        WHERE tblInventarioInicialesMP.IDContenedor=4
                        GROUP BY tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion
                        UNION
                        SELECT  tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion,MAX(tblInventarioInicialesMP.Fecha),tblInventarioInicialesMP.Cantidad 
                        FROM tblInventarioInicialesMP
                        INNER JOIN tblContenedoresMateriaPrima ON  tblContenedoresMateriaPrima.ID = tblInventarioInicialesMP.IDContenedor
                        INNER JOIN tblMateriaPrima ON tblMateriaPrima.ID = tblInventarioInicialesMP.IDMP
                        WHERE tblInventarioInicialesMP.IDContenedor=5
                        GROUP BY tblContenedoresMateriaPrima.Cliente, tblMateriaPrima.Descripcion

                   """
            Datos=run_query(self,query)
            self.ui.Tabla.setRowCount(0)
            for ren,RenData in enumerate(Datos):
                self.ui.Tabla.insertRow(ren)
                for col,item in enumerate(RenData):
                    if col ==3 :
                        item='{:,}'.format(item)
                    self.ui.Tabla.setItem(ren,col, QtWidgets.QTableWidgetItem(str(item)))



        def Imprimir(self):
            pass
           








